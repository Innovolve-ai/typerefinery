{
  "paused": false,
  "id": "f12051001rd51d",
  "reference": "",
  "author": "",
  "group": "",
  "icon": "fa fa-chart-pie",
  "color": "#041EF5",
  "version": "",
  "readme": "",
  "url": "https://localhost:8111/Typerefinery_Wiring",
  "name": "PROJECT_ID",
  "components": {
    "c5aria8f8f": "<script total>\r\n\r\n\texports.id = 'typerefinery_printjson';\r\n\texports.name = 'Print JSON';\r\n\texports.icon = 'fa fa-print';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'TypeRefinery.io';\r\n\texports.version = '2';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, repo: false, data: true };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar data = $.data;\r\n\r\n\t\t\tif (config.data !== false) {\r\n\t\t\t\tif (data instanceof Buffer)\r\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\r\n\t\t\t}\r\n\r\n\t\t\tvar count = 0;\r\n\r\n\t\t\tfor (var key in config) {\r\n\t\t\t\tif (key == \"repo\" || key == \"data\" ) {\r\n\t\t\t\t\tif (config[key]) {\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar output = count > 1 ? {} : null;\r\n\r\n\t\t\tif (config.repo) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.repo = $.repo;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.repository;\r\n\t\t\t}\r\n\r\n\t\t\tif (config.data) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.data = $.data;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.data;\r\n\t\t\t}\r\n\r\n\t\t\toutput && instance.status(output);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.status('');\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\r\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<readme>\r\n\tThe component prints incoming data in a JSON format.\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\r\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<script>\r\n\tFUNC.printjson_click = function(type, data) { // type = path/data\r\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\r\n\t};\r\n\r\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\r\n\t\tvar el = $(this);\r\n\t\tvar iscopy = el.hclass('fa-copy');\r\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\r\n\t\tsetTimeout(function(){\r\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\r\n\t\t}, 2000);\r\n\t});\r\n</script>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\r\n\t</footer>\r\n</body>",
    "pubsrcfyn2ecf44Xsvg_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcfyn2ecf44', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcfyn2ecf44Xsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <http://127.0.0.1:8112>\n- Channel: __publish__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Message ... / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
    "subsrcfyn2ecf44Xsvg_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcfyn2ecf44', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcfyn2ecf44'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['svg_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'svg_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcfyn2ecf44Xsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <http://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"svg_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"stepId\": {\n        \"type\": \"string\"\n      },\n      \"flowId\": {\n        \"type\": \"string\"\n      },\n      \"stepName\": {\n        \"type\": \"string\"\n      },\n      \"path\": {\n        \"type\": \"string\"\n      },\n      \"projectId\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
    "calsrcfyn2ecf44Xsvg_query": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcfyn2ecf44', 'svg_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcfyn2ecf44'];\n\t\t\tif (socket && socket.calls && socket.calls['svg_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'svg_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcfyn2ecf44Xsvg_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_query\n- URL address: <http://127.0.0.1:8112>\n- Channel: __call__\n- JSON schema `svg_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Message ... / <b>svg_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
    "pubsrcfyn2ecf44Xpayload_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcfyn2ecf44', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcfyn2ecf44Xpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <http://127.0.0.1:8112>\n- Channel: __publish__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"topic\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Message ... / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
    "subsrcfyn2ecf44Xpayload_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcfyn2ecf44', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcfyn2ecf44'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcfyn2ecf44Xpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <http://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
    "subsrcfyn2ecf44Xpayload_update": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcfyn2ecf44', 'payload_update'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcfyn2ecf44'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_update']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_update', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcfyn2ecf44Xpayload_update .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_update\n- URL address: <http://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_update.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_update\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_update</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
    "subsrcfyn2ecf44Xpayload_remove": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcfyn2ecf44', 'payload_remove'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcfyn2ecf44'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_remove']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_remove', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcfyn2ecf44Xpayload_remove .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_remove\n- URL address: <http://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_remove.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_remove\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"topic\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_remove</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
    "calsrcfyn2ecf44Xpayload_query": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcfyn2ecf44', 'payload_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcfyn2ecf44'];\n\t\t\tif (socket && socket.calls && socket.calls['payload_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'payload_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcfyn2ecf44Xpayload_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_query\n- URL address: <http://127.0.0.1:8112>\n- Channel: __call__\n- JSON schema `payload_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"topic\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Message ... / <b>payload_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
    "typerefinery_runnodeedges": "<script total>\n\n\texports.id = 'typerefinery_runnodeedges';\n\texports.name = 'Run (node & edges)';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '1';\n\n\texports.config = { title: exports.name, version: exports.version, algorithm: '', algorithmrequirements: 'argparse\\nloguru', endpoint: '' };\n\texports.inputs = [{ id: 'connection', name: 'Connection' }, { id: 'query', name: 'TQL Query' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\t\tvar fn;\n\t\tvar values = {};\n\t\tinstance.message = function($) {\n\t\t\t// Getting endpoint from the user\n\t\t\tconst endpointData = {\n\t\t\t\t\tendpoint: config.endpoint,\n\t\t\t}\n\n\t\t\t// Inputs to this block will be saved in values Object\n\t\t\tvalues[$.input] = $.data;\n\n\t\t\tif (values.connection && values.query && config.algorithm) {\n\t\t\t\tvar payload = {\n\t\t\t\t\tdbhost: values.connection.dbhost,\n\t\t\t\t\tdbport: values.connection.dbport,\n\t\t\t\t\tdbdatabase: values.connection.dbdatabase,\n\t\t\t\t\tdbquery: values.query.dbquery,\n\t\t\t\t\talgorithm: config.algorithm,\n\t\t\t\t\talgorithmrequirements: config.algorithmrequirements,\n\t\t\t\t\treturnoutput: 'output'\n\t\t\t\t};\n\t\t\t\tlet options = {\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type':\n\t\t\t\t\t\t'application/json;charset=utf-8'\n\t\t\t\t\t},\n\t\t\t\t\tbody: JSON.stringify(payload)\n\t\t\t\t}\n\n\t\t\t\t// Sending request to get Data\n\t\t\t\tlet fetchRes = fetch(endpointData.endpoint,options);\n\t\t\t\tfetchRes.then(res =>res.json())\n\t\t\t\t\t.then(d => { $.send('output', d) })\n\t\t\t\t\t.catch(err => { $.send('output', err) })\n\n\t\t\t\t\tvalues.query = null;\n\t\t\t} else {\n\t\t\t\t// IMPORTANT: we must destroy the current message becase we don't need to send it next\n\t\t\t\t$.destroy();\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n</script>\n<readme>\n\tRun a node and edges algorithm on a TypeRefinery database.\n</readme>\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.endpoint__required:1\" class=\"m\">Endpont</div>\n\t\t<div data---=\"input__?.algorithmrequirements__text:1\" class=\"m\">Requirements</div>\n\t\t<div class=\"ui-input-label\">Algorithm:</div>\n\t\t<div data---=\"codemirror__?.algorithm__type:python;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n</body>\n",
    "typerefinery_api_datastore_connection": "<script total>\n\t\n\texports.id = 'typerefinery_api_datastore_connection';\n\texports.name = 'API Datastore Connection';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '1';\n\t\n\texports.config = { title: exports.name, version: exports.version, endpoint: 'http://127.0.0.1:8000/datastore/connection', connectionid:'PROJECT_ID_con' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = async function($) {\n\t\t\tvar connectionsList;\n\n\t\t\t// Getting all the connections from the store\n\t\t\tconst endpoint = config.endpoint;\n\t\t\tconst res = await fetch(endpoint);\n\t\t\tconst res_data = await res.json();\n\n\t\t\t// Getting connections details to display the dropdown list of all connections\n\t\t\tconnectionsList = res_data.map(el => ({id: el.connectionid, name: el.label + ' - ' + el.connectionid }));\n\n\t\t\t// Find the selected connection\n\t\t\tconst connection = res_data.find(el => el.connectionid === config.connectionid);\n\n\t\t\tif(connection) {\n\t\t\t\tconst connectionDetails = {\n\t\t\t\t\tdbhost: connection.host,\n\t\t\t\t\tdbport: connection.port,\n\t\t\t\t\tdbdatabase: connection.database,\n\t\t\t\t}\n\t\t\t\t// send the connection details as the output of this block\n\t\t\t\t$.send('output', connectionDetails);\n\t\t\t\t$.destroy();\n\t\t\t}\n\t\t\t// Set the connections dropdown in the UI\n\t\t\tinstance.call = async function(data, answer) {\n\t\t\t\tanswer(connectionsList);\n\t\t\t};\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n</script>\n\n<readme>\n\tGet list of connections from datastore endpoint.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.endpoint__required:1\"><b>Endpoint</b></div>\n\t\t<div data---=\"input__?.connectionid__dirsource:%connectionidList;dirraw:1;placeholder:Choose a connection;dirempty:No connection\" class=\"m\"><b>Connection</b></div>\n\t</div>\n</settings>\n\n<script>\n\t// datastoreconnection is the name of your component in lower-case\n\tON('configure_datastoreconnection', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%connectionidList', response);\n\t\t});\n\t});\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n</body>",
    "typerefinery_api_payload": "<script total>\n\n\texports.id = 'typerefinery_api_payload';\n\texports.name = 'API Payload';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, topic: \"topic\", type: \"wrap\" };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'wrap':\n\t\t\t\t\tconsole.log({ payload: JSON.stringify(data), topic: config.topic });\n\t\t\t\t\t$.send('output', { payload: JSON.stringify(data), topic: config.topic });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar payloadData = data.payload;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpayloadData = JSON.parse(data.payload);\n\t\t\t\t\t} catch {\n\t\t\t\t\t\tconsole.log(\"Error: Payload is not a valid JSON, using as is.\");\n\t\t\t\t\t}\n\t\t\t\t\tvar payloadTopic = data.topic || \"no topic\";\n\t\t\t\t\tconsole.log(payloadTopic);\n\t\t\t\t\tif (payloadData && payloadTopic) {\n\t\t\t\t\t\t//skip if topic is not the same\n\t\t\t\t\t\tif (config.topic === payloadTopic) {\n\t\t\t\t\t\t\t$.send('output', payloadData);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.topic === \"\") {\n\t\t\t\tconfig.topic = \"topic\";\n\t\t\t}\n\t\t\tif (config.type === \"\") {\n\t\t\t\tconfig.type = \"wrap\";\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tWrap input data into Payload schema.\n</readme>\n\n<style>\n\t.CLASS .output { text-align: right }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.topic__text\"><b>Topic</b></div>\n\t\t<div data---=\"input__?.type__dirsource:wrap|Wrap,unwrap|Unwrap;required:1\">Type</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t\t<div>Topic: <b class=\"monospace\" data-bind=\"CONFIG.topic__text__empty\"></b></div>\n\t\t<div>Type: <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></div>\n\t</header>\n</body>",
    "typerefinery_api_datastore_query": "<script total>\n\t\n\texports.id = 'typerefinery_api_datastore_query';\n\texports.name = 'API Datastore Query';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '1';\n\n\texports.config = { title: exports.name, version: exports.version, endpoint: 'http://127.0.0.1:8000/datastore/query', queryid: 'PROJECT_ID_query' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = async function($) {\n\t\t\tvar queryList;\n\n\t\t\t// Getting all the queries from the store\n\t\t\tconst endpoint = config.endpoint;\n\t\t\tconst res = await fetch(endpoint);\n\t\t\tconst res_data = await res.json();\n\n\t\t\t// Getting query details to display the dropdown list of all queries\n\t\t\tqueryList = res_data.map(el => ({id: el.queryid, name: `${el.label} (${el.queryid},${el.query.substr(12)})`}));\n\n\t\t\t// Find the selected query\n\t\t\tconst selectedQuery = res_data.find(el => el.queryid === config.queryid)\n\n\t\t\tif(selectedQuery) {\n\t\t\t\tconst queryDetails = { dbquery: selectedQuery.query };\n\t\t\t\t// send the query details as the output of this block\n\t\t\t\t$.send('output', queryDetails);\n\t\t\t\t$.destroy();\n\t\t\t}\n\t\t\t// Set the queries dropdown in the UI\n\t\t\tinstance.call = async function(data, answer) {\n\t\t\t\tanswer(queryList);\n\t\t\t};\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n<readme>\n\tGet list of queries from datastore endpoint.\n</readme>\n<script>\n\t// datastorequery is the name of your component in lower-case\n\tON('configure_datastorequery', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tconsole.log('on', response);\n\t\t\tSET('%queryidList', response);\n\t\t});\n\t});\n</script>\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.endpoint__required:1\"><b>Endpoint</b></div>\n\t\t<div data---=\"input__?.queryid__dirsource:%queryidList;dirraw:1;placeholder:Choose a query;dirempty:No query\" class=\"m\"><b>Query</b></div>\n\t</div>\n</settings>\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n</body>",
    "typerefinery_api_createsvg_webcolaviz": "<script total>\n\n\texports.id = 'typerefinery_api_createsvg_webcolaviz';\n\texports.name = 'API WebCola Viz';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, endpointcreatesvg: \"http://127.0.0.1:8000/createSvg\", endpointproject: 'http://127.0.0.1:8000/datastore/project', dependenciesjs: 'https://d3js.org/d3.v4.js https://cdn.jsdelivr.net/npm/webcola@3.4.0/WebCola/cola.js', code: '' };\n\texports.inputs = [{ id: 'graph_data', name: 'DATA' },{ id: 'theme', name: 'Theme' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\texports.make = function(instance, config) {\n\t\tvar fn;\n\t\tvar values = {};\n\n\t\tinstance.message = function($) {\n\n\t\t\t// Inputs to this block will be saved in values Object\n\t\t\tvalues[$.input] = $.data\n\n\t\t\tif (values.graph_data && values.theme) {\n\t\t\t\tvar project;\n\t\t\t\tvar input_data = {\n\t\t\t\t\ttheme: values.theme,\n\t\t\t\t\tgraph_data: values.graph_data\n\t\t\t\t};\n\n\t\t\t\t// Replacing GRAPH_DATA variable with actual DATA\n\t\t\t\tconst codeWithData = config.code.replace('GRAPH_DATA', JSON.stringify(input_data.graph_data))\n\t\t\t\t// Replacing THEME variable with actual THEME\n\t\t\t\tconst code = codeWithData.replace('THEME', JSON.stringify(input_data.theme))\n\n\t\t\t\tconst payload = {\n\t\t\t\t\t\"code\": code,\n\t\t\t\t\t\"dependencies\": config.dependenciesjs.split(' '),\n\t\t\t\t\t\"returnoutput\": \"script\"\n\t\t\t\t};\n\n\t\t\t\tlet options = {\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type':\n\t\t\t\t\t\t'application/json;charset=utf-8'\n\t\t\t\t\t},\n\t\t\t\t\tbody: JSON.stringify(payload)\n\t\t\t\t}\n\n\t\t\t\t// Sending request to generate SVG\n\t\t\t\tPromise.all([\n\t\t\t\t\t\tfetch(config.endpointproject).then(value => value.json()),\n\t\t\t\t\t\tfetch(config.endpointcreatesvg, options).then(value => value.json()),\n\t\t\t\t]).then(([projects, output]) => {\n\t\t\t\t\t// Getting current project\n\t\t\t\t\tproject = projects.find(el => el.flowid == instance.main.id)\n\t\t\t\t\t// response output\n\t\t\t\t\tconst res = {\n\t\t\t\t\t\tpath: output[\"output.url\"],\n\t\t\t\t\t\tstepId: instance.id,\n\t\t\t\t\t\tstepName: instance.module.name,\n\t\t\t\t\t\tflowId: instance.main.id,\n\t\t\t\t\t\tprojectId: project.projectid\n\t\t\t\t\t}\n\t\t\t\t\t// Sending the response\n\t\t\t\t\t$.send('output', res)\n\t\t\t\t}).catch((err) => {\n\t\t\t\t\t// Sending the error\n\t\t\t\t\t$.send('output', err)\n\t\t\t\t});\n\n\t\t\t\tvalues.theme = null\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n</script>\n<readme>\n\tRun WebCola Viz to your flow.\n</readme>\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.endpointproject__required:1\" class=\"m\">Endpont Projects</div>\n\t\t<div data---=\"input__?.endpointcreatesvg__required:1\" class=\"m\">Endpont CreateSvg</div>\n\t\t<div data---=\"input__?.dependenciesjs__text:1\" class=\"m\">Dependencies JS (space separated)</div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n</body>",
    "typerefinery_api_datastore_theme": "<script total>\n\t\n\texports.id = 'typerefinery_api_datastore_theme';\n\texports.name = 'API Datastore Theme';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '1';\n\n\texports.config = { title: exports.name, version: exports.version, endpoint: 'http://127.0.0.1:8000/datastore/theme', themeid: 'PROJECT_ID_theme' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.meta = { settingswidth: 1200 };\n\t\n\texports.make = function(instance, config) {\n\t\tinstance.message = async function($) {\n\t\t\tvar themesList;\n\n\t\t\t// Getting all the themes from the store\n\t\t\tconst endpoint = config.endpoint;\n\t\t\tconst res = await fetch(endpoint);\n\t\t\tconst res_data = await res.json();\n\n\t\t\t// Getting theme details to display the dropdown list of all themes\n\t\t\tthemesList = res_data.map(el => ({id: el.themeid, name: `${el.label} (${el.themeid},${el.theme.substr(12)})`}));\n\n\t\t\t// Find the selected theme\n\t\t\tconst selectedTheme = res_data.find(el => el.themeid === config.themeid)\n\n\t\t\tif(selectedTheme) {\n\t\t\t\tconst themeDetails = JSON.parse(selectedTheme.theme);\n\t\t\t\t// send the theme details as the output of this block\n\t\t\t\t$.send('output', themeDetails);\n\t\t\t\t$.destroy();\n\t\t\t}\n\n\t\t\t// Set the themes dropdown in the UI\n\t\t\tinstance.call = async function(data, answer) {\n\t\t\t\t\tanswer(themesList);\n\t\t\t};\n\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n</script>\n\n<readme>\n\tGet list of themes from datastore endpoint.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.endpoint__required:1\"><b>Endpoint</b></div>\n\t\t<div data---=\"input__?.themeid__dirsource:%themeidList;dirraw:1;placeholder:Choose a theme;dirempty:No theme\" class=\"m\"><b>Theme</b></div>\n\t</div>\n</settings>\n\n<script>\n\t// datastoretheme is the name of your component in lower-case\n\tON('configure_datastoretheme', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%themeidList', response);\n\t\t});\n\t});\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n</body>",
    "typerefinery_code": "<script total>\n\n\texports.id = 'typerefinery_code';\n\texports.name = 'Code';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send(\\'output\\', data); // or simply send(data); which uses the first output\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.throw(e);\n\t\t\t\t\t$.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = [];\n\t\t\tfor (let i = 1; i <= config.outputs; i++)\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i === 1 ? '' : i), name: 'Output #' + i });\n\t\t\tinstance.save();\n\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n\n\tTo send data to the default output use `send(somedata);`\n\tTo send data to specific output when number of outputs > 1 use `$.send('outputX', somedata)` where `X` is output index, see example bellow:\n\t- first output--> `send(somedata)` or `$.send('output', somedata)`\n\t- second output --> `$.send('output2', somedata)`\n\t- ...\n\t- 5th output --> `$.send('output5', somedata)`\n\t- etc.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.outputs__type:number\" class=\"m\">Number of outputs</div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n</body>",
    "typerefinery_senddata": "<script total>\r\n\r\n\texports.id = 'typerefinery_senddata';\r\n\texports.name = 'Send Data';\r\n\texports.icon = 'fa fa-bullhorn';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'Team_Typerefinery';\r\n\texports.version = '3';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, random: true, type: 'object', data: '', restart: false };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tinstance.message = function($) {\r\n\t\t\t$.send('output', instance.getData());\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.getData = function() {\r\n\t\t\tvar val;\r\n\r\n\t\t\tswitch (config.type) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'buffer':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'date':\r\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'json':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : JSON.parse(config.data);\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'boolean':\r\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn val;\r\n\t\t}; \r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.send('output', instance.getData());\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\t.CLASS .largetext { max-height: 100px; overflow-y: auto; }\r\n\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n\r\n\t.CLASS .output { text-align: right }\r\n</style>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,json|Json,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\r\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\r\n\t\t\t<hr />\r\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<readme>\r\nThe component triggers data into the Flow. It can be used for testing purposes or for sending data to other components on input.\r\n</readme>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i> - <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></small></div>\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\r\n\t</div>\r\n\t<footer>\r\n\t\t<div class=\"monospace selectable largetext\" data---=\"objecttree__!CONFIG.data__text__empty\"></div>\r\n\t</footer>\r\n</body>"
  },
  "design": {
    "il7fy4dli": {
      "id": "il7fy4dli",
      "config": {
        "title": "Print JSON",
        "version": "2",
        "repo": false,
        "data": true
      },
      "x": 668.0000305175781,
      "y": 395.00000762939453,
      "component": "c5aria8f8f",
      "connections": {},
      "template": {
        "icon": "fa fa-print",
        "group": "@TypeRefinery",
        "name": "Print JSON",
        "inputs": [
          {
            "id": "input",
            "name": "Input"
          }
        ]
      }
    },
    "il7g116vw": {
      "id": "il7g116vw",
      "config": {
        "title": "Print JSON",
        "version": "2",
        "repo": false,
        "data": true
      },
      "x": 1130.0000305175781,
      "y": 429.00000762939453,
      "component": "c5aria8f8f",
      "connections": {},
      "template": {
        "icon": "fa fa-print",
        "group": "@TypeRefinery",
        "name": "Print JSON",
        "inputs": [
          {
            "id": "input",
            "name": "Input"
          }
        ]
      }
    },
    "il7g1v8q2": {
      "id": "il7g1v8q2",
      "config": {},
      "x": 970.0000305175781,
      "y": 260,
      "component": "subsrcfyn2ecf44Xsvg_insert",
      "connections": {},
      "template": {
        "type": "sub",
        "icon": "fas fa-satellite-dish",
        "group": "Subscribers",
        "name": "TMS Message Service",
        "inputs": [
          {
            "id": "subscribe",
            "name": "Input"
          }
        ]
      }
    },
    "il7g2g5w1": {
      "id": "il7g2g5w1",
      "config": {
        "timeout": 60000
      },
      "x": 1236.0000305175781,
      "y": 151,
      "component": "calsrcfyn2ecf44Xsvg_query",
      "connections": {},
      "template": {
        "type": "call",
        "icon": "fa fa-plug",
        "group": "Calls",
        "name": "TMS Message Service",
        "inputs": [
          {
            "id": "input",
            "name": "Input"
          }
        ],
        "outputs": [
          {
            "id": "output",
            "name": "Output"
          },
          {
            "id": "error",
            "name": "Error"
          }
        ]
      }
    },
    "il7g2g96i": {
      "id": "il7g2g96i",
      "config": {},
      "x": 956,
      "y": 166,
      "component": "pubsrcfyn2ecf44Xsvg_insert",
      "connections": {
        "publish": [
          {
            "id": "il7g2g5w1",
            "index": "input"
          }
        ]
      },
      "template": {
        "type": "pub",
        "icon": "fas fa-broadcast-tower",
        "group": "Publishers",
        "name": "TMS Message Service",
        "outputs": [
          {
            "id": "publish",
            "name": "Output"
          }
        ]
      }
    },
    "iljdd9wiv": {
      "id": "iljdd9wiv",
      "config": {
        "title": "Run (node & edges)",
        "version": "1",
        "algorithm": "from typedb.client import *\nfrom loguru import logger as Logger\nfrom posixpath import basename\nimport json\nimport copy\nimport os\nimport sys\nimport argparse\nfrom datetime import datetime\ngquery = \"match $a isa log, has logName 'L1'; \"\ngquery += \"$b isa event, has eventName $c;\"\ngquery += \" $d (owner: $a, item: $b) isa trace, \"\ngquery += \" has traceId $t, has index $f; offset 0; limit 100;\"#  get; \"\ngroup_raw = [{\n    \"leaves\": [\n                    0\n                ],\n                \"colour_list\": \"Greys\",\n                \"level\": 7,\n                \"label\": \"hidden\"\n}]\n# function to collect all of the data out of the iterator\n# with read transaction object to use asRemote mode\ndef collect_answers(answer_iterator, r_tx, logger: Logger):\n    logger.info(f'into collect answers, iterator -> {answer_iterator}')\n    res = []\n    layers = []\n    layer = []\n    for answer in answer_iterator:\n        dict_answer = answer.map()\n        #logger.info(f'dict answer is {dict_answer}')\n        for key, thing in dict_answer.items():\n            logger.info(f'key, things is {key}, {thing}')\n            # pull entity data\n            if thing.is_entity():\n                ent = {}\n                ent['type'] = 'entity'\n                ent['symbol'] = key\n                ent['G_id'] = thing.get_iid()\n                ent['G_name'] = thing.get_type().get_label().name()\n                logger.info((f'entity name is {ent[\"G_name\"]}'))\n                logger.info((f'thing value is {thing}'))\n                att_obj = thing.as_remote(r_tx).get_has()\n                att = []\n                for a in att_obj:\n                    att.append(a.get_iid())\n                ent['has'] = att\n                res.append(ent)\n                layer.append(ent)\n                logger.info(f'ent -> {ent}')\n            # pull attribute data\n            elif thing.is_attribute():\n                att = {}\n                att['type'] = 'attribute'\n                att['symbol'] = key\n                att['G_id'] = thing.get_iid()\n                att['G_name'] = thing.get_type().get_label().name()\n                att['value'] = thing.get_value()\n                att['datatype'] = thing.get_type().get_value_type().name\n                att_obj = thing.as_remote(r_tx).get_has()\n                attrib = []\n                for a in att_obj:\n                    attrib.append(a.get_iid())\n                att['has'] = attrib\n                res.append(att)\n                layer.append(att)\n                logger.info(f'att -> {att}')\n            # pull relation data\n            elif thing.is_relation():\n                rel = {}\n                rel['type'] = 'relation'\n                rel['symbol'] = key\n                rel['G_id'] = thing.get_iid()\n                rel['G_name'] = thing.get_type().get_label().name()\n                att_obj = thing.as_remote(r_tx).get_has()\n                att = []\n                for a in att_obj:\n                    att.append(a.get_iid())\n                rel['has'] = att\n                links = thing.as_remote(r_tx).get_players_by_role_type()\n                logger.info(f' links are -> {links}')\n                edges = {}\n                for edge_key, edge_thing in links.items():\n                    logger.info(f' edge key is -> {edge_key}')\n                    logger.info(f' edge_thing is -> {list(edge_thing)}')\n                    edges[edge_key.get_label().name()] = [e.get_iid() for e in list(edge_thing)]\n                rel['edges'] = edges\n                res.append(rel)\n                layer.append(rel)\n                logger.info(f'rel -> {rel}')\n            # else log out error condition\n            else:\n                logger.info(f'Error key is {key}, thing is {thing}')\n        layers.append(layer)\n    return res\n# function to filter the links, so that there are none pointing to data not included\ndef filter_links(reduced_at, reduced_en, re):\n    #first build list of all node id's\n    att_list = [e['G_id'] for e in reduced_at]\n    ent_list = [e['G_id'] for e in reduced_en]\n    rel_list = [e['G_id'] for e in re]\n    node_list = att_list + ent_list + rel_list\n    #check each input list to delete those not in node_list\n    for item in reduced_en:\n        for link in item['has']:\n            if link not in node_list:\n                item['has'].remove(link)\n    for item in re:\n        for link in item['has']:\n            if link not in node_list:\n                item['has'].remove(link)\n    return reduced_at, reduced_en, re\n# function to convert the list of results into nodes and edges\ndef convert_res_to_graph(res, logger: Logger):\n    edges = []\n    nodes = []\n    en = [e for e in res if e['type'] == 'entity']\n    at = [e for e in res if e['type'] == 'attribute']\n    re = [e for e in res if e['type'] == 'relation']\n    # remove duplicates from attributes\n    reduced_at = [v for i,v in enumerate(at) if v not in at[i+1:] ]\n    reduced_en = [v for i,v in enumerate(en) if v not in en[i+1:] ]\n    # find number of types\n    G_types = {}\n    G_types['entity'] = list(set([v['G_name'] for v in reduced_en]))\n    G_types['attribute'] = list(set([v['G_name'] for v in reduced_at]))\n    G_types['relation'] = list(set([v['G_name'] for v in re]))\n    #filter out has links due to variables given thing, or attributes not expressed in the original query\n    reduced_at, reduced_en, re = filter_links(reduced_at, reduced_en, re)\n    # build edges list for attributes\n    for e in reduced_en:\n        own = e['has']\n        source = e['G_id']\n        name = 'has'\n        for o in own:\n            edge = {}\n            edge['G_target'] = o\n            edge['role'] = name\n            edge['G_source'] = source\n            edges.append(edge)\n    for a in reduced_at:\n        own = a['has']\n        source = a['G_id']\n        name = 'has'\n        for o in own:\n            edge = {}\n            edge['G_target'] = o\n            edge['role'] = name\n            edge['G_source'] = source\n            edges.append(edge)\n    for r in re:\n        own = r['has']\n        source = r['G_id']\n        name = 'has'\n        for o in own:\n            edge = {}\n            edge['G_target'] = o\n            edge['role'] = name\n            edge['G_source'] = source\n            edges.append(edge)\n    # add edges from relations\n    for r in re:\n        source = r['G_id']\n        edge_dict = r['edges']\n        for k, e in edge_dict.items():\n            edge = {}\n            edge['G_target'] = e[0]\n            edge['role'] = k\n            edge['G_source'] = source\n            edges.append(edge)\n    # add all nodes together\n    nodes = reduced_en + reduced_at + re\n    for node in nodes:\n        node['dtype'] = 'actual'\n    return nodes, edges, G_types\ndef get_node_id(nodes, G_id):\n    for index, element in enumerate(nodes):\n        if element['G_id'] == G_id:\n            return index;\ndef convert_res_to_cola(nodes, edges, G_types, logger: Logger):\n    # convert edges to id\n    for edge in edges:\n        edge['target'] = get_node_id(nodes, edge['G_target'])\n        edge['source'] = get_node_id(nodes, edge['G_source'])\n    for index, element in enumerate(nodes):\n        element['id'] = index\n    # find actual attributes in edges\n    att_list = []\n    for index, node in enumerate(nodes):\n        if node['type'] == 'attribute':\n            att_list.append(index)\n    for edge in edges:\n        edge['is_act_Attr'] = False\n        for att in att_list:\n            if edge['target'] == att or edge['source'] == att:\n                edge['is_act_Attr'] = True\n                break\n    temp_edges = copy.deepcopy(edges)\n    for t_edge in temp_edges:\n        target_node = nodes[t_edge['target']]\n        t_edge['target_name'] = target_node['G_name']\n        source_node = nodes[t_edge['source']]\n        t_edge['source_name'] = source_node['G_name']\n        if t_edge['role'] == 'has' or source_node['type'] == 'relation':\n            t_edge['direction'] = 'down'\n        else:\n            t_edge['direction'] = 'up'\n        t_edge.pop('target')\n        t_edge.pop('source')\n        t_edge.pop('G_target')\n        t_edge.pop('G_source')\n        t_edge.pop('is_act_Attr')\n    myUniqueSet = [dict(s) for s in set(frozenset(myObject.items()) for myObject in temp_edges)]\n    logger.info(f\"myUniqueSet:, {myUniqueSet}\")\n    G_types['schema'] = myUniqueSet\n    logger.info('==========================================================================================')\n    logger.info('+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')\n    logger.info(f'g-types is -> {G_types}')\n    logger.info('==========================================================================================')\n    logger.info('+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')\n    logger.info(f'nodes is ->  {nodes}')\n    logger.info('==========================================================================================')\n    logger.info('+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')\n    logger.info(f'edges is -> {edges}')\n    logger.info('==========================================================================================')\n    logger.info('+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')\n    colaGraph = {}\n    basic = {}\n    basic['nodes'] = nodes\n    basic['links'] = edges\n    basic['G_types'] = G_types\n    basic['groups'] = []\n    basic['constraints'] = []\n    colaGraph['basic'] = basic\n    colaGraph['grouped'] = {}\n    return colaGraph\n@Logger.catch\ndef get_data(dbhost, dbport, dbdatabase, dbquery, logger: Logger):\n    typeDBConnect = f'{dbhost}:{dbport}'\n    with TypeDB.core_client(typeDBConnect) as client:\n        with client.session(dbdatabase, SessionType.DATA) as session:\n            with session.transaction(TransactionType.READ) as read_transaction:\n                answer_iterator = read_transaction.query().match(dbquery)\n                res = collect_answers(answer_iterator, read_transaction, logger)\n                nodes, edges, G_types = convert_res_to_graph(res, logger)\n                colaGraph = convert_res_to_cola(nodes, edges, G_types, logger)\n    ## save file for reference\n    # with open(\"g_to_webcola.json\", \"w\") as outfile:\n    #     json.dump(colaGraph, outfile)\n    return colaGraph\n@Logger.catch\ndef main(dbhost, dbport, dbdatabase, dbquery, outputfile, logger: Logger):\n  # setup logger for execution\n  colaGraph = get_data(dbhost, dbport, dbdatabase, dbquery, logger)\n  basic = colaGraph['basic']\n  with open(outputfile, \"w\") as outfile:\n      json.dump(colaGraph, outfile)\n  logger.info('================ Schema ==================')\n  logger.info(f\"{basic['G_types']}\")",
        "algorithmrequirements": "argparse loguru",
        "endpoint": "http://127.0.0.1:8000/algorithm"
      },
      "x": 440.0000305175781,
      "y": 277,
      "component": "typerefinery_runnodeedges",
      "connections": {
        "output": [
          {
            "id": "il7fy4dli",
            "index": "input"
          },
          {
            "id": "iljddkxge",
            "index": "input"
          },
          {
            "id": "iljdfys1h",
            "index": "graph_data"
          }
        ]
      },
      "template": {
        "icon": "fa fa-code",
        "group": "@TypeRefinery",
        "name": "Run (node & edges)",
        "inputs": [
          {
            "id": "connection",
            "name": "Connection"
          },
          {
            "id": "query",
            "name": "TQL Query"
          }
        ],
        "outputs": [
          {
            "id": "output",
            "name": "Output"
          }
        ]
      }
    },
    "iljddjrao": {
      "id": "iljddjrao",
      "config": {
        "title": "API Datastore Connection",
        "version": "1",
        "endpoint": "http://127.0.0.1:8000/datastore/connection",
        "connectionid": "PROJECT_ID_con"
      },
      "x": 228,
      "y": 52,
      "component": "typerefinery_api_datastore_connection",
      "connections": {
        "output": [
          {
            "id": "iljdd9wiv",
            "index": "connection"
          }
        ]
      },
      "template": {
        "icon": "fa fa-code",
        "group": "@TypeRefinery",
        "name": "API Datastore Connection",
        "inputs": [
          {
            "id": "input",
            "name": "Input"
          }
        ],
        "outputs": [
          {
            "id": "output",
            "name": "Output"
          }
        ]
      }
    },
    "iljddjt9d": {
      "id": "iljddjt9d",
      "config": {
        "title": "API Datastore Query",
        "version": "1",
        "endpoint": "http://127.0.0.1:8000/datastore/query",
        "queryid": "PROJECT_ID_query"
      },
      "x": 218,
      "y": 255.00000762939453,
      "component": "typerefinery_api_datastore_query",
      "connections": {
        "output": [
          {
            "id": "iljdd9wiv",
            "index": "query"
          }
        ]
      },
      "template": {
        "icon": "fa fa-code",
        "group": "@TypeRefinery",
        "name": "API Datastore Query",
        "inputs": [
          {
            "id": "input",
            "name": "Input"
          }
        ],
        "outputs": [
          {
            "id": "output",
            "name": "Output"
          }
        ]
      }
    },
    "iljddkxge": {
      "id": "iljddkxge",
      "config": {
        "title": "API Datastore Theme",
        "version": "1",
        "endpoint": "http://127.0.0.1:8000/datastore/theme",
        "themeid": "PROJECT_ID_theme"
      },
      "x": 629.0000305175781,
      "y": 66,
      "component": "typerefinery_api_datastore_theme",
      "connections": {
        "output": [
          {
            "id": "iljdfys1h",
            "index": "theme"
          }
        ]
      },
      "template": {
        "icon": "fa fa-code",
        "group": "@TypeRefinery",
        "name": "API Datastore Theme",
        "inputs": [
          {
            "id": "input",
            "name": "Input"
          }
        ],
        "outputs": [
          {
            "id": "output",
            "name": "Output"
          }
        ]
      }
    },
    "iljdfys1h": {
      "id": "iljdfys1h",
      "config": {
        "title": "API WebCola Viz",
        "version": "2",
        "endpointcreatesvg": "http://127.0.0.1:8000/createSvg",
        "endpointproject": "http://127.0.0.1:8000/datastore/project",
        "code": "var colors = [\n  {\n    name: \"Greys\",\n    colors: [\n      \"#f0f0f0\",\n      \"#d9d9d9\",\n      \"#bdbdbd\",\n      \"#969696\",\n      \"#737373\",\n      \"#525252\",\n      \"#252525\",\n      \"#000000\",\n    ],\n  },\n  {\n    name: \"Reds\",\n    colors: [\n      \"#fee0d2\",\n      \"#fcbba1\",\n      \"#fc9272\",\n      \"#fb6a4a\",\n      \"#ef3b2c\",\n      \"#cb181d\",\n      \"#a50f15\",\n      \"#67000d\",\n    ],\n  },\n  {\n    name: \"Oranges\",\n    colors: [\n      \"#fee6ce\",\n      \"#fdd0a2\",\n      \"#fdae6b\",\n      \"#fd8d3c\",\n      \"#f16913\",\n      \"#d94801\",\n      \"#a63603\",\n      \"#7f2704\",\n    ],\n  },\n  {\n    name: \"Greens\",\n    colors: [\n      \"#e5f5e0\",\n      \"#c7e9c0\",\n      \"#a1d99b\",\n      \"#74c476\",\n      \"#41ab5d\",\n      \"#238b45\",\n      \"#006d2c\",\n      \"#00441b\",\n    ],\n  },\n  {\n    name: \"Blues\",\n    colors: [\n      \"#deebf7\",\n      \"#c6dbef\",\n      \"#9ecae1\",\n      \"#6baed6\",\n      \"#4292c6\",\n      \"#2171b5\",\n      \"#08519c\",\n      \"#08306b\",\n    ],\n  },\n  {\n    name: \"Purples\",\n    colors: [\n      \"#efedf5\",\n      \"#dadaeb\",\n      \"#bcbddc\",\n      \"#9e9ac8\",\n      \"#807dba\",\n      \"#6a51a3\",\n      \"#54278f\",\n      \"#3f007d\",\n    ],\n  },\n  {\n    name: \"Orange-Red\",\n    colors: [\n      \"#fee8c8\",\n      \"#fdd49e\",\n      \"#fdbb84\",\n      \"#fc8d59\",\n      \"#ef6548\",\n      \"#d7301f\",\n      \"#b30000\",\n      \"#7f0000\",\n    ],\n  },\n  {\n    name: \"Red-Purples\",\n    colors: [\n      \"#fde0dd\",\n      \"#fcc5c0\",\n      \"#fa9fb5\",\n      \"#f768a1\",\n      \"#dd3497\",\n      \"#ae017e\",\n      \"#7a0177\",\n      \"#49006a\",\n    ],\n  },\n  {\n    name: \"Blue-Green\",\n    colors: [\n      \"#e5f5f9\",\n      \"#ccece6\",\n      \"#99d8c9\",\n      \"#66c2a4\",\n      \"#41ae76\",\n      \"#238b45\",\n      \"#006d2c\",\n      \"#00441b\",\n    ],\n  },\n  {\n    name: \"Yellows\",\n    colors: [\n      \"#fffee5\",\n      \"#fffcbd\",\n      \"#fff98b\",\n      \"#fff533\",\n      \"#eedf00\",\n      \"#dad000\",\n      \"#c0b700\",\n      \"#b0a800\",\n    ],\n  },\n];\n\nvar theme = THEME;\n\nvar svg = d3.select(\"svg\")\n  .attr(\"width\", 900)\n  .attr(\"height\", 500)\n  .call(\n    d3.zoom().on(\"zoom\", function () {\n      svg.attr(\"transform\", d3.event.transform);\n    })\n  )\n  .append(\"g\");\n\nconst height = 500;\nconst width = 600;\n\n// setup the theme color\n\nconst textPadding = 8;\nconst corner = 5;\nconst grp_corner = 8;\nconst pad = 5;\nvar ent_colour = \"#03396c\";\nvar ent_t_colour = \"white\";\nvar att_colour = \"#ff4d00\";\nvar att_t_colour = \"white\";\nvar shad_colour = \"#ff4d00\";\nvar shad_t_colour = \"white\";\nvar rel_colour = \"#007777\";\nvar rel_t_colour = \"black\";\n\nlet colours = colors;\n// load the colours from the theme\nent_colour = colors.find((colour) => colour.name == theme.entity.colorlist)[\n  \"colors\"\n][theme.entity.cindex];\nent_t_colour = colors.find((colour) => colour.name == theme.entity.tcolorlist)[\n  \"colors\"\n][theme.entity.tindex];\natt_colour = colors.find((colour) => colour.name == theme.attribute.colorlist)[\n  \"colors\"\n][theme.attribute.cindex];\natt_t_colour = colors.find(\n  (colour) => colour.name == theme.attribute.tcolorlist\n)[\"colors\"][theme.attribute.tindex];\nshad_colour = colors.find((colour) => colour.name == theme.shadow.colorlist)[\n  \"colors\"\n][theme.shadow.cindex];\nshad_t_colour = colors.find((colour) => colour.name == theme.shadow.tcolorlist)[\n  \"colors\"\n][theme.shadow.tindex];\nrel_colour = colors.find((colour) => colour.name == theme.relation.colorlist)[\n  \"colors\"\n][theme.relation.cindex];\nrel_t_colour = colors.find(\n  (colour) => colour.name == theme.relation.tcolorlist\n)[\"colors\"][theme.relation.tindex];\n\nvar cola = cola.d3adaptor(d3).size([width, height]);\n\n// graph.json\nvar Graph_Data = GRAPH_DATA;\n\ndata = Graph_Data.basic;\ncola\n  .nodes(data.nodes)\n  .links(data.links)\n  .groups(data.groups)\n  .linkDistance(100)\n  .avoidOverlaps(true)\n  .handleDisconnected(false)\n  .start(30);\n\nvar group = svg\n  .selectAll(\".group\")\n  .data(data.groups)\n  .enter()\n  .append(\"rect\")\n  .attr(\"rx\", grp_corner)\n  .attr(\"ry\", grp_corner)\n  .attr(\"class\", \"group\")\n  .style(\"fill\", function (d, i) {\n    return colours.find(\n      (colour) => colour.name == d.colour_list\n    )[\"colors\"][d.level];\n  })\n  .attr(\"stroke-width\", 1)\n  .attr(\"stroke\", function (d, i) {\n    return colours.find((colour) => colour.name == d.colour_list)[\"colors\"][7];\n  })\n  .call(cola.drag);\n\ngroup.append(\"title\").text(function (d) {\n  return d.label;\n});\n\nvar link = svg\n  .selectAll(\".link\")\n  .data(data.links)\n  .enter()\n  .append(\"line\")\n  .attr(\"class\", \"link\")\n  .style(\"stroke-width\", \"1px\")\n  .attr(\"stroke\", \"black\");\n\nvar node = svg\n  .selectAll(\".node\")\n  .data(data.nodes)\n  .enter()\n  .append(\"rect\")\n  .attr(\"class\", \"node\")\n  .attr(\"class\", (d) => d.type)\n  .attr(\"class\", (d) => d.G_name)\n  .attr(\"id\", (d) => d.G_id);\n\nvar label = svg\n  .selectAll(\".label\")\n  .data(data.nodes)\n  .enter()\n  .append(\"text\")\n  .attr(\"class\", \"label\")\n  .text((d) =>\n    d.type == \"attribute\" ? d.G_name + \": \" + d.value : d.G_name + \": \" + d.G_id\n  )\n  .attr(\"id\", (d) => \"heading-\" + d.G_id)\n  .style(\"font-size\", 10)\n  .style(\"text-anchor\", \"middle\")\n  .style(\"color\", (d) => text_colour(d))\n  .style(\"fill\", (d) => text_colour(d))\n  .style(\"pointer-events\", \"none\")\n  .call(cola.drag);\n\n// setup heading colours for attribute, entity and relation\nfunction text_colour(d) {\n  let colour = \"black\";\n  switch (d.type) {\n    case \"attribute\":\n      if (d.dtype == \"actual\") {\n        colour = att_t_colour;\n      } else {\n        colour = shad_t_colour;\n      }\n      break;\n    case \"entity\":\n      colour = ent_t_colour;\n      break;\n    case \"relation\":\n      colour = rel_t_colour;\n      break;\n    default:\n      colour = \"black\";\n      break;\n  }\n  return colour;\n}\n\nnode\n  .attr(\"width\", (d) => nodeWidth(d))\n  .attr(\"height\", (d) => d.height)\n  .attr(\"rx\", (d) => d.corner)\n  .attr(\"ry\", (d) => d.corner)\n  .attr(\"x\", (d) => d.x)\n  .attr(\"y\", (d) => d.y)\n  .attr(\"class\", (d) => d.G_name)\n  .style(\"fill\", (d) => d.colour)\n  .on(\"click\", function (d) {\n    d.fixed = true;\n  })\n  .call(cola.drag);\n\n// function to set dimensions and colours for shapes\nfunction nodeWidth(d) {\n  let headingid = \"#heading-\" + d.G_id;\n  let headingbbox = d3.select(headingid).node().getBBox();\n\n  d.width = d3.max([5, headingbbox.width]) + textPadding * 2;\n  d.height = headingbbox.height + textPadding * 2;\n\n  // attributes and entities rounded rectangle, relation is circle\n  switch (d.type) {\n    case \"attribute\":\n      d.corner = corner;\n      d.colour = att_colour;\n      d.x = headingbbox.x - textPadding;\n      d.y = headingbbox.y - textPadding;\n      if (d.dtype === \"shadow\") {\n        d.colour = shad_colour;\n      } else {\n        d.colour = att_colour;\n      }\n      break;\n\n    case \"entity\":\n      d.corner = corner;\n      d.colour = ent_colour;\n      d.x = headingbbox.x - textPadding;\n      d.y = headingbbox.y - textPadding;\n      break;\n\n    case \"relation\":\n      d.width = 16;\n      d.height = 16;\n      d.corner = 8;\n      d.colour = rel_colour;\n      d.x = headingbbox.x + headingbbox.width / 2 - d.width / 2;\n      d.y = headingbbox.y + d.height / 2;\n      break;\n\n    default:\n      break;\n  }\n  return d.width;\n}\n\ncola.on(\"tick\", function () {\n  link\n    .attr(\"x1\", function (d) {\n      return d.source.x;\n    })\n    .attr(\"y1\", function (d) {\n      return d.source.y;\n    })\n    .attr(\"x2\", function (d) {\n      return d.target.x;\n    })\n    .attr(\"y2\", function (d) {\n      return d.target.y;\n    });\n\n  node\n    .attr(\"x\", function (d) {\n      return d.x - d.width / 2;\n    })\n    .attr(\"y\", function (d) {\n      return d.y - d.height / 2;\n    });\n\n  group\n    .attr(\"x\", function (d) {\n      return d.bounds.x - pad;\n    })\n    .attr(\"y\", function (d) {\n      return d.bounds.y - pad;\n    })\n    .attr(\"width\", function (d) {\n      return d.bounds.width() + 2 * pad;\n    })\n    .attr(\"height\", function (d) {\n      return d.bounds.height() + 2 * pad;\n    });\n\n  label\n    .attr(\"x\", function (d) {\n      return d.x;\n    })\n    .attr(\"y\", function (d) {\n      var h = this.getBBox().height;\n      return d.y + h / 4;\n    });\n});"
      },
      "x": 743.0000305175781,
      "y": 250.00000762939453,
      "component": "typerefinery_api_createsvg_webcolaviz",
      "connections": {
        "output": [
          {
            "id": "il7g1v8q2",
            "index": "subscribe"
          },
          {
            "id": "il7g116vw",
            "index": "input"
          }
        ]
      },
      "template": {
        "icon": "fa fa-code",
        "group": "@TypeRefinery",
        "name": "API WebCola Viz",
        "inputs": [
          {
            "id": "graph_data",
            "name": "DATA"
          },
          {
            "id": "theme",
            "name": "Theme"
          }
        ],
        "outputs": [
          {
            "id": "output",
            "name": "Output"
          }
        ]
      }
    },
    "iljdg6eym": {
      "id": "iljdg6eym",
      "config": {
        "title": "Send Data",
        "version": "3",
        "random": true,
        "type": "object",
        "data": "",
        "restart": false
      },
      "x": 15,
      "y": 106.00000762939453,
      "component": "typerefinery_senddata",
      "connections": {
        "output": [
          {
            "id": "iljddjt9d",
            "index": "input"
          },
          {
            "id": "iljddjrao",
            "index": "input"
          }
        ]
      },
      "template": {
        "icon": "fa fa-bullhorn",
        "group": "@TypeRefinery",
        "name": "Send Data",
        "inputs": [
          {
            "id": "input",
            "name": "Input"
          }
        ],
        "outputs": [
          {
            "id": "output",
            "name": "Output"
          }
        ]
      }
    }
  },
  "variables": {},
  "sources": {
    "srcfyn2ecf44": {
      "token": "",
      "url": "http://127.0.0.1:8112/$tms/",
      "id": "srcfyn2ecf44",
      "meta": {
        "type": "meta",
        "name": "TMS Message Service",
        "subscribe": [
          {
            "id": "svg_insert",
            "schema": {
              "$id": "https://schemas.totaljs.com/Svg.json",
              "$schema": "https://json-schema.org/draft/2020-12/schema",
              "type": "object",
              "properties": {
                "stepId": {
                  "type": "string"
                },
                "flowId": {
                  "type": "string"
                },
                "stepName": {
                  "type": "string"
                },
                "path": {
                  "type": "string"
                },
                "projectId": {
                  "type": "string"
                },
                "id": {
                  "type": "string"
                },
                "dtcreated": {
                  "type": "date"
                },
                "dtupdated": {
                  "type": "date"
                }
              }
            }
          },
          {
            "id": "payload_insert",
            "schema": {
              "$id": "https://schemas.totaljs.com/Payload.json",
              "$schema": "https://json-schema.org/draft/2020-12/schema",
              "type": "object",
              "properties": {
                "payload": {
                  "type": "string"
                },
                "topic": {
                  "type": "string"
                },
                "id": {
                  "type": "string"
                },
                "dtcreated": {
                  "type": "date"
                },
                "dtupdated": {
                  "type": "date"
                }
              }
            }
          },
          {
            "id": "payload_update",
            "schema": {
              "$id": "https://schemas.totaljs.com/Payload.json",
              "$schema": "https://json-schema.org/draft/2020-12/schema",
              "type": "object",
              "properties": {
                "payload": {
                  "type": "string"
                },
                "topic": {
                  "type": "string"
                },
                "id": {
                  "type": "string"
                },
                "dtcreated": {
                  "type": "date"
                },
                "dtupdated": {
                  "type": "date"
                }
              }
            }
          },
          {
            "id": "payload_remove",
            "schema": {
              "$id": "https://schemas.totaljs.com/Payload.json",
              "$schema": "https://json-schema.org/draft/2020-12/schema",
              "type": "object",
              "properties": {
                "payload": {
                  "type": "string"
                },
                "topic": {
                  "type": "string"
                },
                "id": {
                  "type": "string"
                },
                "dtcreated": {
                  "type": "date"
                },
                "dtupdated": {
                  "type": "date"
                }
              }
            }
          }
        ],
        "publish": [
          {
            "id": "svg_insert",
            "schema": {
              "$id": "https://schemas.totaljs.com/Svg.json",
              "$schema": "https://json-schema.org/draft/2020-12/schema",
              "type": "object",
              "properties": {
                "stepId": {
                  "type": "string",
                  "$$ID": "stepId",
                  "$$REQUIRED": false
                },
                "flowId": {
                  "type": "string",
                  "$$ID": "flowId",
                  "$$REQUIRED": false
                },
                "stepName": {
                  "type": "string",
                  "$$ID": "stepName",
                  "$$REQUIRED": false
                },
                "path": {
                  "type": "string",
                  "$$ID": "path",
                  "$$REQUIRED": false
                },
                "projectId": {
                  "type": "string",
                  "$$ID": "projectId",
                  "$$REQUIRED": false
                },
                "id": {
                  "type": "string",
                  "$$ID": "id",
                  "$$REQUIRED": false
                },
                "dtcreated": {
                  "type": "date",
                  "$$ID": "dtcreated",
                  "$$REQUIRED": false
                },
                "dtupdated": {
                  "type": "date",
                  "$$ID": "dtupdated",
                  "$$REQUIRED": false
                }
              }
            }
          },
          {
            "id": "payload_insert",
            "schema": {
              "$id": "https://schemas.totaljs.com/Payload.json",
              "$schema": "https://json-schema.org/draft/2020-12/schema",
              "type": "object",
              "properties": {
                "payload": {
                  "type": "string"
                },
                "topic": {
                  "type": "string"
                },
                "id": {
                  "type": "string"
                },
                "dtcreated": {
                  "type": "date"
                },
                "dtupdated": {
                  "type": "date"
                }
              }
            }
          }
        ],
        "subscribers": [
          "svg_insert",
          "payload_insert",
          "payload_update",
          "payload_remove"
        ],
        "call": [
          {
            "id": "svg_query",
            "schema": {
              "$id": "https://schemas.totaljs.com/Svg.json",
              "$schema": "https://json-schema.org/draft/2020-12/schema",
              "type": "object",
              "properties": {
                "stepId": {
                  "type": "string"
                },
                "flowId": {
                  "type": "string"
                },
                "stepName": {
                  "type": "string"
                },
                "path": {
                  "type": "string"
                },
                "projectId": {
                  "type": "string"
                },
                "id": {
                  "type": "string"
                },
                "dtcreated": {
                  "type": "date"
                },
                "dtupdated": {
                  "type": "date"
                }
              }
            }
          },
          {
            "id": "payload_query",
            "schema": {
              "$id": "https://schemas.totaljs.com/Payload.json",
              "$schema": "https://json-schema.org/draft/2020-12/schema",
              "type": "object",
              "properties": {
                "payload": {
                  "type": "string"
                },
                "topic": {
                  "type": "string"
                },
                "id": {
                  "type": "string"
                },
                "dtcreated": {
                  "type": "date"
                },
                "dtupdated": {
                  "type": "date"
                }
              }
            }
          }
        ]
      },
      "checksum": "38995619161",
      "restart": false,
      "error": 0,
      "init": true,
      "online": true,
      "dtupdated": "2022-09-09T05:34:41.628Z"
    }
  },
  "proxypath": "",
  "dtcreated": "2023-06-16T06:48:30.075Z"
}
