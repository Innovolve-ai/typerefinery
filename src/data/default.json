{
  "AppSettings": {
    "language": "en",
    "theme": "light",
    "focus": false,
    "viewResized": true,
    "settingsDialogVisible": false,
    "settingPath": null,
    "settings": [
      {
        "id": "general",
        "label": "General",
        "icon": "pi pi-cog"
      },
      {
        "id": "profile",
        "label": "Profile",
        "icon": "pi pi-user"
      },
      {
        "id": "privacy",
        "label": "Privacy",
        "icon": "pi pi-lock"
      },
      {
        "id": "services",
        "label": "Services",
        "icon": "pi pi-cog"
      }
    ],
    "experimentalFeatures": [
      {
        "id": "chat",
        "label": "Chat",
        "enabled": false
      },
      {
        "id": "editor",
        "label": "Editor",
        "enabled": false
      }
    ]
  },
  "Services": {
    "services": [],
    "serviceStatusEnum": {
      "0": {
        "name": "disabled",
        "color": "gray"
      },
      "10": {
        "name": "available",
        "color": "gray"
      },
      "15": {
        "name": "installing",
        "color": "gray"
      },
      "20": {
        "name": "installed",
        "color": "gray"
      },
      "30": {
        "name": "stopping",
        "color": "blue"
      },
      "60": {
        "name": "stopped",
        "color": "purple"
      },
      "90": {
        "name": "starting",
        "color": "yellow"
      },
      "120": {
        "name": "started",
        "color": "green"
      },
      "-10": {
        "name": "invalidconfig",
        "color": "red"
      },
      "-1": {
        "name": "error",
        "color": "red"
      }
    },
    "serviceTypeEnum": {
      "10": {
        "name": "local",
        "icon": "pi pi-cog"
      },
      "20": {
        "name": "online",
        "icon": "pi pi-globe"
      }
    }
  },
  "AppData": {
    "list": [
      {
        "type": "projects",
        "label": "Projects",
        "icon": "",
        "expanded": false,
        "list": [
          {
            "type": "project",
            "id": "project1",
            "label": "Project 1",
            "description": "",
            "icon": "",
            "expanded": false,
            "connections": {
              "type": "connections",
              "icon": "",
              "expanded": true,
              "list": [
                {
                  "type": "connection",
                  "id": "connection1",
                  "label": "connection 1",
                  "icon": "connection",
                  "description": "",
                  "port": "",
                  "host": ""
                }
              ]
            },
            "queries": {
              "type": "queries",
              "icon": "",
              "expanded": true,
              "list": [
                {
                  "type": "query",
                  "id": "query1",
                  "label": "query 1",
                  "icon": "query",
                  "description": "sample query",
                  "database": "typerefinery",
                  "query": "match $a isa log, has logName 'L1';\n$b isa event, has eventName $c;\n$d (owner: $a, item: $b) isa trace,\nhas traceId $e, has index $f;\n offset 0; limit 100;",
                  "dataPath": "services/fastapi/algorithm/req-1656770367.081393.82713.py.output",
                  "connection": "connection1",
                  "transformer": {
                    "type": "transformer",
                    "id": "transformer1",
                    "label": "transformer 1",
                    "icon": "transformer",
                    "scope": "local",
                    "description": "",
                    "code": "var svg = d3.select(wrapper).append(\"svg\"),\n\t\t\t\twidth = +svg.attr(\"width\") || 960,\n\t\t\t\theight = +svg.attr(\"height\") || 500\n\t\t\t  svg.attr(\"width\", width).attr(\"height\", height)\n\t\t\t  var color = d3.scaleOrdinal(d3.schemeCategory20)\n\t\t\t  var simulation = d3\n\t\t\t\t.forceSimulation()\n\t\t\t\t.force(\n\t\t\t\t  \"link\",\n\t\t\t\t  d3.forceLink().id(function (d) {\n\t\t\t\t\treturn d.label\n\t\t\t\t  })\n\t\t\t\t)\n\t\t\t\t.force(\"charge\", d3.forceManyBody())\n\t\t\t\t.force(\"center\", d3.forceCenter(width / 2, height / 2))\n\t\t\t  d3.json(\n\t\t\t\t\"/src/components/Transformer/D3/miserables.json\",\n\t\t\t\tfunction (error, graph) {\n\t\t\t\t  if (error) throw error\n\t\t\t\t  var link = svg\n\t\t\t\t\t.append(\"g\")\n\t\t\t\t\t.attr(\"class\", \"links\")\n\t\t\t\t\t.selectAll(\"line\")\n\t\t\t\t\t.data(graph.links)\n\t\t\t\t\t.enter()\n\t\t\t\t\t.append(\"line\")\n\t\t\t\t\t.attr(\"stroke-width\", function (d) {\n\t\t\t\t\t  return Math.sqrt(d.value)\n\t\t\t\t\t})\n\t\t\t\t\t.attr(\"stroke\", \"#999\")\n\t\t\t\t  var node = svg\n\t\t\t\t\t.append(\"g\")\n\t\t\t\t\t.attr(\"class\", \"nodes\")\n\t\t\t\t\t.selectAll(\"circle\")\n\t\t\t\t\t.data(graph.nodes)\n\t\t\t\t\t.enter()\n\t\t\t\t\t.append(\"circle\")\n\t\t\t\t\t.attr(\"r\", 5)\n\t\t\t\t\t.attr(\"fill\", function (d) {\n\t\t\t\t\t  return color(d.group)\n\t\t\t\t\t})\n\t\t\t\t\t.call(\n\t\t\t\t\t  d3\n\t\t\t\t\t\t.drag()\n\t\t\t\t\t\t.on(\"start\", dragstarted)\n\t\t\t\t\t\t.on(\"drag\", dragged)\n\t\t\t\t\t\t.on(\"end\", dragended)\n\t\t\t\t\t)\n\t\t\t\t  node.append(\"title\").text(function (d) {\n\t\t\t\t\treturn d.label\n\t\t\t\t  })\n\t\t\t\t  node.on(\"click\", (e) => {\n\t\t\t\t\tself.nodeData = {\n\t\t\t\t\t  label: e.label,\n\t\t\t\t\t  index: e.index,\n\t\t\t\t\t}\n\t\t\t\t  })\n\t\t\t\t  simulation.nodes(graph.nodes).on(\"tick\", ticked)\n\t\t\t\t  simulation.force(\"link\").links(graph.links)\n\t\t\t\t  function ticked() {\n\t\t\t\t\tlink\n\t\t\t\t\t  .attr(\"x1\", function (d) {\n\t\t\t\t\t\treturn d.source.x\n\t\t\t\t\t  })\n\t\t\t\t\t  .attr(\"y1\", function (d) {\n\t\t\t\t\t\treturn d.source.y\n\t\t\t\t\t  })\n\t\t\t\t\t  .attr(\"x2\", function (d) {\n\t\t\t\t\t\treturn d.target.x\n\t\t\t\t\t  })\n\t\t\t\t\t  .attr(\"y2\", function (d) {\n\t\t\t\t\t\treturn d.target.y\n\t\t\t\t\t  })\n\t\t\t\t\tnode\n\t\t\t\t\t  .attr(\"cx\", function (d) {\n\t\t\t\t\t\treturn d.x\n\t\t\t\t\t  })\n\t\t\t\t\t  .attr(\"cy\", function (d) {\n\t\t\t\t\t\treturn d.y\n\t\t\t\t\t  })\n\t\t\t\t  }\n\t\t\t\t}\n\t\t\t  )\n\t\t\t  function dragstarted(d) {\n\t\t\t\tif (!d3.event.active) simulation.alphaTarget(0.3).restart()\n\t\t\t\td.fx = d.x\n\t\t\t\td.fy = d.y\n\t\t\t  }\n\t\t\t  function dragged(d) {\n\t\t\t\td.fx = d3.event.x\n\t\t\t\td.fy = d3.event.y\n\t\t\t  }\n\t\t\t  function dragended(d) {\n\t\t\t\tif (!d3.event.active) simulation.alphaTarget(0)\n\t\t\t\td.fx = null\n\t\t\t\td.fy = null\n\t\t\t  }",
                    "error": "",
                    "logs": []
                  },
                  "algorithm": {
                    "type": "algorithm",
                    "id": "algorithm1",
                    "label": "algorithm 1",
                    "icon": "algorithm",
                    "scope": "local",
                    "description": "",
                    "code": "from typedb.client import *\nfrom loguru import logger as Logger\nfrom posixpath import basename\nimport json\nimport copy\nimport os\nimport sys\nimport argparse\nfrom datetime import datetime\ngquery = \"match $a isa log, has logName 'L1'; \"\ngquery += \"$b isa event, has eventName $c;\"\ngquery += \" $d (owner: $a, item: $b) isa trace, \"\ngquery += \" has traceId $t, has index $f; offset 0; limit 100;\"#  get; \"\ngroup_raw = [{\n    \"leaves\": [\n                    0\n                ],\n                \"colour_list\": \"Greys\",\n                \"level\": 7,\n                \"label\": \"hidden\"\n}]\n# function to collect all of the data out of the iterator\n# with read transaction object to use asRemote mode\ndef collect_answers(answer_iterator, r_tx, logger: Logger):\n    logger.info(f'into collect answers, iterator -> {answer_iterator}')\n    res = []\n    layers = []\n    layer = []\n    for answer in answer_iterator:\n        dict_answer = answer.map()\n        #logger.info(f'dict answer is {dict_answer}')\n        for key, thing in dict_answer.items():\n            logger.info(f'key, things is {key}, {thing}')\n            # pull entity data\n            if thing.is_entity():\n                ent = {}\n                ent['type'] = 'entity'\n                ent['symbol'] = key\n                ent['G_id'] = thing.get_iid()\n                ent['G_name'] = thing.get_type().get_label().name()\n                logger.info((f'entity name is {ent[\"G_name\"]}'))\n                logger.info((f'thing value is {thing}'))\n                att_obj = thing.as_remote(r_tx).get_has()\n                att = []\n                for a in att_obj:\n                    att.append(a.get_iid())\n                ent['has'] = att\n                res.append(ent)\n                layer.append(ent)\n                logger.info(f'ent -> {ent}')\n            # pull attribute data\n            elif thing.is_attribute():\n                att = {}\n                att['type'] = 'attribute'\n                att['symbol'] = key\n                att['G_id'] = thing.get_iid()\n                att['G_name'] = thing.get_type().get_label().name()\n                att['value'] = thing.get_value()\n                att['datatype'] = thing.get_type().get_value_type().name\n                att_obj = thing.as_remote(r_tx).get_has()\n                attrib = []\n                for a in att_obj:\n                    attrib.append(a.get_iid())\n                att['has'] = attrib\n                res.append(att)\n                layer.append(att)\n                logger.info(f'att -> {att}')\n            # pull relation data\n            elif thing.is_relation():\n                rel = {}\n                rel['type'] = 'relation'\n                rel['symbol'] = key\n                rel['G_id'] = thing.get_iid()\n                rel['G_name'] = thing.get_type().get_label().name()\n                att_obj = thing.as_remote(r_tx).get_has()\n                att = []\n                for a in att_obj:\n                    att.append(a.get_iid())\n                rel['has'] = att\n                links = thing.as_remote(r_tx).get_players_by_role_type()\n                logger.info(f' links are -> {links}')\n                edges = {}\n                for edge_key, edge_thing in links.items():\n                    logger.info(f' edge key is -> {edge_key}')\n                    logger.info(f' edge_thing is -> {list(edge_thing)}')\n                    edges[edge_key.get_label().name()] = [e.get_iid() for e in list(edge_thing)]\n                rel['edges'] = edges\n                res.append(rel)\n                layer.append(rel)\n                logger.info(f'rel -> {rel}')\n            # else log out error condition\n            else:\n                logger.info(f'Error key is {key}, thing is {thing}')\n        layers.append(layer)\n    return res\n# function to filter the links, so that there are none pointing to data not included\ndef filter_links(reduced_at, reduced_en, re):\n    #first build list of all node id's\n    att_list = [e['G_id'] for e in reduced_at]\n    ent_list = [e['G_id'] for e in reduced_en]\n    rel_list = [e['G_id'] for e in re]\n    node_list = att_list + ent_list + rel_list\n    #check each input list to delete those not in node_list\n    for item in reduced_en:\n        for link in item['has']:\n            if link not in node_list:\n                item['has'].remove(link)\n    for item in re:\n        for link in item['has']:\n            if link not in node_list:\n                item['has'].remove(link)\n    return reduced_at, reduced_en, re\n# function to convert the list of results into nodes and edges\ndef convert_res_to_graph(res, logger: Logger):\n    edges = []\n    nodes = []\n    en = [e for e in res if e['type'] == 'entity']\n    at = [e for e in res if e['type'] == 'attribute']\n    re = [e for e in res if e['type'] == 'relation']\n    # remove duplicates from attributes\n    reduced_at = [v for i,v in enumerate(at) if v not in at[i+1:] ]\n    reduced_en = [v for i,v in enumerate(en) if v not in en[i+1:] ]\n    # find number of types\n    G_types = {}\n    G_types['entity'] = list(set([v['G_name'] for v in reduced_en]))\n    G_types['attribute'] = list(set([v['G_name'] for v in reduced_at]))\n    G_types['relation'] = list(set([v['G_name'] for v in re]))\n    #filter out has links due to variables given thing, or attributes not expressed in the original query\n    reduced_at, reduced_en, re = filter_links(reduced_at, reduced_en, re)\n    # build edges list for attributes\n    for e in reduced_en:\n        own = e['has']\n        source = e['G_id']\n        name = 'has'\n        for o in own:\n            edge = {}\n            edge['G_target'] = o\n            edge['role'] = name\n            edge['G_source'] = source\n            edges.append(edge)\n    for a in reduced_at:\n        own = a['has']\n        source = a['G_id']\n        name = 'has'\n        for o in own:\n            edge = {}\n            edge['G_target'] = o\n            edge['role'] = name\n            edge['G_source'] = source\n            edges.append(edge)\n    for r in re:\n        own = r['has']\n        source = r['G_id']\n        name = 'has'\n        for o in own:\n            edge = {}\n            edge['G_target'] = o\n            edge['role'] = name\n            edge['G_source'] = source\n            edges.append(edge)\n    # add edges from relations\n    for r in re:\n        source = r['G_id']\n        edge_dict = r['edges']\n        for k, e in edge_dict.items():\n            edge = {}\n            edge['G_target'] = e[0]\n            edge['role'] = k\n            edge['G_source'] = source\n            edges.append(edge)\n    # add all nodes together\n    nodes = reduced_en + reduced_at + re\n    for node in nodes:\n        node['dtype'] = 'actual'\n    return nodes, edges, G_types\ndef get_node_id(nodes, G_id):\n    for index, element in enumerate(nodes):\n        if element['G_id'] == G_id:\n            return index;\ndef convert_res_to_cola(nodes, edges, G_types, logger: Logger):\n    # convert edges to id\n    for edge in edges:\n        edge['target'] = get_node_id(nodes, edge['G_target'])\n        edge['source'] = get_node_id(nodes, edge['G_source'])\n    for index, element in enumerate(nodes):\n        element['id'] = index\n    # find actual attributes in edges\n    att_list = []\n    for index, node in enumerate(nodes):\n        if node['type'] == 'attribute':\n            att_list.append(index)\n    for edge in edges:\n        edge['is_act_Attr'] = False\n        for att in att_list:\n            if edge['target'] == att or edge['source'] == att:\n                edge['is_act_Attr'] = True\n                break\n    temp_edges = copy.deepcopy(edges)\n    for t_edge in temp_edges:\n        target_node = nodes[t_edge['target']]\n        t_edge['target_name'] = target_node['G_name']\n        source_node = nodes[t_edge['source']]\n        t_edge['source_name'] = source_node['G_name']\n        if t_edge['role'] == 'has' or source_node['type'] == 'relation':\n            t_edge['direction'] = 'down'\n        else:\n            t_edge['direction'] = 'up'\n        t_edge.pop('target')\n        t_edge.pop('source')\n        t_edge.pop('G_target')\n        t_edge.pop('G_source')\n        t_edge.pop('is_act_Attr')\n    myUniqueSet = [dict(s) for s in set(frozenset(myObject.items()) for myObject in temp_edges)]\n    logger.info(f\"myUniqueSet:, {myUniqueSet}\")\n    G_types['schema'] = myUniqueSet\n    logger.info('==========================================================================================')\n    logger.info('+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')\n    logger.info(f'g-types is -> {G_types}')\n    logger.info('==========================================================================================')\n    logger.info('+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')\n    logger.info(f'nodes is ->  {nodes}')\n    logger.info('==========================================================================================')\n    logger.info('+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')\n    logger.info(f'edges is -> {edges}')\n    logger.info('==========================================================================================')\n    logger.info('+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')\n    colaGraph = {}\n    basic = {}\n    basic['nodes'] = nodes\n    basic['links'] = edges\n    basic['G_types'] = G_types\n    basic['groups'] = []\n    basic['constraints'] = []\n    colaGraph['basic'] = basic\n    colaGraph['grouped'] = {}\n    return colaGraph\n@Logger.catch\ndef get_data(dbhost, dbport, dbdatabase, dbquery, logger: Logger):\n    typeDBConnect = f'{dbhost}:{dbport}'\n    with TypeDB.core_client(typeDBConnect) as client:\n        with client.session(dbdatabase, SessionType.DATA) as session:\n            with session.transaction(TransactionType.READ) as read_transaction:\n                answer_iterator = read_transaction.query().match(dbquery)\n                res = collect_answers(answer_iterator, read_transaction, logger)\n                nodes, edges, G_types = convert_res_to_graph(res, logger)\n                colaGraph = convert_res_to_cola(nodes, edges, G_types, logger)\n    ## save file for reference\n    # with open(\"g_to_webcola.json\", \"w\") as outfile:\n    #     json.dump(colaGraph, outfile)\n    return colaGraph\n@Logger.catch\ndef main(dbhost, dbport, dbdatabase, dbquery, outputfile, logger: Logger):\n  # setup logger for execution\n  colaGraph = get_data(dbhost, dbport, dbdatabase, dbquery, logger)\n  basic = colaGraph['basic']\n  with open(outputfile, \"w\") as outfile:\n      json.dump(colaGraph, outfile)\n  logger.info('================ Schema ==================')\n  logger.info(f\"{basic['G_types']}\")\n",
                    "error": "",
                    "logs": [""]
                  }
                },
                {
                  "type": "query",
                  "id": "query2",
                  "label": "query 2",
                  "icon": "query",
                  "description": "sample query",
                  "query": "match $a isa log, has logName 'L1';\n$b isa event, has eventName $c;\n$d (owner: $a, item: $b) isa trace,\nhas traceId $e, has index $f;\n offset 0; limit 100;",
                  "dataPath": "",
                  "connection": "connection1",
                  "transformer": {
                    "type": "transformer",
                    "id": "transformer2",
                    "label": "transformer 2",
                    "icon": "transformer",
                    "scope": "local",
                    "description": "",
                    "code": "",
                    "error": "",
                    "logs": []
                  },
                  "algorithm": {
                    "type": "algorithm",
                    "id": "algorithm1",
                    "label": "algorithm 1",
                    "icon": "algorithm",
                    "scope": "local",
                    "description": "",
                    "code": "",
                    "error": "",
                    "logs": [""]
                  }
                }
              ]
            },
            "transformers": {
              "type": "tranformers",
              "icon": "",
              "expanded": true,
              "list": [
                {
                  "type": "transformer",
                  "id": "transformer1",
                  "label": "transformer 1",
                  "icon": "transformer",
                  "scope": "local",
                  "description": "",
                  "code": "var svg = d3.select(wrapper).append(\"svg\"),\n\t\t\t\twidth = +svg.attr(\"width\") || 960,\n\t\t\t\theight = +svg.attr(\"height\") || 500\n\t\t\t  svg.attr(\"width\", width).attr(\"height\", height)\n\t\t\t  var color = d3.scaleOrdinal(d3.schemeCategory20)\n\t\t\t  var simulation = d3\n\t\t\t\t.forceSimulation()\n\t\t\t\t.force(\n\t\t\t\t  \"link\",\n\t\t\t\t  d3.forceLink().id(function (d) {\n\t\t\t\t\treturn d.label\n\t\t\t\t  })\n\t\t\t\t)\n\t\t\t\t.force(\"charge\", d3.forceManyBody())\n\t\t\t\t.force(\"center\", d3.forceCenter(width / 2, height / 2))\n\t\t\t  d3.json(\n\t\t\t\t\"/src/components/Transformer/D3/miserables.json\",\n\t\t\t\tfunction (error, graph) {\n\t\t\t\t  if (error) throw error\n\t\t\t\t  var link = svg\n\t\t\t\t\t.append(\"g\")\n\t\t\t\t\t.attr(\"class\", \"links\")\n\t\t\t\t\t.selectAll(\"line\")\n\t\t\t\t\t.data(graph.links)\n\t\t\t\t\t.enter()\n\t\t\t\t\t.append(\"line\")\n\t\t\t\t\t.attr(\"stroke-width\", function (d) {\n\t\t\t\t\t  return Math.sqrt(d.value)\n\t\t\t\t\t})\n\t\t\t\t\t.attr(\"stroke\", \"#999\")\n\t\t\t\t  var node = svg\n\t\t\t\t\t.append(\"g\")\n\t\t\t\t\t.attr(\"class\", \"nodes\")\n\t\t\t\t\t.selectAll(\"circle\")\n\t\t\t\t\t.data(graph.nodes)\n\t\t\t\t\t.enter()\n\t\t\t\t\t.append(\"circle\")\n\t\t\t\t\t.attr(\"r\", 5)\n\t\t\t\t\t.attr(\"fill\", function (d) {\n\t\t\t\t\t  return color(d.group)\n\t\t\t\t\t})\n\t\t\t\t\t.call(\n\t\t\t\t\t  d3\n\t\t\t\t\t\t.drag()\n\t\t\t\t\t\t.on(\"start\", dragstarted)\n\t\t\t\t\t\t.on(\"drag\", dragged)\n\t\t\t\t\t\t.on(\"end\", dragended)\n\t\t\t\t\t)\n\t\t\t\t  node.append(\"title\").text(function (d) {\n\t\t\t\t\treturn d.label\n\t\t\t\t  })\n\t\t\t\t  node.on(\"click\", (e) => {\n\t\t\t\t\tself.nodeData = {\n\t\t\t\t\t  label: e.label,\n\t\t\t\t\t  index: e.index,\n\t\t\t\t\t}\n\t\t\t\t  })\n\t\t\t\t  simulation.nodes(graph.nodes).on(\"tick\", ticked)\n\t\t\t\t  simulation.force(\"link\").links(graph.links)\n\t\t\t\t  function ticked() {\n\t\t\t\t\tlink\n\t\t\t\t\t  .attr(\"x1\", function (d) {\n\t\t\t\t\t\treturn d.source.x\n\t\t\t\t\t  })\n\t\t\t\t\t  .attr(\"y1\", function (d) {\n\t\t\t\t\t\treturn d.source.y\n\t\t\t\t\t  })\n\t\t\t\t\t  .attr(\"x2\", function (d) {\n\t\t\t\t\t\treturn d.target.x\n\t\t\t\t\t  })\n\t\t\t\t\t  .attr(\"y2\", function (d) {\n\t\t\t\t\t\treturn d.target.y\n\t\t\t\t\t  })\n\t\t\t\t\tnode\n\t\t\t\t\t  .attr(\"cx\", function (d) {\n\t\t\t\t\t\treturn d.x\n\t\t\t\t\t  })\n\t\t\t\t\t  .attr(\"cy\", function (d) {\n\t\t\t\t\t\treturn d.y\n\t\t\t\t\t  })\n\t\t\t\t  }\n\t\t\t\t}\n\t\t\t  )\n\t\t\t  function dragstarted(d) {\n\t\t\t\tif (!d3.event.active) simulation.alphaTarget(0.3).restart()\n\t\t\t\td.fx = d.x\n\t\t\t\td.fy = d.y\n\t\t\t  }\n\t\t\t  function dragged(d) {\n\t\t\t\td.fx = d3.event.x\n\t\t\t\td.fy = d3.event.y\n\t\t\t  }\n\t\t\t  function dragended(d) {\n\t\t\t\tif (!d3.event.active) simulation.alphaTarget(0)\n\t\t\t\td.fx = null\n\t\t\t\td.fy = null\n\t\t\t  }",
                  "error": "",
                  "logs": [""]
                },
                {
                  "type": "transformer",
                  "id": "transformer2",
                  "label": "transformer 2",
                  "icon": "transformer",
                  "scope": "local",
                  "description": "",
                  "code": "",
                  "error": "",
                  "logs": [""]
                }
              ]
            },
            "algorithms": {
              "type": "algorithms",
              "icon": "",
              "expanded": true,
              "list": [
                {
                  "type": "algorithm",
                  "id": "algorithm1",
                  "label": "algorithm 1",
                  "icon": "algorithm",
                  "scope": "local",
                  "description": "",
                  "code": "",
                  "error": "",
                  "logs": [""]
                },
                {
                  "type": "algorithm",
                  "id": "algorithm2",
                  "label": "algorithm 2",
                  "icon": "algorithm",
                  "scope": "local",
                  "description": "",
                  "code": "",
                  "error": "",
                  "logs": [""]
                }
              ]
            }
          },
          {
            "type": "project",
            "id": "project2",
            "label": "Project 2",
            "description": "",
            "icon": "",
            "expanded": false,
            "connections": {
              "icon": "",
              "expanded": true,
              "list": [
                {
                  "type": "connection",
                  "id": "connection1",
                  "label": "connection 1",
                  "icon": "connection",
                  "scope": "local",
                  "description": "",
                  "port": "",
                  "host": ""
                },
                {
                  "type": "connection",
                  "id": "connection2",
                  "label": "connection 2",
                  "icon": "connection",
                  "scope": "local",
                  "description": "",
                  "port": "",
                  "host": ""
                }
              ]
            },
            "queries": {
              "icon": "",
              "expanded": true,
              "list": [
                {
                  "type": "query",
                  "id": "query1",
                  "label": "query 1",
                  "icon": "query",
                  "description": "",
                  "query": "",
                  "connection": "connection1",
                  "transformer": {
                    "type": "transformer",
                    "id": "transformer1",
                    "label": "transformer 1",
                    "icon": "transformer",
                    "scope": "local",
                    "description": "",
                    "code": "",
                    "error": "",
                    "logs": [""]
                  },
                  "algorithm": {
                    "type": "algorithm",
                    "id": "algorithm2",
                    "label": "algorithm 2",
                    "icon": "algorithm",
                    "scope": "local",
                    "description": "",
                    "code": "",
                    "error": "",
                    "logs": [""]
                  }
                },
                {
                  "type": "query",
                  "id": "query2",
                  "label": "query 2",
                  "icon": "query",
                  "description": "",
                  "query": "",
                  "connection": "connection1",
                  "transformer": {
                    "type": "transformer",
                    "id": "transformer2",
                    "label": "transformer 2",
                    "icon": "transformer",
                    "scope": "local",
                    "description": "",
                    "code": "",
                    "error": "",
                    "logs": [""]
                  },
                  "algorithm": {
                    "type": "algorithm",
                    "id": "algorithm2",
                    "label": "algorithm 2",
                    "icon": "algorithm",
                    "scope": "local",
                    "description": "",
                    "code": "",
                    "error": "",
                    "logs": [""]
                  }
                }
              ]
            },
            "transformers": {
              "icon": "",
              "expanded": true,
              "list": [
                {
                  "type": "transformer",
                  "id": "transformer1",
                  "label": "transformer 1",
                  "icon": "transformer",
                  "scope": "local",
                  "description": "",
                  "code": "",
                  "error": "",
                  "logs": [""]
                },
                {
                  "type": "transformer",
                  "id": "transformer2",
                  "label": "transformer 2",
                  "icon": "transformer",
                  "scope": "local",
                  "description": "",
                  "code": "",
                  "error": "",
                  "logs": [""]
                }
              ]
            },
            "algorithms": {
              "icon": "",
              "expanded": true,
              "list": [
                {
                  "type": "algorithm",
                  "id": "algorithm1",
                  "label": "algorithm 1",
                  "icon": "algorithm",
                  "description": "",
                  "code": "",
                  "error": "",
                  "logs": [""]
                },
                {
                  "type": "algorithm",
                  "id": "algorithm2",
                  "label": "algorithm 2",
                  "icon": "algorithm",
                  "description": "",
                  "code": "",
                  "error": "",
                  "logs": [""]
                }
              ]
            }
          }
        ]
      },
      {
        "type": "connections",
        "label": "Connections",
        "icon": "",
        "expanded": false,
        "list": [
          {
            "type": "connection",
            "id": "connection1g",
            "label": "connection 1",
            "icon": "connection",
            "scope": "global",
            "description": "",
            "port": "",
            "host": ""
          },
          {
            "type": "connection",
            "id": "connection2g",
            "label": "connection 2",
            "icon": "connection",
            "scope": "global",
            "description": "",
            "port": "",
            "host": ""
          }
        ]
      },
      {
        "type": "tranformers",
        "label": "Tranformers",
        "icon": "",
        "expanded": false,
        "list": [
          {
            "type": "transformer",
            "id": "transformer1g",
            "label": "transformer 1",
            "icon": "transformer",
            "scope": "global",
            "description": "",
            "code": "",
            "error": "",
            "logs": [""]
          },
          {
            "type": "transformer",
            "id": "transformer2g",
            "label": "transformer 2",
            "icon": "transformer",
            "scope": "global",
            "description": "",
            "code": "",
            "error": "",
            "logs": [""]
          }
        ]
      },
      {
        "type": "algorithms",
        "label": "Algorithms",
        "icon": "",
        "expanded": false,
        "list": [
          {
            "type": "algorithm",
            "id": "algorithm1g",
            "label": "algorithm 1",
            "icon": "algorithm",
            "scope": "global",
            "description": "",
            "code": "algorithm 1",
            "error": "",
            "logs": [""]
          },
          {
            "type": "algorithm",
            "id": "algorithm2g",
            "label": "algorithm 2",
            "icon": "algorithm",
            "scope": "global",
            "description": "",
            "code": "algorithm 2",
            "error": "",
            "logs": [""]
          }
        ]
      }
    ],
    "treeNodeClicked": true,
    "treeNodePath": "",
    "selectedTreeNodes": {
      "list": ["query1"],
      "query1": {
        "id": "query1",
        "projectIdx": 0,
        "queryIdx": 0
      }
    },
    "queryDialog": false,
    "connectionDialog": false,
    "transformerDialog": false,
    "algorithmDialog": false
  },
  "Auth": {
    "username": "TypeRefinery User",
    "email": "info@typerefinery.io",
    "alias": "Me"
  },
  "Transformer": {
    "list": [
      {
        "name": "Transformer1",
        "code": "log('Transformer1')",
        "error": "",
        "logs": []
      },
      {
        "name": "Transformer2",
        "code": "log('Transformer2')",
        "error": "",
        "logs": []
      },
      {
        "name": "Transformer3",
        "code": "log('Transformer3')",
        "error": "",
        "logs": []
      }
    ]
  }
}
