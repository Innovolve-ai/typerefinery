{
	"variables": {},
	"frstv001sr41d": {
		"paused": false,
		"id": "frstv001sr41d",
		"reference": "",
		"author": "",
		"group": "",
		"icon": "fas fa-microchip",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "TMS Test",
		"components": {
			"cmbr250a48": "<script total>\n\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '2';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', restart: false };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n</body>",
			"cmfjj64e18": "<script total>\n\n\texports.name = 'Print';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'fa fa-print';\n\texports.author = 'Total.js';\n\texports.config = { repo: false, data: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\toutput && instance.status(output, 200);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.status('');\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer > div { margin: 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS .noscrollbar { max-height: 250px; }\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n</style>\n\n<readme>\nThe component prints incoming data in a JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Clear</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__html pre:Thelpers.jsonformat(JSON.stringify(value, null, '\\t'))__show\" class=\"hidden selectable\">\n\t\t\t<div class=\"noscrollbar\">\n\t\t\t\t<pre class=\"json\"></pre>\n\t\t\t</div>\n\t\t</div>\n\t</footer>\n</body>",
			"cmh84a7822": "<script total>\n\n\texports.name = 'Print JSON';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-print';\n\texports.author = 'Martin Smola';\n\texports.config = { repo: false, data: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\toutput && instance.status(output);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.status('');\n\t\t}\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer > div { margin: 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\n\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<readme>\nThe component prints incoming data in a JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\n\t</div>\n</settings>\n\n<script>\n\tFUNC.printjson_click = function(type, data) { // type = path/data\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\n\t};\n\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\n\t\tvar el = $(this);\n\t\tvar iscopy = el.hclass('fa-copy');\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\n\t\tsetTimeout(function(){\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\n\t\t}, 2000);\n\t});\n</script>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\n\t</footer>\n</body>",
			"coi2uf35a9": "<script total>\n\n\texports.id = 'code';\n\texports.name = 'Code';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total.js';\n\texports.config = { outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send(\\'output\\', data); // or simply send(data); which uses the first output\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.throw(e);\n\t\t\t\t\t$.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = [];\n\t\t\tfor (let i = 1; i <= config.outputs; i++)\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i === 1 ? '' : i), name: 'Output #' + i });\n\t\t\tinstance.save();\n\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n\n\tTo send data to the default output use `send(somedata);`\n\tTo send data to specific output when number of outputs > 1 use `$.send('outputX', somedata)` where `X` is output index, see example bellow:\n\t- first output--> `send(somedata)` or `$.send('output', somedata)`\n\t- second output --> `$.send('output2', somedata)`\n\t- ...\n\t- 5th output --> `$.send('output5', somedata)`\n\t- etc.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.outputs__type:number\" class=\"m\">Number of outputs</div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cqs6001fd7": "<script total>\n\n\texports.id = 'cheerio';\n\texports.name = 'Cheerio';\n\texports.group = 'HTML';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { fn: '// $: cheerio instance\\n// html: html string\\nvar body = $(\\'body\\').html();\\nreturn body;', path: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.npm = ['cheerio'];\n\t// exports.meta = { readonly: false, singleton: false, hidden: false };\n\n\texports.make = function(instance, config) {\n\n\t\t// instance.main.variables {Object}\n\t\t// instance.main.variables2 {Object}\n\t\t// instance.save();\n\t\t// instance.replace(str); // replaces {variable_name} for values from \"variables\" and \"variables2\"\n\t\t// instance.status(obj, [refresh_delay_in_ms]);\n\n\t\tconst cheerio = require('cheerio');\n\t\tvar get, fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\n\t\t\tvar input = CLONE(data);\n\t\t\tvar html;\n\t\t\tif (config.path) {\n\t\t\t\thtml = get(data);\n\t\t\t} else {\n\t\t\t\thtml = data;\n\t\t\t}\n\n\t\t\tif (typeof(html) !== 'string') {\n\t\t\t\t$.send('output', { error: 'invalid data, expected \"data{0}{1}\" to be a string'.format(config.path ? '.' : '', config.path) });\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst $$ = cheerio.load(html);\n\t\t\tvar result = fn($$, html);\n\n\t\t\t$.data = { result, input };\n\t\t\t$.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (config.path)\n\t\t\t\tget = new Function('data', 'return data?.{0};'.format(config.path.replace(/\\./g, '?.')));\n\n\t\t\tif (config.fn) {\n\t\t\t\ttry {\n\t\t\t\t\tfn = new Function('$', 'html', config.fn);\n\t\t\t\t\tinstance.status('');\n\t\t\t\t} catch(e){\n\t\t\t\t\tinstance.throw(e.stack);\n\t\t\t\t\tinstance.status('Invalid code');\n\t\t\t\t}\n\t\t\t} else\n\t\t\t\tinstance.status('Not configured');\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tUses [Cheerio](https://cheerio.js.org/index.html)\n\tPlease refer to the [documentation](https://cheerio.js.org/classes/Cheerio.html) for available functions.\n## Input\n```js\n\t<any>\n```\n\n## Output\n```js\n\t{\n\t\tresult: <the data returned from the code>,\n\t\tinput: <incomming data>\n\t}\n```\n\n## Example code\n```js\n\t// $: cheerio instance\n\t// html: html string\n\n\tvar txt = [];\n\t$('ul > li').each(function (i, elem) {\n\t\ttxt.push($(this).text());\n\t});\n\treturn txt;\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path\">Path to html</div>\n\t\t<div class=\"help m\">Leave empty if the 'data' itself is the html string, otherwise use dot notation. E.g.: { request: { body: '&lt;html&gt;...&lt;/html&gt;' }} -> `request.body` </div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.fn__type:javascript;minheight:300;parent:.ui-largeform-body;margin:60;tabs:true;trim:true\"></div>\n\t\t<div class=\"help\">Available variables: '&dollar;' -> cheerio instance, 'html' -> html string. Use 'return somedata;' to return whatever you want. Output data -> { result: somedata, input: inputdata }</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"!STATUS__text__show\"></footer>\n</body>",
			"cr19i7cad4": "<script total>\n\texports.id = 'comment';\n\texports.name = 'Comment';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { text: 'Comment' };\n\texports.meta = { settingswidth: 1100 };\n\n\texports.make = function(instance, config) {\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"codemirror__?.text__type:markdown;parent:auto;minheight:300;margin:65\"></div>\n\t\t<div class=\"help\">Supports Markdown</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS { max-width: 500px !important; }\n\t.CLASS .content { display: none; min-height: 0; }\n\t.CLASS footer { padding: 10px; font-size: 12px; border-top: 0 !important; }\n</style>\n\n<body>\n\t<footer data-bind=\"!CONFIG.text__html:value.markdown(el)\" class=\"markdown-small\"></footer>\n</body>",
			"cr2q3d353c": "<script total>\n\n\texports.name = 'Test';\n\texports.icon = 'fa fa-info';\n\texports.author = 'Total Avengers';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\t$.send('output', 'Hello world output');\n\t\t\t$.send('dynamic', 'Hello world dynamic');\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = config.outputs;\n\t\t\tinstance.save();\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\n\tTest\n</readme>\n\n<settings>\n</settings>\n\n<style>\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer></footer>\n</body>",
			"ctzb541236": "<script total>\n\n\texports.name = 'Model';\n\texports.group = 'Transformations';\n\texports.icon = 'fab fa-wpforms';\n\texports.author = 'Total.js';\n\texports.version = '2';\n\texports.config = { name: 'Model', path: '', schema: [], rewrite: true };\n\texports.inputs = [{ id: 'input', name: 'Data' }, { id: 'partial', name: 'Partial data' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar deferr = 'Invalid value';\n\t\tvar defvalues = {};\n\t\tvar path;\n\n\t\tvar preparenumber = function(val, err, max, min, float) {\n\t\t\tif (val != null && val != '') {\n\t\t\t\tval = typeof(val) === 'string' ? (float ? val.parseFloat() : val.parseInt()) : val;\n\t\t\t\tval = max ? (val > max || val < min ? null : val) : val;\n\t\t\t} else\n\t\t\t\tval = null;\n\t\t\treturn val;\n\t\t};\n\n\t\tinstance.preparedata = function(item, val, err, parent, partial) {\n\n\t\t\tvar path = (parent ? (parent + '.') : '') + item.name;\n\n\t\t\tswitch (item.type) {\n\t\t\t\tcase 'string':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'upper':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val ? val.toUpperCase() : '';\n\n\t\t\t\tcase 'lower':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val ? val.toLowerCase() : '';\n\n\t\t\t\tcase 'capitalize':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val ? val.capitalize() : '';\n\n\t\t\t\tcase 'email':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tval = val.replace(/\\s/g, '');\n\t\t\t\t\tval = val && val.isEmail() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'phone':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tval = val.trim().replace(/\\s|\\.|-|\\(|\\)/g, '');\n\t\t\t\t\tval = val && val.isPhone() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'boolean':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\treturn defvalues[item.name] || false;\n\n\t\t\t\t\treturn val == true || val === 'on' || val === 'true' || val == 1;\n\n\t\t\t\tcase 'zip':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tval = val.replace(/\\s/g, '');\n\t\t\t\t\tval = val && val.isZIP() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'date':\n\t\t\t\t\tif (val) {\n\t\t\t\t\t\tif (val instanceof Date)\n\t\t\t\t\t\t\treturn val;\n\t\t\t\t\t\tswitch (typeof(val)) {\n\t\t\t\t\t\t\tcase 'string':\n\t\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\t\t\treturn val.parseDate();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else\n\t\t\t\t\t\tval = defvalues[item.name] ? (defvalues[item.name] == NOOP ? new Date() : defvalues[item.name]) : null;\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn null;\n\n\t\t\t\tcase 'object':\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'number':\n\t\t\t\tcase 'float':\n\t\t\t\t\tval = preparenumber(val, err, null, true);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'integer':\n\t\t\t\t\tvar max = 2147483647;\n\t\t\t\t\tval = preparenumber(val, err, max, -max);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'smallint':\n\t\t\t\t\tvar max = 32768;\n\t\t\t\t\tval = preparenumber(val, err, max, -max);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'tinyint':\n\t\t\t\t\tval = preparenumber(val, err, 255, 0);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'base64':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.isBase64() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'json':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.isJSON() ? val : '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'url':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.isURL() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'uid':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.trim();\n\t\t\t\t\tval = val.isUID() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'guid':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.trim();\n\t\t\t\t\tval = val.isGUID() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tdefault:\n\t\t\t\t\tvar model = instance.main.meta.flow[item.type];\n\t\t\t\t\treturn model ? model.validatedata(val || {}, err, partial, path).data : null;\n\t\t\t}\n\t\t};\n\n\t\tinstance.validatedata = function(data, err, partial, parent) {\n\n\t\t\tvar obj = {};\n\t\t\tvar plus = parent ? (parent + '.') : '';\n\n\t\t\tif (!err)\n\t\t\t\terr = [];\n\n\t\t\tif (typeof(data) !== 'object') {\n\t\t\t\tdata = data + '';\n\t\t\t\tif (data.isJSON()) {\n\t\t\t\t\tdata = data.parseJSON(true);\n\t\t\t\t} else {\n\t\t\t\t\terr.push({ name: parent, error: 'Invalid data' });\n\t\t\t\t\treturn { error: err };\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!data) {\n\t\t\t\terr.push({ name: parent, error: 'Invalid data' });\n\t\t\t\treturn { error: err };\n\t\t\t}\n\n\t\t\tfor (var item of config.schema) {\n\t\t\t\tvar val = data[item.name];\n\n\t\t\t\tif (partial && val === undefined)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tif (item.array) {\n\n\t\t\t\t\tobj[item.name] = [];\n\n\t\t\t\t\tif (val) {\n\n\t\t\t\t\t\tif (!(val instanceof Array))\n\t\t\t\t\t\t\tval = [val];\n\n\t\t\t\t\t\tfor (var i = 0; i < val.length; i++) {\n\t\t\t\t\t\t\tvar m = val[i];\n\t\t\t\t\t\t\tvar r = instance.preparedata(item, m, err, plus, partial);\n\t\t\t\t\t\t\tobj[item.name].push(r);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif (item.required && !obj[item.name].length)\n\t\t\t\t\t\terr.push({ name: item.name, path: plus + item.name, error: deferr });\n\n\t\t\t\t} else\n\t\t\t\t\tobj[item.name] = instance.preparedata(item, val, err, parent, partial);\n\t\t\t}\n\n\t\t\treturn { data: obj, error: err.length ? err : null };\n\t\t};\n\n\t\tvar findvalue = function(data) {\n\t\t\tvar obj = data;\n\t\t\tfor (var m of path) {\n\t\t\t\tobj = obj[m];\n\t\t\t\tif (!obj)\n\t\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn obj;\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (path)\n\t\t\t\tdata = findvalue(data);\n\n\t\t\tvar err = [];\n\t\t\tvar output = instance.validatedata(data, err, $.input === 'partial');\n\n\t\t\tif (output.error) {\n\t\t\t\t$.send('error', output.error);\n\t\t\t} else {\n\t\t\t\tif (path && config.rewrite)\n\t\t\t\t\tdata = output.data;\n\t\t\t\t$.send('output', path && config.rewrite ? $.data : output.data);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tpath = config.path ? config.path.split('.') : null;\n\t\t\tdefvalues = {};\n\t\t\tfor (var item of config.schema) {\n\t\t\t\tif (item.default) {\n\t\t\t\t\tswitch (item.type) {\n\t\t\t\t\t\tcase 'tinyint':\n\t\t\t\t\t\tcase 'smallint':\n\t\t\t\t\t\tcase 'integer':\n\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\tcase 'float':\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default.parseFloat();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'object':\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tdefvalues[item.name] = new Function('return ' + item.default)();\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'date':\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default === 'now' ? NOOP : item.default.parseDate('yyyy-MM-dd HH:mm:ss');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'boolean':\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default === 'true' || item.default === 'on' || item.default === '1';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis component prepares incoming data according to the defined schema. Output is prepared model or Error.\n</readme>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding bg-smoke\">\n\t\t\t<div data---=\"input__?.name__required:1\" class=\"m\">Model name</div>\n\t\t\t<div data---=\"input__?.path__placeholder:path.to.property;monospace:1\">Load data from the specific property/field</div>\n\t\t\t<div class=\"help\">Optional. The data for the model will be loaded from the specific property/field.</div>\n\t\t\t<div data-bind=\"?.path__show\" class=\"hidden\">\n\t\t\t\t<hr />\n\t\t\t\t<div data---=\"input__?.rewrite__type:checkbox\"><b>Rewrite value only</b> (otherwise, it will replace entire message data)</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"padding\">\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmprestmodel.add\"><i class=\"fa fa-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Fields</label>\n\t\t\t</div>\n\t\t\t<div data-bind=\"?.schema__template:figure --> data-id__show:value && value.length\" class=\"fields m\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\"{{ if m.required }} class=\"isrequired\"{{ fi }}>\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmprestmodel.move\" data-type=\"up\" title=\"Move up\"><i class=\"far fa fa-arrow-up\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmprestmodel.move\" data-type=\"down\" title=\"Move down\"><i class=\"far fa fa-arrow-down\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmprestmodel.rem\" title=\"Remove\"><i class=\"far fa-trash-alt red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"required exec{{ if m.required }} is{{ fi }}\" data-exec=\"tmprestmodel.required\">required</div>\n\t\t\t\t\t\t<div class=\"array exec{{ if m.array }} is{{ fi }}\" data-exec=\"tmprestmodel.array\">Array</div>\n\t\t\t\t\t\t<div class=\"type hellip exec monospace\" data-exec=\"tmprestmodel.type\">{{ m.type | restmodeltype | raw }}</div>\n\t\t\t\t\t\t<div class=\"default\">\n\t\t\t\t\t\t\t<div class=\"edit monospace b\" data-edit=\"exec:tmprestmodel.default;selectall:1\">{{ m.default | empty }}</div>\n\t\t\t\t\t\t\t<div class=\"help nmt\">Default value</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"name\">\n\t\t\t\t\t\t\t<div class=\"monospace edit hellip\" data-edit=\"exec:tmprestmodel.name;required:1\">{{ m.name }}</div>\n\t\t\t\t\t\t\t<div class=\"error\">Error message: <span class=\"edit hellip\" data-edit=\"exec:tmprestmodel.error;required:1\">{{ m.error | empty('Invalid value') }}</span></div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"message message-alert\">If you want to declare a nested object, then you can create another model and link it with this model.</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS { min-width: 220px; }\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 40px; border-top: 1px solid #E0E0E0; line-height: 39px; font-size: 12px; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 40px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .name { margin-right: 350px; padding: 6px 8px 0; line-height: 14px; }\n\t.CLASS-settings figure .name > div:first-child { font-weight: bold; outline: 0; }\n\t.CLASS-settings figure .error { font-size: 11px; color: #888; }\n\t.CLASS-settings figure .error span { color: #B9261A; outline: 0; min-width: 150px; }\n\t.CLASS-settings figure .default { float: right; width: 180px; border-left: 1px solid #E0E0E0; padding: 0 8px; cursor: pointer; line-height: 16px; padding-top: 4px; height: 40px; }\n\t.CLASS-settings figure .type { float: right; width: 180px; border-left: 1px solid #E0E0E0; padding: 0 8px; cursor: pointer; background-color: rgba(0,0,0,0.03); }\n\t.CLASS-settings figure .required { float: right; width: 70px; padding: 0 8px; border-left: 1px solid #E0E0E0; text-align: center; font-size: 11px; cursor: pointer; text-decoration: line-through; }\n\t.CLASS-settings figure .required.is { font-weight: bold; text-decoration: none; color: #EC8632; }\n\t.CLASS-settings figure .array { float: right; width: 70px; padding: 0 8px; border-left: 1px solid #E0E0E0; text-align: center; font-size: 11px; cursor: pointer; text-decoration: line-through;}\n\t.CLASS-settings figure .array.is { font-weight: bold; text-decoration: none; color: #EC8632; }\n\t.CLASS-settings figure .controls { float: right; width: 70px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure.isrequired { background-color: rgba(255,254,209,0.3); }\n\t.CLASS-settings figure.ismoved { background-color: rgba(92,29,196,0.3) !important; }\n\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure.isrequired { background-color: rgba(255,254,209,0.1); }\n\t.ui-dark .CLASS-settings figure .edit-open { background-color: #363636; }\n\t.ui-dark .CLASS-settings figure .default { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .type { border-left-color: #404040; background-color: rgba(100,100,100,0.1); }\n\t.ui-dark .CLASS-settings figure .required { border-left-color: #404040; }\n\t.ui-dark .CLASS-settings figure .array { border-left-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b>Model:</b> <span data-bind=\"CONFIG.name__text\"></span>\n\t</header>\n\t<footer>\n\t\t<span class=\"exec link\" data-exec=\"/copy\"><i class=\"far fa-copy mr5\"></i>Copy fields as Markdown</span>\n\t</footer>\n</body>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tvar tmp = W.tmprestmodel;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tscope.push('schema', { id: Math.random().toString(36).substring(4), name: 'name', type: 'string', required: true, array: false });\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.type = function(el) {\n\t\t\t\t\tvar opt = {};\n\t\t\t\t\topt.element = el;\n\t\t\t\t\topt.align = 'left';\n\t\t\t\t\topt.raw = true;\n\t\t\t\t\topt.items = tmp.types;\n\t\t\t\t\topt.callback = function(selected) {\n\t\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\tif (item)\n\t\t\t\t\t\t\titem.type = selected.id;\n\t\t\t\t\t\tel.html(selected.name);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t};\n\t\t\t\t\tSETTER('directory/show', opt);\n\t\t\t\t};\n\n\t\t\t\ttmp.name = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tif (opt.value) {\n\t\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\titem.name = opt.value;\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tnext(true);\n\t\t\t\t\t} else\n\t\t\t\t\t\tnext(opt.html);\n\t\t\t\t};\n\n\t\t\t\ttmp.move = function(el) {\n\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar container = el.closest('figure');\n\t\t\t\t\tvar schema = scope.get().schema;\n\t\t\t\t\tvar index = schema.findIndex('id', id);\n\t\t\t\t\tvar is = false;\n\t\t\t\t\tvar isup = el.attrd('type') === 'up';\n\n\t\t\t\t\tif (isup) {\n\t\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index - 1];\n\t\t\t\t\t\t\tschema[index - 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (index <= schema.length - 1) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index + 1];\n\t\t\t\t\t\t\tschema[index + 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is) {\n\t\t\t\t\t\tNODEMOVE(container, isup);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tcontainer.aclass('ismoved').rclass('ismoved', 500);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttmp.default = function(opt, next) {\n\t\t\t\t\tif (opt.value) {\n\t\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\n\t\t\t\t\t\tif (opt.value === '---')\n\t\t\t\t\t\t\tdelete opt.value;\n\n\t\t\t\t\t\titem.default = opt.value || undefined;\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tnext(true);\n\t\t\t\t\t} else\n\t\t\t\t\t\tnext(opt.html);\n\t\t\t\t};\n\n\t\t\t\ttmp.error = function(opt, next) {\n\t\t\t\t\tif (opt.value) {\n\t\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\titem.error = opt.value || undefined;\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tnext(true);\n\t\t\t\t\t} else\n\t\t\t\t\t\tnext(opt.html);\n\t\t\t\t};\n\n\t\t\t\ttmp.required = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.required = !item.required;\n\t\t\t\t\tel.tclass('is', item.required);\n\t\t\t\t\tel.closest('figure').tclass('isrequired', item.required);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.array = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.array = !item.array;\n\t\t\t\t\tel.tclass('is', item.array);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\tThelpers.restmodeltype = function(val) {\n\t\t\t\t\treturn tmp.types.findValue('id', val, 'name', DEF.empty);\n\t\t\t\t};\n\n\t\t\t\tW.tmprestmodel = tmp;\n\t\t\t}\n\n\t\t\ttmp.types = [];\n\t\t\ttmp.types.push({ id: 'string', name: 'String' });\n\t\t\ttmp.types.push({ id: 'number', name: 'Number' });\n\t\t\ttmp.types.push({ id: 'email', name: 'Email address' });\n\t\t\ttmp.types.push({ id: 'phone', name: 'Phone number' });\n\t\t\ttmp.types.push({ id: 'boolean', name: 'Boolean' });\n\t\t\ttmp.types.push({ id: 'zip', name: 'ZIP' });\n\t\t\ttmp.types.push({ id: 'date', name: 'Date' });\n\t\t\ttmp.types.push({ id: 'float', name: 'Float' });\n\t\t\ttmp.types.push({ id: 'integer', name: 'Integer' });\n\t\t\ttmp.types.push({ id: 'tinyint', name: 'Tinyint' });\n\t\t\ttmp.types.push({ id: 'smallint', name: 'Smallint' });\n\t\t\ttmp.types.push({ id: 'upper', name: 'String - Upper case' });\n\t\t\ttmp.types.push({ id: 'lower', name: 'String - Lower case' });\n\t\t\ttmp.types.push({ id: 'slug', name: 'String - Slug' });\n\t\t\ttmp.types.push({ id: 'capitalize', name: 'String - Capitalize' });\n\t\t\ttmp.types.push({ id: 'uid', name: 'UI' + 'D' });\n\t\t\ttmp.types.push({ id: 'guid', name: 'GUI' + 'D' });\n\t\t\ttmp.types.push({ id: 'object', name: 'Object' });\n\t\t\ttmp.types.push({ id: 'json', name: 'JSON' });\n\t\t\ttmp.types.push({ id: 'base64', name: 'Base64' });\n\n\t\t\tfor (var key in flow.data) {\n\t\t\t\tvar m = flow.data[key];\n\t\t\t\tif (m.Component && m.Component.name === 'Model')\n\t\t\t\t\ttmp.types.push({ id: m.id, name: 'Model: <b>' + m.config.name.encode() + '</b>' });\n\t\t\t}\n\n\t\t};\n\n\t\texports.copy = function(el) {\n\n\t\t\tvar config = exports.config;\n\t\t\tvar builder = [];\n\n\t\t\tbuilder.push('__Model: ' + config.name + '__:');\n\t\t\tbuilder.push('');\n\n\t\t\tfor (var m of config.schema) {\n\n\t\t\t\tvar type = m.type;\n\t\t\t\tif (type.charAt(0) === 'i' && type !== 'integer') {\n\t\t\t\t\tvar tmp = flow.data[type];\n\t\t\t\t\tif (tmp)\n\t\t\t\t\t\ttype = tmp.config.name;\n\t\t\t\t\telse\n\t\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tbuilder.push('- `{0} {{1}}`'.format(m.name, type) + (m.array ? ' array' : '') + (m.required ? ' __required__' : ''));\n\t\t\t}\n\n\t\t\tSETTER('clipboard/copy', builder.join('\\n'));\n\t\t\tSETTER('notify/success', 'The schema has been copied into the clipboard');\n\t\t};\n\n\t});\n\n</script>",
			"csl8z67b6d": "<script total>\n\n\texports.name = 'Counter';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-calculator';\n\texports.author = 'Total.js';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance) {\n\n\t\tvar count = 0;\n\n\t\tinstance.message = function($) {\n\t\t\tcount++;\n\t\t\tinstance.status(count);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function(data) {\n\t\t\tcount = 0;\n\t\t\tinstance.status(count);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 35px; margin: 0; padding: 0 10px 10px; font-weight: bold; text-align: center; }\n</style>\n\n<readme>\nThe component counts incoming messages.\n</readme>\n\n<body>\n\t<header>\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Reset</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"STATUS__text:(value || 0).format(0)\" class=\"status\"></footer>\n</body>",
			"cij905b3d1": "<script total>\n\n\texports.name = 'Query';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total Avengers';\n\texports.version = '1';\n\texports.config = { query: '', dependencies: '', database: ''};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\t// exports.npm = ['npm_module_1', 'npm_module_2@version'];\n\n\texports.make = function(instance, config) {\n\n\t\t// instance.main.variables {Object}\n\t\t// instance.main.variables2 {Object}\n\t\t// instance.save();\n\t\t// instance.replace(str); // replaces {variable_name} for values from \"variables\" and \"variables2\"\n\n\t\tinstance.message = function($) {\n\t\t\t//var data = $.data;\n\t\t\tvar data = {\n\t\t\t\t\"query\": config.query,\n\t\t\t\t\"dependencies\": config.dependencies,\n\t\t\t\t\"database\": config.database\n\t\t\t}\n\t\t\t$.send('output', data);\n\t\t\t// or $.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\t// this instance is closed\n\t\t};\n\n\t\tinstance.variables = function(variables) {\n\t\t\t// FlowStream variables are changed\n\t\t};\n\n\t\tinstance.variables2 = function(variables) {\n\t\t\t// Global variables are changed\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nMarkdown readme\n\n```js\nvar total = 'Hello world!';\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\tSETTINGS for this component (optional)\n\n\t\t<div data---=\"input__?.database__required:1\">Database</div>\n\t\t<div data---=\"input__?.dependencies__required:1\">Dependencies</div>\n\t\t<div data---=\"codemirror__?.query__type:sql;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\">Query</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n\t// Client-side script\n\t// Optional, you can remove it\n\n\t// A custom helper for the component instances\n\t// The method below captures each instance of this component\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar name = exports.name + ' --> ' + exports.id;\n\n\t\tconsole.log(name, 'initialized' + (reinit ? ' : UPDATE' : ''));\n\n\t\texports.settings = function(meta) {\n\t\t\t// Triggered when the user opens settings\n\t\t\tconsole.log(name, 'settings', meta);\n\t\t};\n\n\t\texports.configure = function(config, isinit) {\n\t\t\t// Triggered when the config is changed\n\t\t\tconsole.log(name, 'configure', config);\n\t\t};\n\n\t\texports.status = function(status, isinit) {\n\t\t\t// Triggered when the status is changed\n\t\t\tconsole.log(name, 'status', status);\n\t\t};\n\n\t\texports.note = function(note, isinit) {\n\t\t\t// Triggered when the note is changed\n\t\t\tconsole.log(name, 'note', note);\n\t\t};\n\n\t\texports.variables = function(variables) {\n\t\t\t// Triggered when the variables are changed\n\t\t\tconsole.log(name, 'variables', variables);\n\t\t};\n\n\t\texports.variables2 = function(variables) {\n\t\t\t// Triggered when the variables2 are changed\n\t\t\tconsole.log(name, 'variables2', variables);\n\t\t};\n\n\t\texports.close = function() {\n\t\t\t// Triggered when the instance is closing due to some reasons\n\t\t\tconsole.log(name, 'close');\n\t\t};\n\n\t});\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>Learn from existing components</footer>\n</body>",
			"c1nkj9d202": "<script total>\n\n\texports.name = 'File Writer';\n\texports.group = 'Files';\n\texports.version = '1';\n\texports.icon = 'fa fa-pencil';\n\texports.author = 'Total.js';\n\texports.config = { path: '', serializer: 'json', rewrite: true, divider: '\\\\n' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar path;\n\t\tvar divider;\n\t\tvar timeout;\n\n\t\tvar replacewhitechar = function(text) {\n\t\t\tswitch (text[1]) {\n\t\t\t\tcase 'n':\n\t\t\t\t\treturn '\\n';\n\t\t\t\tcase 'r':\n\t\t\t\t\treturn '\\r';\n\t\t\t\tcase 't':\n\t\t\t\t\treturn '\\t';\n\t\t\t}\n\t\t\treturn text;\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.path)\n\t\t\t\treturn;\n\n\t\t\tvar data = $.data;\n\n\t\t\tswitch (config.serializer) {\n\t\t\t\tcase 'json':\n\t\t\t\t\tdata = JSON.stringify($.data);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'text':\n\t\t\t\t\tdata = data + '';\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (!(data instanceof Buffer)) {\n\t\t\t\tif (typeof(data) !== 'string')\n\t\t\t\t\tdata = data + '';\n\t\t\t\tdata = Buffer.from(data, 'utf8');\n\t\t\t}\n\n\t\t\tNOW = new Date();\n\t\t\tinstance.status({ used: NOW, size: data.length });\n\n\t\t\tif (config.rewrite) {\n\t\t\t\tF.Fs.writeFile(path, data, NOOP);\n\t\t\t} else {\n\t\t\t\tif (divider)\n\t\t\t\t\tdata = Buffer.concat([data, divider]);\n\t\t\t\tF.Fs.appendFile(path, data, NOOP);\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tpath = config.path[0] === '~' ? PATH.root(config.path.substring(1)) : config.path;\n\t\t\tdivider = config.divider ? Buffer.from(config.divider.replace(/\\\\[a-z]/g, replacewhitechar), 'utf8') : null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path__required:1;placeholder:/www/flowstream/data.json\"><b>Path</b></div>\n\t\t<div class=\"help m\">Absolute path to the file. The path starts with the <code>~</code> char will use a filename in the project's root directory.</div>\n\t\t<div data---=\"input__?.serializer__dirsource:json|JSON,text|Text,buffer|Buffer;required:1__'json'\" class=\"m\">Serializer</div>\n\t\t<div data---=\"input__?.rewrite__type:checkbox__true\">Rewrite content</div>\n\t\t<div data-bind=\"?.rewrite__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t\t<div data---=\"input__?.divider\">Divider</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component writes incoming data into the file.\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\t.CLASS hr { margin: 5px 0; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><i class=\"far fa-calendar mr5\"></i><span data-bind=\"STATUS.used__text__format:yyyy-MM-dd HH:mm:ss__empty\"></span></div>\n\t\t<div><i class=\"fa fa-calculator mr5\"></i><span data-bind=\"STATUS.size__text__helper:filesize__empty\"></span></div>\n\t\t<hr />\n\t\t<div data-bind=\"CONFIG.path__text__empty\"></div>\n\t</footer>\n</body>",
			"cy4pw82f66": "<script total>\n\n\texports.name = 'Request';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'fas fa-cloud-download';\n\texports.author = 'Total.js';\n\texports.config = { url: '', method: 'GET', dnscache: true, insecure: false, nocookies: true, xhr: false, parse: true, timeout: 10000, limit: 1024 * 500, responsebody: true, headers: {}, cookies: {}, serialize: null, send: 'all' };\n\texports.inputs = [{ id: 'payload', name: 'Payload' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar opt = {};\n\n\t\t\tfor (var key in config.headers) {\n\t\t\t\tif (!opt.headers)\n\t\t\t\t\topt.headers = {};\n\t\t\t\topt.headers[$.variables(key, true)] = $.variables(config.headers[key], true);\n\t\t\t}\n\n\t\t\tfor (var key in config.cookies) {\n\t\t\t\tif (!opt.cookies)\n\t\t\t\t\topt.cookies = {};\n\t\t\t\topt.cookies[$.variables(key, true)] = $.variables(config.cookies[key], true);\n\t\t\t}\n\n\t\t\topt.method = config.method;\n\t\t\topt.url = $.variables(config.url, true);\n\t\t\topt.cook = true;\n\n\t\t\tif (config.serialize) {\n\t\t\t\tswitch (config.serialize) {\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\topt.type = 'json';\n\t\t\t\t\t\tif (opt.method !== 'GET')\n\t\t\t\t\t\t\topt.body = JSON.stringify($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\t\topt.type = 'urlencoded';\n\t\t\t\t\t\tif (opt.method === 'GET')\n\t\t\t\t\t\t\topt.query = U.toURLEncode($.data);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\topt.body = U.toURLEncode($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\topt.type = 'raw';\n\t\t\t\t\t\topt.body = $.data;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.dnscache)\n\t\t\t\topt.dnscache = true;\n\n\t\t\tif (config.insecure)\n\t\t\t\topt.insecure = true;\n\n\t\t\tif (config.nocookies)\n\t\t\t\topt.nocookies = true;\n\n\t\t\tif (config.xhr)\n\t\t\t\topt.xhr = true;\n\n\t\t\tif (config.timeout)\n\t\t\t\topt.timeout = config.timeout;\n\n\t\t\tif (config.limit)\n\t\t\t\topt.limit = config.limit;\n\n\t\t\tif (config.send === 'chunks')\n\t\t\t\topt.custom = true;\n\n\t\t\topt.callback = function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\t$.data = err + '';\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (opt.custom) {\n\t\t\t\t\tresponse.stream.on('data', data => $.send('response', data));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'headers') {\n\t\t\t\t\t$.send('response', response.headers);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'status') {\n\t\t\t\t\t$.send('response', response.status);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbody = response.body;\n\n\t\t\t\tif (config.parse) {\n\t\t\t\t\tvar type = response.headers['content-type'] || '';\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tvar index = type.lastIndexOf(';');\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\ttype = type.substring(0, index).trim();\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type.toLowerCase()) {\n\t\t\t\t\t\tcase 'text/xml':\n\t\t\t\t\t\tcase 'application/xml':\n\t\t\t\t\t\t\tbody = body ? body.parseXML(true) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = body ? DEF.parsers.urlencoded(body) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tcase 'text/json':\n\t\t\t\t\t\t\tbody = body ? body.parseJSON(true) : null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbody = body && body.isJSON() ? body.parseJSON(true) : body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tswitch (config.send) {\n\t\t\t\t\tcase 'all':\n\t\t\t\t\t\t$.data = { headers: response.headers, cookies: response.cookies, status: response.status, host: response.host, body: body };\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'response':\n\t\t\t\t\t\t$.data = body;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$.send('response');\n\t\t\t};\n\n\t\t\tREQUEST(opt);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; overflow-wrap: break-word; }\n\t.CLASS .status span { padding: 2px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component makes a HTTP request. The response data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer class=\"hidden\" data-bind=\"CONFIG.url__show\">\n\t\t<div class=\"status\" data-bind=\"CONFIG__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"monospace\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding bg-smoke npb\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__dirsource:GET|GET,POST|POST,PUT|PUT,DELETE|DELETE,PATCH|PATCH,API|API;required:1\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\"><b>URL address</b></div>\n\t\t\t\t<div class=\"help\">URL address supports dynamic variables in the form <code>{key}</code></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__type:number\">Timeout</div>\n\t\t\t\t<div class=\"help\"><i class=\"far fa-clock-o\"></i><span data-bind=\"?.timeout__text:((value||0)/1000).floor(2)+' sec.'\"></span><br />Timeout <b>in milliseconds</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__type:number\">Max. size</div>\n\t\t\t\t<div class=\"help\"><i class=\"fas fa-calculator\"></i><span data-bind=\"?.limit__text:(value||0).filesize()\"></span><br />Response max. size <b>in bytes</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,response|Response body,chunks|Chunks of buffer,headers|Headers only,status|Status code\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.serialize__dirsource:json|JSON,urlencoded|URL encode,buffer|Buffer;dirraw:1;placeholder:Choose serialization;dirempty:None\" class=\"m\">Data serialization</div>\n\t\t<div data---=\"keyvalue__?.headers__placeholderkey:Header name;placeholdervalue:Header value and press enter\">Headers</div>\n\t\t<div class=\"help m\">Headers support dynamic variables in the form <code>{key}</code></div>\n\t\t<div data---=\"keyvalue__?.cookies__placeholderkey:Cookie name;placeholdervalue:Cookie value and press enter\">Cookies</div>\n\t\t<div class=\"help m\">Cookies support dynamic variables in the form <code>{key}</code></div>\n\t\t<hr />\n\t\t<div data---=\"input__?.parse__type:checkbox\">Parse Response to Object</div>\n\t\t<div data---=\"input__?.dnscache__type:checkbox\">Enable DNS cache</div>\n\t\t<div data---=\"input__?.insecure__type:checkbox\">Allow insecure connection</div>\n\t\t<div data---=\"input__?.xhr__type:checkbox\">Add XHR header</div>\n\t</div>\n</settings>",
			"pubsrcvjer4415aXsvg_insert": "<script total>\n\n\texports.name = 'TMS Example';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcvjer4415a', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcvjer4415aXsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <http://localhost:8112>\n- Channel: __publish__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Example / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcvjer4415aXsvg_insert": "<script total>\n\n\texports.name = 'TMS Example';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcvjer4415a', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcvjer4415a'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['svg_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'svg_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcvjer4415aXsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <http://localhost:8112>\n- Channel: __subscribe__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"svg_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"stepId\": {\n        \"type\": \"string\"\n      },\n      \"flowId\": {\n        \"type\": \"string\"\n      },\n      \"stepName\": {\n        \"type\": \"string\"\n      },\n      \"path\": {\n        \"type\": \"string\"\n      },\n      \"projectId\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Example / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrcvjer4415aXsvg_query": "<script total>\n\n\texports.name = 'TMS Example';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcvjer4415a', 'svg_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcvjer4415a'];\n\t\t\tif (socket && socket.calls && socket.calls['svg_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'svg_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcvjer4415aXsvg_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_query\n- URL address: <http://localhost:8112>\n- Channel: __call__\n- JSON schema `svg_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Example / <b>svg_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcvjer4415aXpayload_insert": "<script total>\n\n\texports.name = 'TMS Example';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcvjer4415a', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcvjer4415a'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcvjer4415aXpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <http://localhost:8112>\n- Channel: __subscribe__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Example / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcvjer4415aXpayload_remove": "<script total>\n\n\texports.name = 'TMS Example';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcvjer4415a', 'payload_remove'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcvjer4415a'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_remove']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_remove', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcvjer4415aXpayload_remove .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_remove\n- URL address: <http://localhost:8112>\n- Channel: __subscribe__\n- JSON schema `payload_remove.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_remove\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Example / <b>payload_remove</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrcvjer4415aXpayload_query": "<script total>\n\n\texports.name = 'TMS Example';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcvjer4415a', 'payload_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcvjer4415a'];\n\t\t\tif (socket && socket.calls && socket.calls['payload_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'payload_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcvjer4415aXpayload_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_query\n- URL address: <http://localhost:8112>\n- Channel: __call__\n- JSON schema `payload_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Example / <b>payload_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcvjer4415aXpayload_update": "<script total>\n\n\texports.name = 'TMS Example';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcvjer4415a', 'payload_update'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcvjer4415a'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_update']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_update', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcvjer4415aXpayload_update .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_update\n- URL address: <http://localhost:8112>\n- Channel: __subscribe__\n- JSON schema `payload_update.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_update\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Example / <b>payload_update</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"pubsrcvjer4415aXpayload_insert": "<script total>\n\n\texports.name = 'TMS Example';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcvjer4415a', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcvjer4415aXpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <http://localhost:8112>\n- Channel: __publish__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Example / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>"
		},
		"design": {
			"il5tummbw": {
				"id": "il5tummbw",
				"config": {
					"random": true,
					"type": "string",
					"data": "",
					"restart": false
				},
				"x": 42,
				"y": 632,
				"component": "cmbr250a48",
				"connections": {
					"output": [
						{
							"id": "il5tuwtah",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "Triggers",
					"name": "Trigger",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il5tup8m9": {
				"id": "il5tup8m9",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 821,
				"y": 65,
				"component": "cmfjj64e18",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il5tuwtah": {
				"id": "il5tuwtah",
				"config": {
					"outputs": 1,
					"code": "// instance {FlowStreamInstance};\n// $ {FlowStreamMessage};\n// vars {Object};\n// repo {Object};\n// data {String/Number/Boolean/Date/Buffer/Object};\n// $.send('output', data); // or simply send(data); which uses the first output\n// $.destroy();\n// $.throw(err);\n\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\n\n$.send('output',\n\t   {\n\t\t\"name\": \"connection1\",\n\t\t\"description\": \"connection1\",\n\t\t\"host\": \"localhost\",\n\t\t\"icon\": \"gear\",\n\t\t\"id\": \"connection1\",\n\t\t\"type\": \"connection\",\n\t\t\"scope\": \"local\",\n\t\t\"port\": 8729\n\t   }\n\t  );\n$.destroy();"
				},
				"x": 337,
				"y": 667,
				"component": "coi2uf35a9",
				"connections": {
					"output": [
						{
							"id": "il5tvst90",
							"index": "input"
						}
					]
				},
				"outputs": [
					{
						"id": "output",
						"name": "Output #1"
					}
				],
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il5tvst90": {
				"id": "il5tvst90",
				"config": {},
				"x": 672,
				"y": 639,
				"component": "csl8z67b6d",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "Common",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il5uoin1t": {
				"id": "il5uoin1t",
				"config": {
					"query": "var d3 = require(\"d3\"),\n    jsdom = require(\"jsdom\");\n\nconst { JSDOM } = jsdom;\n\nconst { document } = (new JSDOM('')).window;\nglobal.document = document;\n\n\nvar theme = {\n        \tattribute: {colorlist: \"Oranges\", cindex: 7, tcolorlist: \"Greys\", tindex: 0 },\n          entity: {colorlist: \"Blues\", cindex: 7, tcolorlist: \"Greys\", tindex: 0 },\n          relation: {colorlist: \"Blue-Green\", cindex: 6, tcolorlist: \"Greys\", tindex: 7 },\n          shadow: {colorlist: \"Oranges\", cindex: 2, tcolorlist: \"Greys\", tindex: 7 }\n        }\n\n\n    \t\tvar svg = d3.select(document).select(\"body\")\n               .append(\"svg\")\n               .attr(\"width\", \"calc(100vw)\")\n               .attr(\"height\", \"calc(100vh)\")\n               .call(d3.zoom().on(\"zoom\", function () {\n                  svg.attr(\"transform\", d3.event.transform)\n               }))\n               .append(\"g\")\n\n\t\t\t\tconst height = 500;\n\t\t\t\tconst width = +d3.select(\"body\").attr('width');\n\n      \t// setup the theme colour\n\n\t\t\t\tconst textPadding = 8;\n\t\t\t\tconst corner = 5;\n      \tconst grp_corner = 8;\n      \tconst pad = 5;\n        var ent_colour = '#03396c';\n        var ent_t_colour = 'white';\n        var att_colour = '#ff4d00';\n        var att_t_colour = 'white';\n      \tvar shad_colour = \"#ff4d00\";\n      \tvar shad_t_colour = 'white';\n        var rel_colour = '#007777';\n        var rel_t_colour = 'black';\n      \tvar colours;\n\n      \td3.json(\"data\\\\color.json\", function (error, colors) {\n          colours = colors\n          // load the colours from the theme\n          ent_colour = colors.find(colour => colour.name == theme.entity.colorlist)['colors'][theme.entity.cindex];\n          ent_t_colour = colors.find(colour => colour.name == theme.entity.tcolorlist)['colors'][theme.entity.tindex];\n          att_colour = colors.find(colour => colour.name == theme.attribute.colorlist)['colors'][theme.attribute.cindex];\n          att_t_colour = colors.find(colour => colour.name == theme.attribute.tcolorlist)['colors'][theme.attribute.tindex];\n          shad_colour = colors.find(colour => colour.name == theme.shadow.colorlist)['colors'][theme.shadow.cindex];\n          shad_t_colour = colors.find(colour => colour.name == theme.shadow.tcolorlist)['colors'][theme.shadow.tindex];\n        \trel_colour = colors.find(colour => colour.name == theme.relation.colorlist)['colors'][theme.relation.cindex];\n          rel_t_colour = colors.find(colour => colour.name == theme.relation.tcolorlist)['colors'][theme.relation.tindex];\n        });\n\n        var cola = cola.d3adaptor(d3)\n            .size([width, height]);\n\n        // graph.json\n      \td3.json(\"data\\\\basic.json\", function (error, graph) {\n          data = graph.basic;\n            cola\n                .nodes(data.nodes)\n                .links(data.links)\n          \t\t\t.groups(data.groups)\n                .linkDistance(100)\n                .avoidOverlaps(true)\n                .handleDisconnected(false)\n                .start(30);\n\n          \tvar group = svg.selectAll(\".group\")\n                .data(data.groups)\n              .enter().append(\"rect\")\n                .attr(\"rx\", grp_corner).attr(\"ry\", grp_corner)\n                .attr(\"class\", \"group\")\n                .style(\"fill\", function (d, i) {\n                  \treturn colours.find(colour => colour.name == d.colour_list)['colors'][d.level];\n                })\n            \t\t.attr(\"stroke-width\", 1)\n\t\t             .attr(\"stroke\", function (d, i) {\n                  \treturn colours.find(colour => colour.name == d.colour_list)['colors'][7];\n                })\n                .call(cola.drag);\n\n          group.append(\"title\")\n            .text(function (d) { return d.label; });\n\n\n            var link = svg.selectAll(\".link\")\n                .data(data.links)\n              .enter().append(\"line\")\n                .attr(\"class\", \"link\")\n                .style(\"stroke-width\", '1px')\n            \t\t.attr('stroke', 'black');\n\n            var node = svg.selectAll(\".node\")\n                .data(data.nodes)\n              .enter().append(\"rect\")\n            \t\t.attr('class', \"node\")\n                .attr('class', d => d.type)\n                .attr('class', d => d.G_name)\n    \t\t\t\t\t\t.attr('id', d => d.G_id);\n\n          \tvar label = svg.selectAll(\".label\")\n                  .data(data.nodes)\n               .enter().append(\"text\")\n                  .attr(\"class\", \"label\")\n                  .text(d => d.type == 'attribute'\n                            ? (d.G_name + ': ' + d.value)\n                            : (d.G_name + ': ' + d.G_id))\n                  .attr('id', d => 'heading-' + d.G_id)\n                  .style('font-size', 10)\n                  .style('text-anchor', 'middle')\n                  .style('color', d => text_colour(d))\n                  .style('fill', d => text_colour(d))\n                  .style(\"pointer-events\", \"none\")\n            \t\t\t.call(cola.drag);\n\n            // setup heading colours for attribute, entity and relation\n            function text_colour(d) {\n                let colour = 'black'\n                switch (d.type) {\n                    case 'attribute':\n                    \t\tif (d.dtype == 'actual'){\n                        \t\tcolour = att_t_colour\n                        } else {\n                        \t\tcolour = shad_t_colour\n                        }\n                        break;\n                    case 'entity':\n                        colour = ent_t_colour\n                        break;\n                    case 'relation':\n                        colour = rel_t_colour\n                        break;\n                    default:\n                        colour = 'black'\n                        break;\n                }\n                return colour;\n            }\n\n\n          \tnode\n            \t\t.attr('width', d => nodeWidth(d))\n                .attr('height', d => d.height)\n                .attr('rx', d => d.corner)\n                .attr('ry', d=> d.corner)\n                .attr('x', d => d.x)\n                .attr('y', d => d.y)\n                .attr(\"class\", d => d.G_name)\n          \t\t\t.style(\"fill\", d => d.colour)\n                .on(\"click\", function (d) {\n                    d.fixed = true;\n                })\n                .call(cola.drag);\n\n          \t// function to set dimensions and colours for shapes\n            function nodeWidth(d) {\n                let headingid = '#heading-' + d.G_id;\n                let headingbbox = d3.select(headingid).node().getBBox();\n\n                d.width = d3.max([5, headingbbox.width]) + (textPadding * 2)\n                d.height = headingbbox.height  + textPadding * 2\n\n                // attributes and entities rounded rectangle, relation is circle\n                switch (d.type) {\n                    case 'attribute':\n                        d.corner = corner\n                        d.colour = att_colour\n                        d.x = headingbbox.x - textPadding\n                        d.y = headingbbox.y - textPadding\n                    \t\tif (d.dtype === 'shadow'){\n                          \td.colour =  shad_colour;\n                        } else {\n                          \td.colour =  att_colour;\n                        }\n                        break;\n\n                    case 'entity':\n                        d.corner = corner\n                        d.colour = ent_colour\n                        d.x = headingbbox.x - textPadding\n                        d.y = headingbbox.y - textPadding\n                    \t\tbreak;\n\n                    case 'relation':\n                        d.width = 16\n                        d.height = 16\n                        d.corner = 8\n                        d.colour = rel_colour\n                        d.x = headingbbox.x + (headingbbox.width)/2 - d.width/2\n                        d.y = headingbbox.y + d.height/2\n                    \t\tbreak;\n\n                    default:\n                        break;\n                }\n                return d.width;\n            };\n\n\n            cola.on(\"tick\", function () {\n                link.attr(\"x1\", function (d) { return d.source.x; })\n                    .attr(\"y1\", function (d) { return d.source.y; })\n                    .attr(\"x2\", function (d) { return d.target.x; })\n                    .attr(\"y2\", function (d) { return d.target.y; });\n\n                node.attr(\"x\", function (d) { return d.x - d.width/2; })\n                    .attr(\"y\", function (d) { return d.y - d.height/2; });\n\n              \t group.attr(\"x\", function (d) { return d.bounds.x -pad; })\n                      .attr(\"y\", function (d) { return d.bounds.y - pad; })\n                      .attr(\"width\", function (d) { return d.bounds.width() + 2 * pad; })\n                      .attr(\"height\", function (d) { return d.bounds.height() + 2 * pad; });\n\n              \tlabel.attr(\"x\", function (d) { return d.x; })\n                     .attr(\"y\", function (d) {\n                         var h = this.getBBox().height;\n                         return d.y + h/4;\n                     });\n            });\n        });\n\nconst fs = require('fs');\nfs.writeFileSync(\"test.svg\", body.node().innerHTML)",
					"dependencies": "asf",
					"database": "datbase"
				},
				"x": 356,
				"y": 870,
				"component": "cij905b3d1",
				"connections": {
					"output": [
						{
							"id": "il5uojvxe",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"name": "Query",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il5uojr5r": {
				"id": "il5uojr5r",
				"config": {
					"random": true,
					"type": "string",
					"data": "",
					"restart": false
				},
				"x": 30,
				"y": 819,
				"component": "cmbr250a48",
				"connections": {
					"output": [
						{
							"id": "il5uoin1t",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "Triggers",
					"name": "Trigger",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il5uojvxe": {
				"id": "il5uojvxe",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 714,
				"y": 888,
				"component": "cmfjj64e18",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il5wlc0zb": {
				"id": "il5wlc0zb",
				"config": {
					"random": false,
					"type": "object",
					"data": "{\"name\":\"connection1\",\"description\":\"connection1\",\"host\":\"localhost\",\"icon\":\"gear\",\"id\":\"connection1\",\"type\":\"connection\",\"scope\":\"local\",\"port\":8729}",
					"restart": false
				},
				"x": 250,
				"y": 203,
				"component": "cmbr250a48",
				"connections": {},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "Triggers",
					"name": "Trigger",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il5xexjss": {
				"id": "il5xexjss",
				"config": {
					"random": true,
					"type": "string",
					"data": "",
					"restart": false
				},
				"x": 129,
				"y": 459,
				"component": "cmbr250a48",
				"connections": {},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "Triggers",
					"name": "Trigger",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il5xexq77": {
				"id": "il5xexq77",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 909,
				"y": 320,
				"component": "cmfjj64e18",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			}
		},
		"variables": {},
		"sources": {
			"srcvjer4415a": {
				"token": "typerefinery",
				"url": "http://localhost:8112/$tms/",
				"id": "srcvjer4415a",
				"meta": {
					"type": "meta",
					"name": "TMS Example",
					"subscribe": [
						{
							"id": "svg_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_update",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_remove",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					],
					"publish": [
						{
							"id": "svg_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					],
					"subscribers": [
						"svg_insert",
						"payload_insert",
						"payload_update",
						"payload_remove"
					],
					"call": [
						{
							"id": "svg_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					]
				},
				"checksum": "32913527541",
				"restart": false,
				"init": true,
				"online": true,
				"dtupdated": "2023-01-05T23:29:29.504Z",
				"error": 0
			}
		},
		"origin": "http://localhost:8111",
		"dtcreated": "2022-07-20T16:54:57.401Z",
		"size": 87428,
		"variables2": {},
		"directory": "./database",
		"sandbox": false
	},
	"fry40001ha41d": {
		"paused": false,
		"id": "fry40001ha41d",
		"reference": "",
		"author": "",
		"group": "",
		"icon": "fa fa-chart-pie",
		"color": "#4285F4",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "TypeRefinery",
		"components": {
			"c8z1te8d94": "<script total>\n\n\texports.name = 'Print JSON';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-print';\n\texports.author = 'Martin Smola';\n\texports.config = { repo: false, data: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\toutput && instance.status(output);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.status('');\n\t\t}\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer > div { margin: 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\n\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<readme>\nThe component prints incoming data in a JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\n\t</div>\n</settings>\n\n<script>\n\tFUNC.printjson_click = function(type, data) { // type = path/data\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\n\t};\n\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\n\t\tvar el = $(this);\n\t\tvar iscopy = el.hclass('fa-copy');\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\n\t\tsetTimeout(function(){\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\n\t\t}, 2000);\n\t});\n</script>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\n\t</footer>\n</body>",
			"c99ly15194": "<script total>\n\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '2';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', restart: false };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n</body>",
			"query": "<script total>\n\n\texports.id = 'query';\n\texports.name = 'Query';\n\texports.group = 'TypeRefinery';\n\texports.version = '1';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total.js';\n\texports.config = { query: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = {query: config.query};\n\t\t\tinstance.send('output', data);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"ui-input-label\">Query:</div>\n\t\t<div data---=\"codemirror__?.query__type:tql;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"connection": "<script total>\n\n\texports.id = 'connection';\n\texports.name = 'Connection';\n\texports.group = 'TypeRefinery';\n\texports.version = '1';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total.js';\n\texports.config = { port: '', host: '', database: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = {connection: {\n\t\t\t\tport: config.port,\n\t\t\t\thost: config.host,\n\t\t\t\tdatabase: config.database\n\t\t\t}};\n\t\t\tinstance.send('output', data);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.port__required:1\" class=\"m\">Port</div>\n\t\t<div data---=\"input__?.host__required:1\" class=\"m\">Host</div>\n\t\t<div data---=\"input__?.database__required:1\" class=\"m\">Database Name</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cb85xac2e2": "<script total>\n\n\texports.id = 'code';\n\texports.name = 'Code';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total.js';\n\texports.config = { outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send(\\'output\\', data); // or simply send(data); which uses the first output\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.throw(e);\n\t\t\t\t\t$.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = [];\n\t\t\tfor (let i = 1; i <= config.outputs; i++)\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i === 1 ? '' : i), name: 'Output #' + i });\n\t\t\tinstance.save();\n\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n\n\tTo send data to the default output use `send(somedata);`\n\tTo send data to specific output when number of outputs > 1 use `$.send('outputX', somedata)` where `X` is output index, see example bellow:\n\t- first output--> `send(somedata)` or `$.send('output', somedata)`\n\t- second output --> `$.send('output2', somedata)`\n\t- ...\n\t- 5th output --> `$.send('output5', somedata)`\n\t- etc.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.outputs__type:number\" class=\"m\">Number of outputs</div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"algorithm": "<script total>\n\n\texports.id = 'algorithm';\n\texports.name = 'Algorithm';\n\texports.group = 'TypeRefinery';\n\texports.version = '1';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total.js';\n\texports.config = { endpoint: '', algorithm: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = {algorithm: {\n\t\t\t\tendpoint: config.endpoint,\n\t\t\t\talgorithm: config.algorithm\n\t\t\t}};\n\t\t\tinstance.send('output', data);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.endpoint__required:1\" class=\"m\">Endpoint</div>\n\t\t<div class=\"ui-input-label\">Algorithm:</div>\n\t\t<div data---=\"codemirror__?.algorithm__type:python;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"c782477b1": "<script total>\n\n\texports.name = 'Request';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'fas fa-cloud-download';\n\texports.author = 'Total.js';\n\texports.config = { url: '', method: 'GET', dnscache: true, insecure: false, nocookies: true, xhr: false, parse: true, timeout: 10000, limit: 1024 * 500, responsebody: true, headers: {}, cookies: {}, serialize: null, send: 'all' };\n\texports.inputs = [{ id: 'payload', name: 'Payload' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar opt = {};\n\n\t\t\tfor (var key in config.headers) {\n\t\t\t\tif (!opt.headers)\n\t\t\t\t\topt.headers = {};\n\t\t\t\topt.headers[$.variables(key, true)] = $.variables(config.headers[key], true);\n\t\t\t}\n\n\t\t\tfor (var key in config.cookies) {\n\t\t\t\tif (!opt.cookies)\n\t\t\t\t\topt.cookies = {};\n\t\t\t\topt.cookies[$.variables(key, true)] = $.variables(config.cookies[key], true);\n\t\t\t}\n\n\t\t\topt.method = config.method;\n\t\t\topt.url = $.variables(config.url, true);\n\t\t\topt.cook = true;\n\n\t\t\tif (config.serialize) {\n\t\t\t\tswitch (config.serialize) {\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\topt.type = 'json';\n\t\t\t\t\t\tif (opt.method !== 'GET')\n\t\t\t\t\t\t\topt.body = JSON.stringify($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\t\topt.type = 'urlencoded';\n\t\t\t\t\t\tif (opt.method === 'GET')\n\t\t\t\t\t\t\topt.query = U.toURLEncode($.data);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\topt.body = U.toURLEncode($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\topt.type = 'raw';\n\t\t\t\t\t\topt.body = $.data;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.dnscache)\n\t\t\t\topt.dnscache = true;\n\n\t\t\tif (config.insecure)\n\t\t\t\topt.insecure = true;\n\n\t\t\tif (config.nocookies)\n\t\t\t\topt.nocookies = true;\n\n\t\t\tif (config.xhr)\n\t\t\t\topt.xhr = true;\n\n\t\t\tif (config.timeout)\n\t\t\t\topt.timeout = config.timeout;\n\n\t\t\tif (config.limit)\n\t\t\t\topt.limit = config.limit;\n\n\t\t\tif (config.send === 'chunks')\n\t\t\t\topt.custom = true;\n\n\t\t\topt.callback = function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\t$.data = err + '';\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (opt.custom) {\n\t\t\t\t\tresponse.stream.on('data', data => $.send('response', data));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'headers') {\n\t\t\t\t\t$.send('response', response.headers);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'status') {\n\t\t\t\t\t$.send('response', response.status);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbody = response.body;\n\n\t\t\t\tif (config.parse) {\n\t\t\t\t\tvar type = response.headers['content-type'] || '';\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tvar index = type.lastIndexOf(';');\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\ttype = type.substring(0, index).trim();\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type.toLowerCase()) {\n\t\t\t\t\t\tcase 'text/xml':\n\t\t\t\t\t\tcase 'application/xml':\n\t\t\t\t\t\t\tbody = body ? body.parseXML(true) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = body ? DEF.parsers.urlencoded(body) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tcase 'text/json':\n\t\t\t\t\t\t\tbody = body ? body.parseJSON(true) : null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbody = body && body.isJSON() ? body.parseJSON(true) : body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tswitch (config.send) {\n\t\t\t\t\tcase 'all':\n\t\t\t\t\t\t$.data = { headers: response.headers, cookies: response.cookies, status: response.status, host: response.host, body: body };\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'response':\n\t\t\t\t\t\t$.data = body;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$.send('response');\n\t\t\t};\n\n\t\t\tREQUEST(opt);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; overflow-wrap: break-word; }\n\t.CLASS .status span { padding: 2px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component makes a HTTP request. The response data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer class=\"hidden\" data-bind=\"CONFIG.url__show\">\n\t\t<div class=\"status\" data-bind=\"CONFIG__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"monospace\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding bg-smoke npb\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__dirsource:GET|GET,POST|POST,PUT|PUT,DELETE|DELETE,PATCH|PATCH,API|API;required:1\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\"><b>URL address</b></div>\n\t\t\t\t<div class=\"help\">URL address supports dynamic variables in the form <code>{key}</code></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__type:number\">Timeout</div>\n\t\t\t\t<div class=\"help\"><i class=\"far fa-clock-o\"></i><span data-bind=\"?.timeout__text:((value||0)/1000).floor(2)+' sec.'\"></span><br />Timeout <b>in milliseconds</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__type:number\">Max. size</div>\n\t\t\t\t<div class=\"help\"><i class=\"fas fa-calculator\"></i><span data-bind=\"?.limit__text:(value||0).filesize()\"></span><br />Response max. size <b>in bytes</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,response|Response body,chunks|Chunks of buffer,headers|Headers only,status|Status code\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.serialize__dirsource:json|JSON,urlencoded|URL encode,buffer|Buffer;dirraw:1;placeholder:Choose serialization;dirempty:None\" class=\"m\">Data serialization</div>\n\t\t<div data---=\"keyvalue__?.headers__placeholderkey:Header name;placeholdervalue:Header value and press enter\">Headers</div>\n\t\t<div class=\"help m\">Headers support dynamic variables in the form <code>{key}</code></div>\n\t\t<div data---=\"keyvalue__?.cookies__placeholderkey:Cookie name;placeholdervalue:Cookie value and press enter\">Cookies</div>\n\t\t<div class=\"help m\">Cookies support dynamic variables in the form <code>{key}</code></div>\n\t\t<hr />\n\t\t<div data---=\"input__?.parse__type:checkbox\">Parse Response to Object</div>\n\t\t<div data---=\"input__?.dnscache__type:checkbox\">Enable DNS cache</div>\n\t\t<div data---=\"input__?.insecure__type:checkbox\">Allow insecure connection</div>\n\t\t<div data---=\"input__?.xhr__type:checkbox\">Add XHR header</div>\n\t</div>\n</settings>",
			"code": "<script total>\n\n\texports.id = 'code';\n\texports.name = 'Code';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total.js';\n\texports.config = { outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send(\\'output\\', data); // or simply send(data); which uses the first output\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'algorithm', name: 'Algorithm' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.throw(e);\n\t\t\t\t\t$.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = [];\n\t\t\tfor (let i = 1; i <= config.outputs; i++)\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i === 1 ? '' : i), name: 'Output #' + i });\n\t\t\tinstance.save();\n\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n\n\tTo send data to the default output use `send(somedata);`\n\tTo send data to specific output when number of outputs > 1 use `$.send('outputX', somedata)` where `X` is output index, see example bellow:\n\t- first output--> `send(somedata)` or `$.send('output', somedata)`\n\t- second output --> `$.send('output2', somedata)`\n\t- ...\n\t- 5th output --> `$.send('output5', somedata)`\n\t- etc.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.outputs__type:number\" class=\"m\">Number of outputs</div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"transformer": "<script total>\n\n\texports.id = 'transformer';\n\texports.name = 'Transformer';\n\texports.group = 'TypeRefinery';\n\texports.version = '1';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total.js';\n\texports.config = { code: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.throw(e);\n\t\t\t\t\t$.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>"
		},
		"design": {
			"il60n916w": {
				"id": "il60n916w",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 785,
				"y": 331,
				"component": "c8z1te8d94",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il60n9c5m": {
				"id": "il60n9c5m",
				"config": {
					"random": true,
					"type": "string",
					"data": "",
					"restart": false
				},
				"x": 51,
				"y": 150,
				"component": "c99ly15194",
				"connections": {
					"output": [
						{
							"id": "il60ntulm",
							"index": "input"
						},
						{
							"id": "il60o6tx7",
							"index": "input"
						},
						{
							"id": "il60q0lih",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "Triggers",
					"name": "Trigger",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il60ntulm": {
				"id": "il60ntulm",
				"config": {
					"query": "match $a isa log, has logName 'L1';\n$b isa event, has eventName $c;\n$d (owner: $a, item: $b) isa trace,\nhas traceId $e, has index $f;\noffset 0; limit 10;"
				},
				"x": 347,
				"y": 80,
				"component": "query",
				"connections": {
					"output": [
						{
							"id": "il60obc5l",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "TypeRefinery",
					"name": "Query",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il60o6tx7": {
				"id": "il60o6tx7",
				"config": {
					"port": "8729",
					"host": "localhost",
					"database": "typerefinery",
					"query": ""
				},
				"x": 351,
				"y": 190,
				"component": "connection",
				"connections": {
					"output": [
						{
							"id": "il60obc5l",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "TypeRefinery",
					"name": "Connection",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il60obc5l": {
				"id": "il60obc5l",
				"config": {
					"outputs": 1,
					"code": "console.log(instance.module.inputs);\nif (!MAIN[instance.id])\n    MAIN[instance.id] = [];\n\nvar tmp = MAIN[instance.id];\n\n// If the array will contain more than 2 items, then the temporary data will be sent next\nif (tmp.push(data) > 2)\n{\n\tlet output = {};\n\ttmp.splice(0).forEach(el => {\n\t\t\tObject.assign(output, el);\n\t});\n\tconst payload = {\n    \"dbhost\": output.connection.host,\n    \"dbport\": output.connection.port,\n    \"dbdatabase\": output.connection.database,\n    \"dbquery\": output.query,\n\t\"algorithm\": output.algorithm.algorithm,\n    \"algorithmrequirements\": \"argparse\\nloguru\",\n    \"returnoutput\": \"output\"\n};\n    $.send('output', payload);\n}\nelse\n    $.destroy();"
				},
				"x": 600,
				"y": 208,
				"component": "cb85xac2e2",
				"connections": {
					"output": [
						{
							"id": "il60n916w",
							"index": "input"
						},
						{
							"id": "il60q7cb1",
							"index": "payload"
						}
					]
				},
				"outputs": [
					{
						"id": "output",
						"name": "Output #1"
					}
				],
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il60q0lih": {
				"id": "il60q0lih",
				"config": {
					"endpoint": "http://localhost:8000/algorithm",
					"algorithm": "from typedb.client import *\nfrom loguru import logger as Logger\nfrom posixpath import basename\nimport json\nimport copy\nimport os\nimport sys\nimport argparse\nfrom datetime import datetime\ngquery = \"match $a isa log, has logName 'L1'; \"\ngquery += \"$b isa event, has eventName $c;\"\ngquery += \" $d (owner: $a, item: $b) isa trace, \"\ngquery += \" has traceId $t, has index $f; offset 0; limit 100;\"#  get; \"\ngroup_raw = [{\n    \"leaves\": [\n                    0\n                ],\n                \"colour_list\": \"Greys\",\n                \"level\": 7,\n                \"label\": \"hidden\"\n}]\n# function to collect all of the data out of the iterator\n# with read transaction object to use asRemote mode\ndef collect_answers(answer_iterator, r_tx, logger: Logger):\n    logger.info(f'into collect answers, iterator -> {answer_iterator}')\n    res = []\n    layers = []\n    layer = []\n    for answer in answer_iterator:\n        dict_answer = answer.map()\n        #logger.info(f'dict answer is {dict_answer}')\n        for key, thing in dict_answer.items():\n            logger.info(f'key, things is {key}, {thing}')\n            # pull entity data\n            if thing.is_entity():\n                ent = {}\n                ent['type'] = 'entity'\n                ent['symbol'] = key\n                ent['G_id'] = thing.get_iid()\n                ent['G_name'] = thing.get_type().get_label().name()\n                logger.info((f'entity name is {ent[\"G_name\"]}'))\n                logger.info((f'thing value is {thing}'))\n                att_obj = thing.as_remote(r_tx).get_has()\n                att = []\n                for a in att_obj:\n                    att.append(a.get_iid())\n                ent['has'] = att\n                res.append(ent)\n                layer.append(ent)\n                logger.info(f'ent -> {ent}')\n            # pull attribute data\n            elif thing.is_attribute():\n                att = {}\n                att['type'] = 'attribute'\n                att['symbol'] = key\n                att['G_id'] = thing.get_iid()\n                att['G_name'] = thing.get_type().get_label().name()\n                att['value'] = thing.get_value()\n                att['datatype'] = thing.get_type().get_value_type().name\n                att_obj = thing.as_remote(r_tx).get_has()\n                attrib = []\n                for a in att_obj:\n                    attrib.append(a.get_iid())\n                att['has'] = attrib\n                res.append(att)\n                layer.append(att)\n                logger.info(f'att -> {att}')\n            # pull relation data\n            elif thing.is_relation():\n                rel = {}\n                rel['type'] = 'relation'\n                rel['symbol'] = key\n                rel['G_id'] = thing.get_iid()\n                rel['G_name'] = thing.get_type().get_label().name()\n                att_obj = thing.as_remote(r_tx).get_has()\n                att = []\n                for a in att_obj:\n                    att.append(a.get_iid())\n                rel['has'] = att\n                links = thing.as_remote(r_tx).get_players_by_role_type()\n                logger.info(f' links are -> {links}')\n                edges = {}\n                for edge_key, edge_thing in links.items():\n                    logger.info(f' edge key is -> {edge_key}')\n                    logger.info(f' edge_thing is -> {list(edge_thing)}')\n                    edges[edge_key.get_label().name()] = [e.get_iid() for e in list(edge_thing)]\n                rel['edges'] = edges\n                res.append(rel)\n                layer.append(rel)\n                logger.info(f'rel -> {rel}')\n            # else log out error condition\n            else:\n                logger.info(f'Error key is {key}, thing is {thing}')\n        layers.append(layer)\n    return res\n# function to filter the links, so that there are none pointing to data not included\ndef filter_links(reduced_at, reduced_en, re):\n    #first build list of all node id's\n    att_list = [e['G_id'] for e in reduced_at]\n    ent_list = [e['G_id'] for e in reduced_en]\n    rel_list = [e['G_id'] for e in re]\n    node_list = att_list + ent_list + rel_list\n    #check each input list to delete those not in node_list\n    for item in reduced_en:\n        for link in item['has']:\n            if link not in node_list:\n                item['has'].remove(link)\n    for item in re:\n        for link in item['has']:\n            if link not in node_list:\n                item['has'].remove(link)\n    return reduced_at, reduced_en, re\n# function to convert the list of results into nodes and edges\ndef convert_res_to_graph(res, logger: Logger):\n    edges = []\n    nodes = []\n    en = [e for e in res if e['type'] == 'entity']\n    at = [e for e in res if e['type'] == 'attribute']\n    re = [e for e in res if e['type'] == 'relation']\n    # remove duplicates from attributes\n    reduced_at = [v for i,v in enumerate(at) if v not in at[i+1:] ]\n    reduced_en = [v for i,v in enumerate(en) if v not in en[i+1:] ]\n    # find number of types\n    G_types = {}\n    G_types['entity'] = list(set([v['G_name'] for v in reduced_en]))\n    G_types['attribute'] = list(set([v['G_name'] for v in reduced_at]))\n    G_types['relation'] = list(set([v['G_name'] for v in re]))\n    #filter out has links due to variables given thing, or attributes not expressed in the original query\n    reduced_at, reduced_en, re = filter_links(reduced_at, reduced_en, re)\n    # build edges list for attributes\n    for e in reduced_en:\n        own = e['has']\n        source = e['G_id']\n        name = 'has'\n        for o in own:\n            edge = {}\n            edge['G_target'] = o\n            edge['role'] = name\n            edge['G_source'] = source\n            edges.append(edge)\n    for a in reduced_at:\n        own = a['has']\n        source = a['G_id']\n        name = 'has'\n        for o in own:\n            edge = {}\n            edge['G_target'] = o\n            edge['role'] = name\n            edge['G_source'] = source\n            edges.append(edge)\n    for r in re:\n        own = r['has']\n        source = r['G_id']\n        name = 'has'\n        for o in own:\n            edge = {}\n            edge['G_target'] = o\n            edge['role'] = name\n            edge['G_source'] = source\n            edges.append(edge)\n    # add edges from relations\n    for r in re:\n        source = r['G_id']\n        edge_dict = r['edges']\n        for k, e in edge_dict.items():\n            edge = {}\n            edge['G_target'] = e[0]\n            edge['role'] = k\n            edge['G_source'] = source\n            edges.append(edge)\n    # add all nodes together\n    nodes = reduced_en + reduced_at + re\n    for node in nodes:\n        node['dtype'] = 'actual'\n    return nodes, edges, G_types\ndef get_node_id(nodes, G_id):\n    for index, element in enumerate(nodes):\n        if element['G_id'] == G_id:\n            return index;\ndef convert_res_to_cola(nodes, edges, G_types, logger: Logger):\n    # convert edges to id\n    for edge in edges:\n        edge['target'] = get_node_id(nodes, edge['G_target'])\n        edge['source'] = get_node_id(nodes, edge['G_source'])\n    for index, element in enumerate(nodes):\n        element['id'] = index\n    # find actual attributes in edges\n    att_list = []\n    for index, node in enumerate(nodes):\n        if node['type'] == 'attribute':\n            att_list.append(index)\n    for edge in edges:\n        edge['is_act_Attr'] = False\n        for att in att_list:\n            if edge['target'] == att or edge['source'] == att:\n                edge['is_act_Attr'] = True\n                break\n    temp_edges = copy.deepcopy(edges)\n    for t_edge in temp_edges:\n        target_node = nodes[t_edge['target']]\n        t_edge['target_name'] = target_node['G_name']\n        source_node = nodes[t_edge['source']]\n        t_edge['source_name'] = source_node['G_name']\n        if t_edge['role'] == 'has' or source_node['type'] == 'relation':\n            t_edge['direction'] = 'down'\n        else:\n            t_edge['direction'] = 'up'\n        t_edge.pop('target')\n        t_edge.pop('source')\n        t_edge.pop('G_target')\n        t_edge.pop('G_source')\n        t_edge.pop('is_act_Attr')\n    myUniqueSet = [dict(s) for s in set(frozenset(myObject.items()) for myObject in temp_edges)]\n    logger.info(f\"myUniqueSet:, {myUniqueSet}\")\n    G_types['schema'] = myUniqueSet\n    logger.info('==========================================================================================')\n    logger.info('+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')\n    logger.info(f'g-types is -> {G_types}')\n    logger.info('==========================================================================================')\n    logger.info('+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')\n    logger.info(f'nodes is ->  {nodes}')\n    logger.info('==========================================================================================')\n    logger.info('+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')\n    logger.info(f'edges is -> {edges}')\n    logger.info('==========================================================================================')\n    logger.info('+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')\n    colaGraph = {}\n    basic = {}\n    basic['nodes'] = nodes\n    basic['links'] = edges\n    basic['G_types'] = G_types\n    basic['groups'] = []\n    basic['constraints'] = []\n    colaGraph['basic'] = basic\n    colaGraph['grouped'] = {}\n    return colaGraph\n@Logger.catch\ndef get_data(dbhost, dbport, dbdatabase, dbquery, logger: Logger):\n    typeDBConnect = f'{dbhost}:{dbport}'\n    with TypeDB.core_client(typeDBConnect) as client:\n        with client.session(dbdatabase, SessionType.DATA) as session:\n            with session.transaction(TransactionType.READ) as read_transaction:\n                answer_iterator = read_transaction.query().match(dbquery)\n                res = collect_answers(answer_iterator, read_transaction, logger)\n                nodes, edges, G_types = convert_res_to_graph(res, logger)\n                colaGraph = convert_res_to_cola(nodes, edges, G_types, logger)\n    ## save file for reference\n    # with open(\"g_to_webcola.json\", \"w\") as outfile:\n    #     json.dump(colaGraph, outfile)\n    return colaGraph\n@Logger.catch\ndef main(dbhost, dbport, dbdatabase, dbquery, outputfile, logger: Logger):\n  # setup logger for execution\n  colaGraph = get_data(dbhost, dbport, dbdatabase, dbquery, logger)\n  basic = colaGraph['basic']\n  with open(outputfile, \"w\") as outfile:\n      json.dump(colaGraph, outfile)\n  logger.info('================ Schema ==================')\n  logger.info(f\"{basic['G_types']}\")"
				},
				"x": 345,
				"y": 299,
				"component": "algorithm",
				"connections": {
					"output": [
						{
							"id": "il60obc5l",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "TypeRefinery",
					"name": "Algorithm",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il60q7cb1": {
				"id": "il60q7cb1",
				"config": {
					"url": "http://localhost:8000/algorithm",
					"method": "POST",
					"dnscache": true,
					"insecure": false,
					"nocookies": true,
					"xhr": false,
					"parse": true,
					"timeout": 100000,
					"limit": 512000,
					"responsebody": true,
					"headers": {},
					"cookies": {},
					"serialize": "json",
					"send": "all"
				},
				"x": 829,
				"y": 100,
				"component": "c782477b1",
				"connections": {
					"response": [
						{
							"id": "il60q7qr6",
							"index": "input"
						},
						{
							"id": "il6365oqm",
							"index": "input"
						}
					],
					"error": [
						{
							"id": "il60q7v89",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fas fa-cloud-download",
					"group": "Common",
					"name": "Request",
					"inputs": [
						{
							"id": "payload",
							"name": "Payload"
						}
					],
					"outputs": [
						{
							"id": "response",
							"name": "Response"
						},
						{
							"id": "error",
							"name": "Error"
						}
					]
				}
			},
			"il60q7qr6": {
				"id": "il60q7qr6",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1144,
				"y": 249,
				"component": "c8z1te8d94",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il60q7v89": {
				"id": "il60q7v89",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1157,
				"y": 14.999999999999993,
				"component": "c8z1te8d94",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il6365oqm": {
				"id": "il6365oqm",
				"config": {
					"code": "const GRAPH_DATA = data.body;\n$.send('output', GRAPH_DATA);\n\n\n// var svg = d3.select(body).append(\"svg\"),\n\t\t\t\t// width = +svg.attr(\"width\") || 960,\n\t\t\t\t// height = +svg.attr(\"height\") || 500\n\t\t\t//   svg.attr(\"width\", width).attr(\"height\", height)\n\t\t\t//   var color = d3.scaleOrdinal(d3.schemeCategory20)\n\t\t\t//   var simulation = d3\n\t\t\t\t// .forceSimulation()\n\t\t\t\t// .force(\n\t\t\t\t//   \"link\",\n\t\t\t\t//   d3.forceLink().id(function (d) {\n\t\t\t\t\t// return d.label\n\t\t\t\t//   })\n\t\t\t\t// )\n\t\t\t\t// .force(\"charge\", d3.forceManyBody())\n\t\t\t\t// .force(\"center\", d3.forceCenter(width / 2, height / 2))\n\t\t\t//   d3.json(\n\t\t\t\t// \"src/components/Transformer/D3/miserables.json\",\n\t\t\t\t// function (error, graph) {\n\t\t\t\t//   if (error) throw error\n\t\t\t\t//   var link = svg\n\t\t\t\t\t// .append(\"g\")\n\t\t\t\t\t// .attr(\"class\", \"links\")\n\t\t\t\t\t// .selectAll(\"line\")\n\t\t\t\t\t// .data(graph.links)\n\t\t\t\t\t// .enter()\n\t\t\t\t\t// .append(\"line\")\n\t\t\t\t\t// .attr(\"stroke-width\", function (d) {\n\t\t\t\t\t//   return Math.sqrt(d.value)\n\t\t\t\t\t// })\n\t\t\t\t\t// .attr(\"stroke\", \"#999\")\n\t\t\t\t//   var node = svg\n\t\t\t\t\t// .append(\"g\")\n\t\t\t\t\t// .attr(\"class\", \"nodes\")\n\t\t\t\t\t// .selectAll(\"circle\")\n\t\t\t\t\t// .data(graph.nodes)\n\t\t\t\t\t// .enter()\n\t\t\t\t\t// .append(\"circle\")\n\t\t\t\t\t// .attr(\"r\", 5)\n\t\t\t\t\t// .attr(\"fill\", function (d) {\n\t\t\t\t\t//   return color(d.group)\n\t\t\t\t\t// })\n\t\t\t\t\t// .call(\n\t\t\t\t\t//   d3\n\t\t\t\t\t\t// .drag()\n\t\t\t\t\t\t// .on(\"start\", dragstarted)\n\t\t\t\t\t\t// .on(\"drag\", dragged)\n\t\t\t\t\t\t// .on(\"end\", dragended)\n\t\t\t\t\t// )\n\t\t\t\t//   node.append(\"title\").text(function (d) {\n\t\t\t\t\t// return d.label\n\t\t\t\t//   })\n\t\t\t\t//   node.on(\"click\", (e) => {\n\t\t\t\t\t// self.nodeData = {\n\t\t\t\t\t//   label: e.label,\n\t\t\t\t\t//   index: e.index,\n\t\t\t\t\t// }\n\t\t\t\t//   })\n\t\t\t\t//   simulation.nodes(graph.nodes).on(\"tick\", ticked)\n\t\t\t\t//   simulation.force(\"link\").links(graph.links)\n\t\t\t\t//   function ticked() {\n\t\t\t\t\t// link\n\t\t\t\t\t//   .attr(\"x1\", function (d) {\n\t\t\t\t\t\t// return d.source.x\n\t\t\t\t\t//   })\n\t\t\t\t\t//   .attr(\"y1\", function (d) {\n\t\t\t\t\t\t// return d.source.y\n\t\t\t\t\t//   })\n\t\t\t\t\t//   .attr(\"x2\", function (d) {\n\t\t\t\t\t\t// return d.target.x\n\t\t\t\t\t//   })\n\t\t\t\t\t//   .attr(\"y2\", function (d) {\n\t\t\t\t\t\t// return d.target.y\n\t\t\t\t\t//   })\n\t\t\t\t\t// node\n\t\t\t\t\t//   .attr(\"cx\", function (d) {\n\t\t\t\t\t\t// return d.x\n\t\t\t\t\t//   })\n\t\t\t\t\t//   .attr(\"cy\", function (d) {\n\t\t\t\t\t\t// return d.y\n\t\t\t\t\t//   })\n\t\t\t\t//   }\n\t\t\t\t// }\n\t\t\t//   )\n\t\t\t//   function dragstarted(d) {\n\t\t\t\t// if (!d3.event.active) simulation.alphaTarget(0.3).restart()\n\t\t\t\t// d.fx = d.x\n\t\t\t\t// d.fy = d.y\n\t\t\t//   }\n\t\t\t//   function dragged(d) {\n\t\t\t\t// d.fx = d3.event.x\n\t\t\t\t// d.fy = d3.event.y\n\t\t\t//   }\n\t\t\t//   function dragended(d) {\n\t\t\t\t// if (!d3.event.active) simulation.alphaTarget(0)\n\t\t\t\t// d.fx = null\n\t\t\t\t// d.fy = null\n\t\t\t//   }"
				},
				"x": 1293,
				"y": 128,
				"component": "transformer",
				"connections": {
					"output": [
						{
							"id": "il63690me",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "TypeRefinery",
					"name": "Transformer",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il63690me": {
				"id": "il63690me",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1698,
				"y": 169,
				"component": "c8z1te8d94",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il844pro9": {
				"id": "il844pro9",
				"config": {
					"random": true,
					"type": "string",
					"data": "",
					"restart": false
				},
				"x": 113,
				"y": 353,
				"component": "c99ly15194",
				"connections": {},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "Triggers",
					"name": "Trigger",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"groups": [],
			"paused": {}
		},
		"variables": {},
		"sources": {},
		"origin": "http://localhost:8111",
		"dtcreated": "2022-07-25T11:00:09.159Z",
		"size": 44438,
		"variables2": {},
		"directory": "./database",
		"sandbox": false
	},
	"fs07f001ef41d": {
		"paused": false,
		"id": "fs07f001ef41d",
		"reference": "",
		"author": "",
		"group": "",
		"icon": "far fa-chart-bar",
		"color": "#5C0F32",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "TypeRefinery_Linear",
		"components": {
			"query": "<script total>\n\n\texports.id = 'query';\n\texports.name = 'Query';\n\texports.group = 'TypeRefinery';\n\texports.version = '1';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total.js';\n\texports.config = { query: '' };\n\texports.inputs = [{ id: 'connection', name: 'Connection' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = {\n\t\t\t\t...$.data,\n\t\t\t\tdbquery: config.query\n\t\t\t};\n\t\t\tinstance.send('output', data);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"ui-input-label\">Query:</div>\n\t\t<div data---=\"codemirror__?.query__type:tql;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"connection": "<script total>\n\n\texports.id = 'connection';\n\texports.name = 'Connection';\n\texports.group = 'TypeRefinery';\n\texports.version = '1';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total.js';\n\texports.config = { port: '', host: '', database: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\t\tconst { TypeDB, SessionType } = require(\"typedb-client\");\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = {\n\t\t\t\tdbport: config.port,\n\t\t\t\tdbhost: config.host,\n\t\t\t\tdbdatabase: config.database\n\t\t\t};\n\t\t\tinstance.send('output', data);\n\t\t};\n\n\t\tinstance.call = async function(data, answer) {\n\t\t\tconst client = TypeDB.coreClient(\"localhost:8729\");\n  \t\t\tlet databases = await client.databases.all();\n\t\t\tconst output = databases.map(el => ({id: el._name, name: el._name}))\n            answer(output);\n        };\n\n\t\tinstance.configure = function() {\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\n</readme>\n<script>\n    // yourdatabase is the name of your component in lower-case\n    ON('configure_connection', function(data) {\n        // Global exports.call\n        // data.call(function(response) {\n//             SET('%yourdatabase', response);\n//         }, true);\n\n        // Private instance.call (from the existing instance)\n        data.call(function(response) {\n            SET('%yourdatabase', response);\n        });\n    });\n</script>\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.host__required:1\" class=\"m\">Host</div>\n\t\t<div data---=\"input__?.port__required:1\" class=\"m\">Port</div>\n\t\t<div data---=\"input__?.database__dirsource:%yourdatabase;dirraw:1;placeholder:Choose a database;dirempty:No database\" class=\"m\"><b>Database</b></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"algorithm": "<script total>\n\n\texports.id = 'algorithm';\n\texports.name = 'Algorithm';\n\texports.group = 'TypeRefinery';\n\texports.version = '1';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total.js';\n\texports.config = { algorithm: '' };\n\texports.inputs = [{ id: 'query', name: 'Query' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = {\n\t\t\t\t...$.data,\n\t\t\t\talgorithm: config.algorithm\n\t\t\t};\n\t\t\tinstance.send('output', data);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"ui-input-label\">Algorithm:</div>\n\t\t<div data---=\"codemirror__?.algorithm__type:python;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"c5dxc3546a": "<script total>\n\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '2';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', restart: false };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n</body>",
			"cag5c630de": "<script total>\n\n\texports.name = 'Print JSON';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-print';\n\texports.author = 'Martin Smola';\n\texports.config = { repo: false, data: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\toutput && instance.status(output);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.status('');\n\t\t}\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer > div { margin: 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\n\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<readme>\nThe component prints incoming data in a JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\n\t</div>\n</settings>\n\n<script>\n\tFUNC.printjson_click = function(type, data) { // type = path/data\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\n\t};\n\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\n\t\tvar el = $(this);\n\t\tvar iscopy = el.hclass('fa-copy');\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\n\t\tsetTimeout(function(){\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\n\t\t}, 2000);\n\t});\n</script>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\n\t</footer>\n</body>",
			"caxn8fd4db": "<script total>\n\n\texports.id = 'code';\n\texports.name = 'Code';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total.js';\n\texports.config = { outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send(\\'output\\', data); // or simply send(data); which uses the first output\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.throw(e);\n\t\t\t\t\t$.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = [];\n\t\t\tfor (let i = 1; i <= config.outputs; i++)\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i === 1 ? '' : i), name: 'Output #' + i });\n\t\t\tinstance.save();\n\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n\n\tTo send data to the default output use `send(somedata);`\n\tTo send data to specific output when number of outputs > 1 use `$.send('outputX', somedata)` where `X` is output index, see example bellow:\n\t- first output--> `send(somedata)` or `$.send('output', somedata)`\n\t- second output --> `$.send('output2', somedata)`\n\t- ...\n\t- 5th output --> `$.send('output5', somedata)`\n\t- etc.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.outputs__type:number\" class=\"m\">Number of outputs</div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"api_payload": "<script total>\n\n\texports.id = 'api_payload';\n\texports.name = 'API Payload';\n\texports.group = 'TypeRefinery';\n\texports.version = '3';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total.js';\n\texports.config = { code: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.throw(e);\n\t\t\t\t\t$.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"czd1v94ac4": "<script total>\n\n\texports.name = 'Request';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'fas fa-cloud-download';\n\texports.author = 'Total.js';\n\texports.config = { url: '', method: 'GET', dnscache: true, insecure: false, nocookies: true, xhr: false, parse: true, timeout: 10000, limit: 1024 * 500, responsebody: true, headers: {}, cookies: {}, serialize: null, send: 'all' };\n\texports.inputs = [{ id: 'payload', name: 'Payload' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar opt = {};\n\n\t\t\tfor (var key in config.headers) {\n\t\t\t\tif (!opt.headers)\n\t\t\t\t\topt.headers = {};\n\t\t\t\topt.headers[$.variables(key, true)] = $.variables(config.headers[key], true);\n\t\t\t}\n\n\t\t\tfor (var key in config.cookies) {\n\t\t\t\tif (!opt.cookies)\n\t\t\t\t\topt.cookies = {};\n\t\t\t\topt.cookies[$.variables(key, true)] = $.variables(config.cookies[key], true);\n\t\t\t}\n\n\t\t\topt.method = config.method;\n\t\t\topt.url = $.variables(config.url, true);\n\t\t\topt.cook = true;\n\n\t\t\tif (config.serialize) {\n\t\t\t\tswitch (config.serialize) {\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\topt.type = 'json';\n\t\t\t\t\t\tif (opt.method !== 'GET')\n\t\t\t\t\t\t\topt.body = JSON.stringify($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\t\topt.type = 'urlencoded';\n\t\t\t\t\t\tif (opt.method === 'GET')\n\t\t\t\t\t\t\topt.query = U.toURLEncode($.data);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\topt.body = U.toURLEncode($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\topt.type = 'raw';\n\t\t\t\t\t\topt.body = $.data;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.dnscache)\n\t\t\t\topt.dnscache = true;\n\n\t\t\tif (config.insecure)\n\t\t\t\topt.insecure = true;\n\n\t\t\tif (config.nocookies)\n\t\t\t\topt.nocookies = true;\n\n\t\t\tif (config.xhr)\n\t\t\t\topt.xhr = true;\n\n\t\t\tif (config.timeout)\n\t\t\t\topt.timeout = config.timeout;\n\n\t\t\tif (config.limit)\n\t\t\t\topt.limit = config.limit;\n\n\t\t\tif (config.send === 'chunks')\n\t\t\t\topt.custom = true;\n\n\t\t\topt.callback = function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\t$.data = err + '';\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (opt.custom) {\n\t\t\t\t\tresponse.stream.on('data', data => $.send('response', data));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'headers') {\n\t\t\t\t\t$.send('response', response.headers);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'status') {\n\t\t\t\t\t$.send('response', response.status);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbody = response.body;\n\n\t\t\t\tif (config.parse) {\n\t\t\t\t\tvar type = response.headers['content-type'] || '';\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tvar index = type.lastIndexOf(';');\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\ttype = type.substring(0, index).trim();\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type.toLowerCase()) {\n\t\t\t\t\t\tcase 'text/xml':\n\t\t\t\t\t\tcase 'application/xml':\n\t\t\t\t\t\t\tbody = body ? body.parseXML(true) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = body ? DEF.parsers.urlencoded(body) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tcase 'text/json':\n\t\t\t\t\t\t\tbody = body ? body.parseJSON(true) : null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbody = body && body.isJSON() ? body.parseJSON(true) : body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tswitch (config.send) {\n\t\t\t\t\tcase 'all':\n\t\t\t\t\t\t$.data = { headers: response.headers, cookies: response.cookies, status: response.status, host: response.host, body: body };\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'response':\n\t\t\t\t\t\t$.data = body;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$.send('response');\n\t\t\t};\n\n\t\t\tREQUEST(opt);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; overflow-wrap: break-word; }\n\t.CLASS .status span { padding: 2px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component makes a HTTP request. The response data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer class=\"hidden\" data-bind=\"CONFIG.url__show\">\n\t\t<div class=\"status\" data-bind=\"CONFIG__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"monospace\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding bg-smoke npb\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__dirsource:GET|GET,POST|POST,PUT|PUT,DELETE|DELETE,PATCH|PATCH,API|API;required:1\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\"><b>URL address</b></div>\n\t\t\t\t<div class=\"help\">URL address supports dynamic variables in the form <code>{key}</code></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__type:number\">Timeout</div>\n\t\t\t\t<div class=\"help\"><i class=\"far fa-clock-o\"></i><span data-bind=\"?.timeout__text:((value||0)/1000).floor(2)+' sec.'\"></span><br />Timeout <b>in milliseconds</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__type:number\">Max. size</div>\n\t\t\t\t<div class=\"help\"><i class=\"fas fa-calculator\"></i><span data-bind=\"?.limit__text:(value||0).filesize()\"></span><br />Response max. size <b>in bytes</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,response|Response body,chunks|Chunks of buffer,headers|Headers only,status|Status code\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.serialize__dirsource:json|JSON,urlencoded|URL encode,buffer|Buffer;dirraw:1;placeholder:Choose serialization;dirempty:None\" class=\"m\">Data serialization</div>\n\t\t<div data---=\"keyvalue__?.headers__placeholderkey:Header name;placeholdervalue:Header value and press enter\">Headers</div>\n\t\t<div class=\"help m\">Headers support dynamic variables in the form <code>{key}</code></div>\n\t\t<div data---=\"keyvalue__?.cookies__placeholderkey:Cookie name;placeholdervalue:Cookie value and press enter\">Cookies</div>\n\t\t<div class=\"help m\">Cookies support dynamic variables in the form <code>{key}</code></div>\n\t\t<hr />\n\t\t<div data---=\"input__?.parse__type:checkbox\">Parse Response to Object</div>\n\t\t<div data---=\"input__?.dnscache__type:checkbox\">Enable DNS cache</div>\n\t\t<div data---=\"input__?.insecure__type:checkbox\">Allow insecure connection</div>\n\t\t<div data---=\"input__?.xhr__type:checkbox\">Add XHR header</div>\n\t</div>\n</settings>",
			"transformer": "<script total>\n\n\texports.id = 'transformer';\n\texports.name = 'Transformer';\n\texports.group = 'TypeRefinery';\n\texports.version = '1';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total.js';\n\texports.config = { code: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.throw(e);\n\t\t\t\t\t$.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cjgine9255": "<script total>\n\n\texports.name = 'Response';\n\texports.group = 'TypeRefinery';\n\texports.version = '1';\n\texports.icon = 'fa fa-print';\n\texports.author = 'Martin Smola';\n\texports.config = { repo: false, data: true };\n\texports.inputs = [{ id: 'input', name: 'API_Response' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\toutput && instance.status(output);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.status('');\n\t\t}\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer > div { margin: 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\n\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<readme>\nThe component prints incoming data in a JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\n\t</div>\n</settings>\n\n<script>\n\tFUNC.printjson_click = function(type, data) { // type = path/data\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\n\t};\n\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\n\t\tvar el = $(this);\n\t\tvar iscopy = el.hclass('fa-copy');\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\n\t\tsetTimeout(function(){\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\n\t\t}, 2000);\n\t});\n</script>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\n\t</footer>\n</body>",
			"connection1": "<script total>\n\n\texports.id = 'connection1';\n\texports.name = 'Connection1';\n\texports.group = 'TypeRefinery';\n\texports.version = '1';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total.js';\n\texports.config = { port: '', host: '', database: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\tconst { TypeDB, SessionType } = require(\"typedb-client\");\n\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = {\n\t\t\t\tdbport: config.port,\n\t\t\t\tdbhost: config.host,\n\t\t\t\tdbdatabase: config.database\n\t\t\t};\n\t\t\t// instance.send('output', data);\n\n\n\t\tlet databases = []\n\t\tasync function openSession () {\n\t\t\tconst client = TypeDB.coreClient(\"localhost:8729\");\n\t\t\tdatabases = await client.databases.all();\n\t\t\tconsole.log([{id: 'uo', name: 'uo'}])\n\n\t\t\tinstance.send('output', databases);\n\t\t\tREPO.modify_rules = [{id: 'uo', name: 'uo'}];\n\t\t\t//session is closed\n\t\t\tclient.close();\n\t\t};\n\t\t\topenSession()\n\n\t\t};\n\t\tyo = [{id: 'uo', name: 'uo'}]\n\t\tinstance.configure = function() {\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\n</readme>\n<script>\n\tframeworks = [{ id: 1, name: 'jComponent' }, { id: 2, name: 'Angular.js' }, { id: 3, name: 'React' }];\n\t    // yourdatabase is the name of your component in lower-case\n    ON('configure_connection1', function(data) {\n        // Global exports.call\n        data.call(function(response) {\n            SET('%yourdatabase', [{ id: 1, name: 'jComponent' }, { id: 2, name: 'Angular.js' }, { id: 3, name: 'React' }]);\n        }, true);\n\n        // Private instance.call (from the existing instance)\n        /*\n        data.call(function(response) {\n            SET('%yourdatabase', response);\n        });*/\n    });\n</script>\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__form.framework__placeholder:Choose a framework;dirsource:frameworks\" class=\"m\">Framework</div>\n\t\t<div data---=\"input__?.format__dirsource:yourdatabase\" class=\"m\"></div>\n\t</div>\n</settings>\n<script>\n\n</script>\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"c4jk0cef72": "<script total>\n\n\texports.name = 'API Database';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-database';\n\texports.version = '2';\n\texports.author = 'Total.js';\n\texports.config = { name: 'API Database', items: [] };\n\texports.inputs = [];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar cache = {};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar item = cache[$.input];\n\t\t\tif (!item) {\n\t\t\t\t$.destroy();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar builder = null;\n\t\t\tvar data = $.data;\n\t\t\tvar params = data.params || EMPTYOBJECT;\n\t\t\tvar query = data.query || EMPTYOBJECT;\n\t\t\tvar user = data.user || EMPTYOBJECT;\n\n\t\t\tdata = data.data || data.body;\n\n\t\t\tswitch (item.command) {\n\t\t\t\tcase 'create':\n\t\t\t\t\tbuilder = DB().insert(item.table, data);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'update':\n\t\t\t\t\tbuilder = DB().update(item.table, data);\n\t\t\t\t\titem.where && item.where(params, data, query, user, $.refs, $, builder);\n\t\t\t\t\titem.error && builder.error(item.error);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'remove':\n\t\t\t\t\tbuilder = DB().remove(item.table);\n\t\t\t\t\titem.where && item.where(params, data, query, user, $.refs, $, builder);\n\t\t\t\t\titem.error && builder.error(item.error);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'read':\n\t\t\t\t\tbuilder = DB().read(item.table);\n\t\t\t\t\titem.where && item.where(params, data, query, user, $.refs, $, builder);\n\t\t\t\t\titem.error && builder.error(item.error);\n\t\t\t\t\tif (item.sort) {\n\t\t\t\t\t\tfor (var m of item.sort)\n\t\t\t\t\t\t\tbuilder.sort(m[0], m[1]);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'query':\n\t\t\t\t\tbuilder = DB().find(item.table);\n\t\t\t\t\titem.where && item.where(params, data, query, user, $.refs, $, builder);\n\t\t\t\t\titem.error && builder.error(item.error);\n\t\t\t\t\titem.limit && builder.take(item.limit);\n\t\t\t\t\tif (item.sort) {\n\t\t\t\t\t\tfor (var m of item.sort)\n\t\t\t\t\t\t\tbuilder.sort(m[0], m[1]);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'list':\n\t\t\t\t\tbuilder = DB().list(item.table);\n\t\t\t\t\tbuilder.autoquery(query, item.allowed, item.sort ? (item.sort[0] + '_' + item.sort[1]) : null, item.limit || 100);\n\t\t\t\t\titem.where && item.where(params, data, query, user, $.refs, $, builder);\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (builder) {\n\t\t\t\tbuilder.callback(function(err, response) {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\t$.send('error', [{ error: err + '' }]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar path = item.path;\n\t\t\t\t\t\tif (path) {\n\t\t\t\t\t\t\tU.set($.data, path, response);\n\t\t\t\t\t\t\t$.send('output');\n\t\t\t\t\t\t} else\n\t\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else\n\t\t\t\t$.send('error', [{ error: 'Not configured' }]);\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tvar inputs = [];\n\t\t\tvar builder;\n\t\t\tvar tmp;\n\n\t\t\tfor (var item of config.items) {\n\n\t\t\t\tvar obj = {};\n\n\t\t\t\tobj.command = item.command;\n\t\t\t\tobj.table = item.table;\n\t\t\t\tobj.path = item.path;\n\t\t\t\tobj.limit = item.limit;\n\t\t\t\tobj.error = item.error;\n\n\t\t\t\tbuilder = [];\n\n\t\t\t\tfor (var m of item.where) {\n\t\t\t\t\tvar val = 'null';\n\t\t\t\t\tswitch (m.type) {\n\t\t\t\t\t\tcase '1':\n\t\t\t\t\t\t\tval = m.value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '2':\n\t\t\t\t\t\t\tval = '\\'' + m.value.replace(/'/g, '\\\\\\'') + '\\'';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '3':\n\t\t\t\t\t\t\tval = m.value.parseFloat();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '4':\n\t\t\t\t\t\t\tval = m.value.toLowerCase();\n\t\t\t\t\t\t\tval = val === '1' || m.value === 'true' || val === 'on';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '5':\n\t\t\t\t\t\t\tval = m.value.toLowerCase();\n\t\t\t\t\t\t\tval = val === 'now' ? 'new Date()' : m.value.parseDate('yyyy-MM-dd HH:mm:ss');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '6':\n\t\t\t\t\t\t\tval = 'null';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tbuilder.push('where(\\'{0}\\', \\'{1}\\', {2})'.format(m.name, m.comparer, val));\n\t\t\t\t}\n\n\t\t\t\tobj.where = builder.length ? new Function('params', 'data', 'query', 'user', 'refs', '$', 'builder', 'builder.' + builder.join('.')) : null;\n\n\t\t\t\ttmp = obj.sort;\n\t\t\t\tif (tmp) {\n\t\t\t\t\tobj.sort = [];\n\t\t\t\t\ttmp = tmp.split(/,|;/);\n\t\t\t\t\tfor (var m of tmp) {\n\t\t\t\t\t\tm = m.trim().split(' ');\n\t\t\t\t\t\tm[1] = (m[1] || '').toLowerCase() === 'asc';\n\t\t\t\t\t\tobj.sort.push(m);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tobj.fields = item.fields === '*' ? '' : item.fields;\n\t\t\t\tobj.allowed = '';\n\n\t\t\t\tif (item.filter && item.filter.length) {\n\t\t\t\t\tfor (var m of item.filter) {\n\t\t\t\t\t\ttmp = 'string';\n\t\t\t\t\t\tswitch (m.type) {\n\t\t\t\t\t\t\tcase '3':\n\t\t\t\t\t\t\t\ttmp = 'number';\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase '4':\n\t\t\t\t\t\t\t\ttmp = 'boolean';\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase '5':\n\t\t\t\t\t\t\t\ttmp = 'date';\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tobj.allowed += (obj.allowed ? ',' : '') + m.name + ':' + tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcache[item.id] = obj;\n\t\t\t\tinputs.push({ id: item.id, name: item.name });\n\t\t\t}\n\n\t\t\tvar prev = JSON.stringify(instance.inputs);\n\t\t\tvar curr = JSON.stringify(inputs);\n\n\t\t\tif (curr !== prev) {\n\t\t\t\tinstance.inputs = inputs;\n\t\t\t\tinstance.save();\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component can perform some operations on a database with the help of Total.js QueryBuilder. First, you must initialize the connection string for the database via QueryBuilder initialization.\n\n__Input data__:\n\n- `data {Object}` or `body {Object}` optional - payload\n- `query {Object}` optional - query data, key/value must be string\n- `params {Object}` optional - dynamic values, key/value must be string\n- `user {Object}` optional - a user instance\n\n__Output__:\n\n- `insert` returns Number\n- `update` returns Number\n- `remove` returns Number\n- `query` returns Array of Objects\n- `read` returns Object\n- `list` returns:\n\n```json\n{\n\titems: Array,\n\tpage: Number,\n\tpages: Number,\n\tcount: Number\n}\n```\n\nQuery parameters for the `List` operation can contain the below fields which can affect filtering according to the values defined in the dynamic filter.\n\n- `sort {String}` can contain field name with `_asc` or `_desc` value\n- `fields {String}` can return only specified fields separated by comma\n- `page {Number}` page number\n- `limit {Number}` max. items per page (default: max. limit)\n- `column_name=VALUE` enables dynamic filtering\n\n---\n\n__Good to know__: If the `data` (payload) can contain special key names in the form:\n\n- `+key` increments a value\n- `-key` decrements a value\n- `!key` performs toggle for boolean values\n- `>key` stores only greater value\n- `<key` stores only lower value\n</readme>\n\n<style>\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings .ui-listform-item .item { padding: 7px 10px; }\n\t.CLASS-settings .listing .item { line-height: 34px; font-size: 12px; background-color: #F8F8F8; border-radius: var(--radius); margin-bottom: 2px; padding: 0 10px; cursor: pointer; }\n\t.CLASS-settings .listing .item:hover { background-color: #E8E8E8; }\n\t.ui-dark .CLASS-settings .listing .item { background-color: #333; }\n\t.ui-dark .CLASS-settings .listing .item.selected { background-color: #404040; }\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><span data-bind=\"CONFIG.name__text\"></span>\n\t</header>\n</body>\n\n<settings>\n\n\t<div data---=\"box__common.form2__if:apidatabasefieldform;title:Database operation;zindex:30;width:800;submit:tmpapidatabase.save\" data-scope=\"apidatabasefieldform__isolated:1\">\n\t\t<div class=\"padding CLASS-settings\">\n\n\t\t\t<ul class=\"tabmenu\" data---=\"tabmenu__?.command__null__'list'\">\n\t\t\t\t<li data-value=\"list\">List</li>\n\t\t\t\t<li data-value=\"query\">Query</li>\n\t\t\t\t<li data-value=\"read\">Read</li>\n\t\t\t\t<li data-value=\"create\">Create</li>\n\t\t\t\t<li data-value=\"update\">Update</li>\n\t\t\t\t<li data-value=\"remove\">Delete</li>\n\t\t\t</ul>\n\t\t\t<div class=\"clearfix\">&nbsp;</div>\n\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t\t<div data---=\"input__?.name__required:1\">Name</div>\n\t\t\t\t\t<div class=\"help\">An input name</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t\t<div data---=\"input__?.table__required:1;monospace:1;align:1\">Table</div>\n\t\t\t\t\t<div class=\"help\">Table or Connection/Table</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t\t<div data---=\"input__?.path__monospace:1\">Save to path</div>\n\t\t\t\t\t<div class=\"help\">Response to <code>message.data</code></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<hr />\n\n\t\t\t<div class=\"row\" data-bind=\"?.command__show:value==='list'||value==='query'||value==='read'\">\n\t\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t\t<div data---=\"input__?.limit__type:number;required:1;monospace:1\">Max. limit</div>\n\t\t\t\t\t<div class=\"help\">Max. records to output</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t\t<div data---=\"input__?.sort__monospace:1;align:1;placeholder:column asc\">Default sort</div>\n\t\t\t\t\t<div class=\"help\"><code>column asc</code> or <code>column desc</code></div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t\t<div data---=\"input__?.fields__monospace:1;placeholder:column1, column2, column3\" data-bind=\"?.command__disable:value==='list'\">Fields</div>\n\t\t\t\t\t<div class=\"help\">Return fields</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div data-bind=\"?.command__show:value!=='list'\">\n\t\t\t\t<div data---=\"input__?.error\">Error message</div>\n\t\t\t\t<div class=\"help\">An error message will be returned when the database returns nothing</div>\n\t\t\t</div>\n\n\t\t\t<br />\n\n\t\t\t<div class=\"panel m\">\n\t\t\t\t<label class=\"bg-smoke\">Condition</label>\n\t\t\t\t<div class=\"padding\">\n\t\t\t\t<div data---=\"listform__?.where__autofocus:1;empty:You do not have defined any rules\">\n\t\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t\t<div class=\"item monospace\"><div class=\"controls nmr\"><button name=\"up\"><i class=\"fa fa-long-arrow-alt-up\"></i></button><button name=\"down\"><i class=\"fa fa-long-arrow-alt-down\"></i></button><button name=\"remove\" class=\"red\"><i class=\"far fa-trash-alt\"></i></button></div><i class=\"fa fa-filter mr5\"></i>{{ name }} {{ comparer }} <b>{{ if type == '6' }}null{{ else }}{{ value }}{{ fi }}</b></div>\n\t\t\t\t\t</script>\n\t\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t\t<div class=\"padding\">\n\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t<div class=\"col-sm-3 m\">\n\t\t\t\t\t\t\t\t\t<div data---=\"input__?.name__required:1;align:1;monospace:1__'id'\">Name</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"col-sm-3 m\">\n\t\t\t\t\t\t\t\t\t<div data---=\"input__?.comparer__required:1;align:1;dirsource:tmpapidatabase.comparers__'='\">Comparer</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"col-sm-3 m\">\n\t\t\t\t\t\t\t\t\t<div data---=\"input__?.type__required:1;align:1;dirsource:tmpapidatabase.types__'1'\">Type</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"col-sm-3 m\">\n\t\t\t\t\t\t\t\t\t<div data---=\"input__?.value__monospace:1;align:1__''\" data-bind=\"?.type__enable:value!=='6'\">Value</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"help\"><b>Expression</b> supports these commands <code>params {Object}</code>, <code>query {Object}</code>, <code>data {Object}</code>, <code>user {Object}</code>. A value for date field can contain <code>now</code> with the current date/time.</div>\n\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t<div data---=\"validate__?__validonly:true\" class=\"toolbar\">\n\t\t\t\t\t\t\t\t<button name=\"submit\"><i class=\"fa fa-floppy-o\"></i>Save</button>\n\t\t\t\t\t\t\t\t<button name=\"remove\">Remove</button>\n\t\t\t\t\t\t\t\t<button name=\"cancel\">Cancel</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</script>\n\t\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t\t<div style=\"margin-top:15px\"><button class=\"button button-inline\" name=\"create\"><i class=\"fa fa-plus-circle green\"></i>Create</button></div>\n\t\t\t\t\t</script>\n\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div class=\"panel hidden\" data-bind=\"?.command__show:value==='list'\">\n\t\t\t\t<label class=\"bg-smoke\">Dynamic filter</label>\n\t\t\t\t<div class=\"padding\">\n\t\t\t\t\t<div data---=\"listform__?.filter__autofocus:1;empty:You do not have defined any rules\">\n\n\t\t\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t\t\t<div class=\"item monospace\"><div class=\"controls nmr\"><button name=\"up\"><i class=\"fa fa-long-arrow-alt-up\"></i></button><button name=\"down\"><i class=\"fa fa-long-arrow-alt-down\"></i></button><button name=\"remove\" class=\"red\"><i class=\"far fa-trash-alt\"></i></button></div><i class=\"fa fa-filter mr5\"></i>{{ name }} <b>{{ type | tmpapidatabasetype }}</b></div>\n\t\t\t\t\t\t</script>\n\n\t\t\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t\t\t<div class=\"padding\">\n\t\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t\t<div class=\"col-sm-3 m\">\n\t\t\t\t\t\t\t\t\t\t<div data---=\"input__?.name__required:1;align:1;monospace:1__'name'\">Name</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div class=\"col-sm-3 m\">\n\t\t\t\t\t\t\t\t\t\t<div data---=\"input__?.type__required:1;align:1;dirsource:tmpapidatabase.types2__'2'\">Type</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div data---=\"validate__?__validonly:true\" class=\"toolbar\">\n\t\t\t\t\t\t\t\t\t<button name=\"submit\"><i class=\"fa fa-floppy-o\"></i>Save</button>\n\t\t\t\t\t\t\t\t\t<button name=\"remove\">Remove</button>\n\t\t\t\t\t\t\t\t\t<button name=\"cancel\">Cancel</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</script>\n\n\t\t\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t\t\t<div style=\"margin-top:15px\"><button class=\"button button-inline\" name=\"create\"><i class=\"fa fa-plus-circle green\"></i>Create</button></div>\n\t\t\t\t\t\t</script>\n\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<nav data---=\"validate__?\">\n\t\t\t<button name=\"submit\" disabled>APPLY</button>\n\t\t\t<button name=\"cancel\">Cancel</button>\n\t\t</nav>\n\t</div>\n\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding bg-smoke\">\n\t\t\t<div data---=\"input__?.name__required:1\" class=\"m\">Name</div>\n\t\t</div>\n\t\t<div class=\"padding\">\n\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<button class=\"exec\" data-exec=\"tmpapidatabase.add\"><i class=\"fa fa-plus-circle green\"></i>Add</button>\n\t\t\t\t</div>\n\t\t\t\t<label>Inputs</label>\n\t\t\t</div>\n\n\t\t\t<div data-bind=\"?.items__template:.item\" class=\"listing\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<div class=\"item exec\" data-id=\"{{ m.id }}\" data-exec=\"tmpapidatabase.upd\"><span class=\"controls nmr\"><button class=\"exec red\" data-prevent=\"true\" data-exec=\"tmpapidatabase.rem\"><i class=\"far fa-trash-alt\"></i></button></span><i class=\"fa fa-crosshairs mr5\"></i>{{ m.name }} ({{ m.command | tmpapidatabasecommand }})</div>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tvar tmp = W.tmpapidatabase;\n\n\t\t\tif (!tmp) {\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.commands = [];\n\t\t\t\ttmp.commands.push({ id: 'list', name: 'List' });\n\t\t\t\ttmp.commands.push({ id: 'query', name: 'Query' });\n\t\t\t\ttmp.commands.push({ id: 'read', name: 'Read' });\n\t\t\t\ttmp.commands.push({ id: 'create', name: 'Create' });\n\t\t\t\ttmp.commands.push({ id: 'update', name: 'Update' });\n\t\t\t\ttmp.commands.push({ id: 'remove', name: 'Delete' });\n\t\t\t\ttmp.comparers = [];\n\t\t\t\ttmp.comparers.push({ id: '=', name: '=' });\n\t\t\t\ttmp.comparers.push({ id: '>', name: '>' });\n\t\t\t\ttmp.comparers.push({ id: '>=', name: '>=' });\n\t\t\t\ttmp.comparers.push({ id: '<', name: '<' });\n\t\t\t\ttmp.comparers.push({ id: '<=', name: '<=' });\n\t\t\t\ttmp.comparers.push({ id: '<>', name: '<>' });\n\n\t\t\t\ttmp.types = [];\n\t\t\t\ttmp.types.push({ id: '1', name: 'Expression' });\n\t\t\t\ttmp.types.push({ id: '2', name: 'String' });\n\t\t\t\ttmp.types.push({ id: '3', name: 'Number' });\n\t\t\t\ttmp.types.push({ id: '4', name: 'Boolean' });\n\t\t\t\ttmp.types.push({ id: '5', name: 'Date' });\n\t\t\t\ttmp.types.push({ id: '6', name: 'NULL' });\n\n\t\t\t\ttmp.types2 = [];\n\t\t\t\ttmp.types2.push({ id: '2', name: 'String' });\n\t\t\t\ttmp.types2.push({ id: '3', name: 'Number' });\n\t\t\t\ttmp.types2.push({ id: '4', name: 'Boolean' });\n\t\t\t\ttmp.types2.push({ id: '5', name: 'Date' });\n\n\t\t\t\tThelpers.tmpapidatabasetype = function(val) {\n\t\t\t\t\treturn tmp.types2.findValue('id', val, 'name', DEF.empty);\n\t\t\t\t};\n\n\t\t\t\tThelpers.tmpapidatabasecommand = function(val) {\n\t\t\t\t\treturn tmp.commands.findValue('id', val, 'name', DEF.empty);\n\t\t\t\t};\n\n\t\t\t\ttmp.add = function() {\n\t\t\t\t\tSET('apidatabasefieldform @reset @showloading', { id: Date.now().toString('36'), name: 'Input', where: [], filter: [], command: 'list', limit: 100 });\n\t\t\t\t\tSET('common.form2 @hideloading', 'apidatabasefieldform');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar model = GET(tmp.path);\n\t\t\t\t\tvar index = model.items.findIndex('id', id);\n\t\t\t\t\tif (index !== -1) {\n\t\t\t\t\t\tmodel.items.splice(index, 1);\n\t\t\t\t\t\tUPD(tmp.path + ' @change');\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttmp.upd = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar model = GET(tmp.path);\n\t\t\t\t\tvar item = model.items.findItem('id', id);\n\t\t\t\t\tif (item) {\n\t\t\t\t\t\tSET('apidatabasefieldform @reset @showloading', CLONE(item));\n\t\t\t\t\t\tSET('common.form2 @hideloading', 'apidatabasefieldform');\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttmp.save = function(hide) {\n\t\t\t\t\tvar item = CLONE(apidatabasefieldform);\n\t\t\t\t\tvar model = GET(tmp.path);\n\t\t\t\t\tvar index = model.items.findIndex('id', item.id);\n\n\t\t\t\t\tif (item.command !== 'list')\n\t\t\t\t\t\titem.filter = [];\n\n\t\t\t\t\tif (index === -1)\n\t\t\t\t\t\tmodel.items.push(item);\n\t\t\t\t\telse\n\t\t\t\t\t\tmodel.items[index] = item;\n\t\t\t\t\tUPD(tmp.path + ' @change');\n\t\t\t\t\thide();\n\t\t\t\t};\n\n\t\t\t\tW.tmpapidatabase = tmp;\n\t\t\t}\n\n\t\t\ttmp.path = meta.path;\n\t\t};\n\n\t\texports.configure = function() {\n\t\t\tvar changes = exports.instance.changes;\n\t\t\tif (changes && changes.newbie) {\n\t\t\t\tvar inputs = [];\n\t\t\t\tfor (var item of exports.config.items)\n\t\t\t\t\tinputs.push({ id: item.id, name: item.name });\n\t\t\t\texports.instance.inputs = inputs;\n\t\t\t\tUPD('flow.data');\n\t\t\t}\n\t\t};\n\n\t});\n\n</script>",
			"c516kb386": "<script total>\n\n\texports.name = 'MongoDB Query';\n\texports.group = 'Databases';\n\texports.icon = 'fa fa-database';\n\texports.author = 'Martin Smola';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.npm = ['mongodb', 'mquery'];\n\n\texports.make = function(instance, config) {\n\n\t\tREPO.mongodb = REPO.mongodb || {};\n\n\t\tconst { MongoClient } = require('mongodb');\n\t\tconst mquery = require('mquery');\n\n\t\tvar MONGO;\n        var COLS = {};\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\n\t\t\tif (!MONGO)\n\t\t\t\treturn $.send('output', { error: 'MongoDB connection not configured' });\n\n\t\t\tif (!data.database || !data.collection)\n\t\t\t\treturn $.send('output', { error: 'Database or Collection not specified.' });\n\n\t\t\tlet id = `${data.database}/${data.collection}`;\n\n\t\t\tif (!COLS[id]) {\n\t\t\t\tconst db = MONGO.client.db(data.database);\n\t\t\t\tconst collection = db.collection(data.collection);\n\t\t\t\tCOLS[id] = collection;\n\t\t\t}\n\n\t\t\tvar query = mquery(COLS[id]);\n\t\t\tquery.$useProjection = true;\n\n\t\t\tconst builder = fn(query, data.data);\n\n\t\t\tbuilder.exec(function(err, data){\n\n\t\t\t\tinstance.send('output', { err, data });\n\t\t\t});\n\n\t\t};\n\n\t\tinstance.close = function(callback) {\n\t\t\tif (MONGO) {\n\t\t\t\tMONGO.count--;\n\t\t\t\tif (MONGO.count === 0) {// last component using this connection so destroy it\n                    MONGO.client.close();\n\t\t\t\t\tMONGO.client.removeAllListeners();\n\t\t\t\t\tdelete REPO.mongodb[config.connection];\n\t\t\t\t}\n\t\t\t\tMONGO = null;\n                COLS = {};\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = async function() {\n\n\t\t\tif (!config.fn) {\n\t\t\t\tfn = null;\n\t\t\t\treturn instance.status({ state: 'Missing query function' });\n\t\t\t}\n\n\t\t\tvar connection = config.connection;\n\n\t\t\tfn = new Function('query', 'data', config.fn);\n\n\t\t\tif (config.string)\n\t\t\t\tconnection = config.string;\n\n\t\t\tif (!connection)\n\t\t\t\treturn  instance.status({ state: 'Missing connection string' });\n\n\t\t\t// same connection, ignore\n\t\t\tif (MONGO && MONGO.string === connection)\n\t\t\t\treturn instance.status({ state: 'Connected' });\n\n\t\t\t// already existing connection, use it\n\t\t\tif (REPO.mongodb[connection]) {\n\t\t\t\tinstance.close();\n\t\t\t\tMONGO = REPO.mongodb[connection];\n\t\t\t\tMONGO.count++;\n\t\t\t\treturn instance.status({ state: 'Connected' });\n\t\t\t}\n\n\t\t\tinstance.close();\n\n\t\t\tconst client = await connect();\n\n\t\t\tif (!client)\n\t\t\t\treturn instance.status({ state: 'Failed to connect' });\n\n\t\t\tinstance.status({ state: 'Connected' });\n\n\t\t\tconfig.string = connection;\n\n\t\t\tMONGO = REPO.mongodb[connection] = {\n\t\t\t\tclient,\n\t\t\t\tcount: 1,\n\t\t\t\tstring: connection,\n\t\t\t\tname: config.name\n\t\t\t};\n\t\t};\n\n\t\tinstance.configure();\n\n\t\tasync function connect() {\n\n\t\t\tconst client = new MongoClient(config.connection, { useNewUrlParser: true, useUnifiedTopology: true });\n\n\t\t\ttry {\n\t\t\t\tawait client.connect();\n\t\t\t\tawait client.db(\"admin\").command({ ping: 1 });\n\t\t\t\tvar dbs = await client.db(\"admin\").command({ listDatabases: 1 });\n\t\t\t} catch(e) {\n\t\t\t\tinstance.throw(e.message);\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn client;\n\t\t};\n\n\t\tinstance.call = function(data, reply) {\n\t\t\tvar arr = [];\n\n\t\t\tfor (const key in REPO.mongodb)\n\t\t\t\tarr.push({ id: REPO.mongodb[key].string, name: REPO.mongodb[key].name });\n\n\t\t\treply(arr);\n\t\t};\n\t};\n\n</script>\n\n<readme>\nUses mquery under the hood. Here is the [documentation](https://www.npmjs.com/package/mquery)\n\n## Input\n\nExample\n```javascript\n{\n    database: 'database-name',\n    collection: 'collection-name',\n\tdata: <any> // this prop will be passed into the query function\n}\n```\n\n## Query editor\n```js\n// query; mquery instance\n// data; data from the incomming object\n\nquery.find(); // return all documents\n```\n\n## Important\nIn the `.select()` you cannot use inclusion and exclusion together.\nThis is invalid: `.select('firstname -lastname')`\nValid exclusion: `.select('-lastname')` or `.select('-email -lastname')` etc.\nValid inclusion: `.select('name email')` or `.select('email lastname')` etc.\n</readme>\n<script>\n\tON('configure_mongodbquery', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%connections', response);\n\t\t});\n\t});\n</script>\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row m\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<div class=\"m\"><b>Select Connection</b></div>\n\t\t\t\t<div data---=\"input__?.string__dirsource:%connections;dirraw:1;placeholder:Select connection;dirempty:No connection\" class=\"m\"></div>\n\t\t\t\t<hr />\n\t\t\t\t<div data-bind=\"?.string__config [data---]:'required:' + (!value)__hide\">\n\t\t\t\t\t<div class=\"m\"><b>or create new one</b></div>\n\t\t\t\t\t<div data---=\"input__?.name__required:1\" class=\"m\">Connection name</div>\n\t\t\t\t\t<div data---=\"input__?.connection__required:1\">Connection string (without the database name)</div>\n\t\t\t\t\t<div class=\"help m\">e.g.: mongodb+srv://user:pswd@xyz.mongodb.net/?retryWrites=true&w=majority</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row m\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<div data---=\"codemirror__?.fn__type:javascript;required:true;height:300\" class=\"m\">Query editor</div>\n\t\t\t\t<a href=\"https://www.npmjs.com/package/mquery\" target=\"_blank\"><i class=\"fa fa-info mr5\"></i>mquery documentation</a>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<span data-bind=\"STATUS.state__text\"></span>\n\t</footer>\n</body>",
			"code1": "<script total>\n\n\texports.id = 'code1';\n\texports.name = 'Code1';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total.js';\n\texports.config = { outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send(\\'output\\', data); // or simply send(data); which uses the first output\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\texports.npm = ['jsdom','d3@4','webcola']\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.throw(e);\n\t\t\t\t\t$.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t};\ninstance.configure = function() {\n\t\t\tinstance.outputs = [];\n\t\t\tfor (let i = 1; i <= config.outputs; i++)\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i === 1 ? '' : i), name: 'Output #' + i });\n\t\t\tinstance.save();\n\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t};\n\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n\n\tTo send data to the default output use `send(somedata);`\n\tTo send data to specific output when number of outputs > 1 use `$.send('outputX', somedata)` where `X` is output index, see example bellow:\n\t- first output--> `send(somedata)` or `$.send('output', somedata)`\n\t- second output --> `$.send('output2', somedata)`\n\t- ...\n\t- 5th output --> `$.send('output5', somedata)`\n\t- etc.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"c37x8a2ca5": "<script total>\n\n\texports.name = 'File Writer';\n\texports.group = 'Files';\n\texports.version = '1';\n\texports.icon = 'fa fa-pencil';\n\texports.author = 'Total.js';\n\texports.config = { path: '', serializer: 'json', rewrite: true, divider: '\\\\n' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar path;\n\t\tvar divider;\n\t\tvar timeout;\n\n\t\tvar replacewhitechar = function(text) {\n\t\t\tswitch (text[1]) {\n\t\t\t\tcase 'n':\n\t\t\t\t\treturn '\\n';\n\t\t\t\tcase 'r':\n\t\t\t\t\treturn '\\r';\n\t\t\t\tcase 't':\n\t\t\t\t\treturn '\\t';\n\t\t\t}\n\t\t\treturn text;\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.path)\n\t\t\t\treturn;\n\n\t\t\tvar data = $.data;\n\n\t\t\tswitch (config.serializer) {\n\t\t\t\tcase 'json':\n\t\t\t\t\tdata = JSON.stringify($.data);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'text':\n\t\t\t\t\tdata = data + '';\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (!(data instanceof Buffer)) {\n\t\t\t\tif (typeof(data) !== 'string')\n\t\t\t\t\tdata = data + '';\n\t\t\t\tdata = Buffer.from(data, 'utf8');\n\t\t\t}\n\n\t\t\tNOW = new Date();\n\t\t\tinstance.status({ used: NOW, size: data.length });\n\n\t\t\tif (config.rewrite) {\n\t\t\t\tF.Fs.writeFile(path, data, NOOP);\n\t\t\t} else {\n\t\t\t\tif (divider)\n\t\t\t\t\tdata = Buffer.concat([data, divider]);\n\t\t\t\tF.Fs.appendFile(path, data, NOOP);\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tpath = config.path[0] === '~' ? PATH.root(config.path.substring(1)) : config.path;\n\t\t\tdivider = config.divider ? Buffer.from(config.divider.replace(/\\\\[a-z]/g, replacewhitechar), 'utf8') : null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path__required:1;placeholder:/www/flowstream/data.json\"><b>Path</b></div>\n\t\t<div class=\"help m\">Absolute path to the file. The path starts with the <code>~</code> char will use a filename in the project's root directory.</div>\n\t\t<div data---=\"input__?.serializer__dirsource:json|JSON,text|Text,buffer|Buffer;required:1__'json'\" class=\"m\">Serializer</div>\n\t\t<div data---=\"input__?.rewrite__type:checkbox__true\">Rewrite content</div>\n\t\t<div data-bind=\"?.rewrite__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t\t<div data---=\"input__?.divider\">Divider</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component writes incoming data into the file.\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\t.CLASS hr { margin: 5px 0; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><i class=\"far fa-calendar mr5\"></i><span data-bind=\"STATUS.used__text__format:yyyy-MM-dd HH:mm:ss__empty\"></span></div>\n\t\t<div><i class=\"fa fa-calculator mr5\"></i><span data-bind=\"STATUS.size__text__helper:filesize__empty\"></span></div>\n\t\t<hr />\n\t\t<div data-bind=\"CONFIG.path__text__empty\"></div>\n\t</footer>\n</body>",
			"YourDatabase": "<script total>\n\n\texports.id = 'YourDatabase';\n\texports.name = 'Connection1';\n\texports.group = 'TypeRefinery';\n\texports.version = '1';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total.js';\n\texports.config = { port: '', host: '', database: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\t exports.call = function(data, answer) {\n        answer([{ id: 'nosql', name: 'NoSQL (global)' }, { id: 'pg', name: 'PostgreSQL (global)' }]);\n    };\n\n\texports.make = function(instance, config) {\n\tconst { TypeDB, SessionType } = require(\"typedb-client\");\n\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = {\n\t\t\t\tdbport: config.port,\n\t\t\t\tdbhost: config.host,\n\t\t\t\tdbdatabase: config.database\n\t\t\t};\n\t\t\t// instance.send('output', data);\n\n\n\t\tlet databases = []\n\t\tasync function openSession () {\n\t\t\tconst client = TypeDB.coreClient(\"localhost:8729\");\n\t\t\tdatabases = await client.databases.all();\n\t\t\tconsole.log([{id: 'uo', name: 'uo'}])\n\n\t\t\tinstance.send('output', databases);\n\t\t\tREPO.modify_rules = [{id: 'uo', name: 'uo'}];\n\t\t\t//session is closed\n\t\t\tclient.close();\n\t\t};\n\t\t\topenSession()\n\n\t\t};\n\t\tyo = [{id: 'uo', name: 'uo'}]\n\t\tinstance.configure = function() {\n\t\t};\n\n\t\t instance.call = function(data, answer) {\n            answer([{ id: 'nosql2', name: 'NoSQL (instance)' }, { id: 'pg2', name: 'PostgreSQL (instance)' }]);\n        };\n\n\t\tinstance.close = function() {\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\n</readme>\n<script>\n    // yourdatabase is the name of your component in lower-case\n    ON('configure_yourdatabase', function(data) {\n        // Global exports.call\n        data.call(function(response) {\n            SET('%yourdatabase', response);\n        }, true);\n\n        // Private instance.call (from the existing instance)\n        /*\n        data.call(function(response) {\n            SET('%yourdatabase', response);\n        });*/\n    });\n</script>\n<settings>\n\t<div class=\"padding\">\n\n\t\t<div data---=\"input__?.format__dirsource:yourdatabase\" class=\"m\"></div>\n\t</div>\n</settings>\n<script>\n\n</script>\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"crsm2b805a": "<script total>\n\n    exports.name = 'YourDatabase';\n    exports.group = 'Databases';\n    exports.version = '1';\n    exports.icon = 'fa fa-database';\n    exports.author = 'Total.js';\n    exports.config = { datasource: '' };\n    exports.inputs = [{ id: 'data', name: 'Data' }];\n\n    exports.call = function(data, answer) {\n        answer([{ id: 'nosql', name: 'NoSQL (global)' }, { id: 'pg', name: 'PostgreSQL (global)' }]);\n    };\n\n    exports.make = function(instance, config) {\n\n        instance.message = function($) {\n            $.destroy();\n        };\n\n        instance.call = function(data, answer) {\n            answer([{ id: 'nosql2', name: 'NoSQL (instance)' }, { id: 'pg2', name: 'PostgreSQL (instance)' }]);\n        };\n\n    };\n\n</script>\n\n<script>\n    // yourdatabase is the name of your component in lower-case\n    ON('configure_yourdatabase', function(data) {\n        // Global exports.call\n        data.call(function(response) {\n            SET('%yourdatabase', response);\n        }, true);\n\n        // Private instance.call (from the existing instance)\n        /*\n        data.call(function(response) {\n            SET('%yourdatabase', response);\n        });*/\n    });\n</script>\n\n<settings>\n    <div class=\"padding\">\n        <div data---=\"input__?.datasource__dirsource:%yourdatabase;dirraw:1;placeholder:Choose a database;dirempty:No database\" class=\"m\"><b>Database</b></div>\n    </div>\n</settings>\n\n<readme>\nLorem ipsum dolor sit amet\n</readme>\n\n<body>\n    <header>\n        <i class=\"ICON\"></i>NAME: <b class=\"monospace\" data-bind=\"CONFIG.datasource__text__empty\"></b>\n    </header>\n</body>",
			"c0q3x725f": "<script total>\n\texports.id = 'modify';\n\texports.name = 'Modify';\n\texports.icon = 'fa fa-random';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { rules: [] };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar Rules = [];\n\n\t\tinstance.message = function($) {\n\n\t\t\tfor (let i = 0; i < Rules.length; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tconst { getValue, setValue } = Rules[i];\n\n\t\t\t\t\tvar data = getValue($.data, $.repo, instance.main.variables, instance.main.variables2, get);\n\t\t\t\t\tsetValue(data, $, instance, set);\n\n\t\t\t\t} catch(e) {\n\t\t\t\t\tinstance.throw(e.stack);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (!config.rules || !config.rules.length)\n\t\t\t\treturn;\n\n\t\t\tconst rules = config.rules;\n\t\t\tRules = [];\n\n\t\t\trules.forEach(function eachCondition(cond, index){\n\n\t\t\t\tconst { rule, source, sourcepath, target, targetpath } = cond;\n\t\t\t\tvar getValue, setValue;\n\n\t\t\t\tif (rule === 'remove') {\n\n\t\t\t\t\tgetValue = NOOP;\n\t\t\t\t\tvar is$ = target === 'data' || target === 'repo';\n\t\t\t\t\tvar base = (is$ ? '$.' : 'instance.main.') + target;\n\n\t\t\t\t\tif (!targetpath) {\n\t\t\t\t\t\tif (is$) // set $.data or $.repo to null\n\t\t\t\t\t\t\tsetValue = (d, $) => { $[target] = null; };\n\t\t\t\t\t\telse // ignore variables or variables2\n\t\t\t\t\t\t\tsetValue = NOOP;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetValue = new Function('data', '$', 'instance', 'set', 'set({0}, {1}, null);'.format(base, sourcepath));\n\t\t\t\t\t}\n\n\t\t\t\t\tRules.push({ getValue, setValue });\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (rule === 'set' || rule === 'move') {\n\n\t\t\t\t\tif (source === 'expression')\n\t\t\t\t\t\tgetValue = new Function('data', 'repo', 'variables', 'variables2', sourcepath.indexOf('return') > -1 ? sourcepath : 'return ' + sourcepath + ';');\n\t\t\t\t\telse if (source === 'string')\n\t\t\t\t\t\tgetValue = () => sourcepath; // sourcepath is the actual string value\n\t\t\t\t\telse if (source === 'number') {\n\t\t\t\t\t\tgetValue = () => Number(sourcepath);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tvar str = 'if ({0}) return {1}; if (typeof {1} !== \\'object\\' || {1} == null) return; return {2};'.format(sourcepath ? 'false' : 'true', source, sourcepath ? 'get({0}, \\'{1}\\')'.format(source, sourcepath) : sourcepath);\n\t\t\t\t\t\t\tgetValue = new Function('data', 'repo', 'variables', 'variables2', 'get', str);\n\t\t\t\t\t\t} catch(e) {\n\t\t\t\t\t\t\tinstance.throw(e.stack);\n\t\t\t\t\t\t\tconsole.error(str);\n\t\t\t\t\t\t\tgetValue = NOOP;\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar str;\n\t\t\t\tvar is$ = target === 'data' || target === 'repo';\n\t\t\t\tvar base = (is$ ? '$.' : 'instance.main.') + target;\n\n\t\t\t\t// targetpath => data | repo | variables | variables2\n\t\t\t\tif (!targetpath)\n\t\t\t\t\tstr = base + ' = data;';\n\t\t\t\telse\n\t\t\t\t\tstr = 'if (typeof {0} !== \\'object\\' || {0} == null) {0} = {1}; set({0}, \\'{2}\\', data);'.format(base, isNaN(targetpath[0]) ? '{}' : '[]', targetpath);\n\n\t\t\t\tif (rule === 'move' && sourcepath) {\n\t\t\t\t\tvar is$2 = source === 'data' || source === 'repo';\n\t\t\t\t\tvar base2 = (is$2 ? '$.' : 'instance.main.') + source;\n\t\t\t\t\t// don't delete source if the target is within the same path: source $.data.device --> target $.data.device.data\n\t\t\t\t\tif (base !== base2 || !targetpath.startsWith(sourcepath))\n\t\t\t\t\t\tstr += ' set({0}, \\'{1}\\', null);'.format(base2, sourcepath);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tsetValue = new Function('data', '$', 'instance', 'set', str);\n\t\t\t\t} catch(e) {\n\t\t\t\t\tinstance.throw(e.stack);\n\t\t\t\t\tconsole.error(e);\n\t\t\t\t\tconsole.error(str);\n\t\t\t\t\tsetValue = NOOP;\n\t\t\t\t};\n\t\t\t\tRules.push({ getValue, setValue });\n\t\t\t});\n\t\t};\n\n\t\ttry {\n\t\t\tinstance.configure();\n\t\t} catch (e) { console.error(e);}\n\n\t\tconst get = (obj, path) => path.split(\".\").reduce((r, k) => r?.[k], obj);\n\t\tconst set = (obj, path, value) => {\n\t\t\tvar ok = true;\n\t\t\tvar props = path.split('.').trim();\n\n\t\t\tvar plen = props.length;\n\t\t\tif (!plen)\n\t\t\t\treturn false;\n\n\t\t\tvar path = props.map(p => isNaN(p) ? p : `[${p}]`).join('.').replace(/\\.\\[/g, '[');\n\t\t\tvar paths = [];\n\t\t\tprops.reduce((prev, curr) => {\n\t\t\t\tcurr = isNaN(curr) ? curr : `[${curr}]`;\n\t\t\t\tlet p = prev + (prev && curr[0] !== '[' ? '.' : '') + curr;\n\t\t\t\tpaths.push(p);\n\t\t\t\treturn p;\n\t\t\t}, '');\n\n\t\t\tif (path[0] !== '[')\n\t\t\t\tpath = '.' + path;\n\t\t\tvar fn = new Function('o', 'v', 'o' + path + ' = v;');\n\n\t\t\tif (plen === 1) {\n\t\t\t\tvar isobject = isNaN(props[0]);\n\t\t\t\tif ((isobject && typeof(obj) === 'object') || (!isobject && obj instanceof Array))\n\t\t\t\t\tobj[props[0]] = value;\n\t\t\t\telse\n\t\t\t\t\tok = false;\n\t\t\t} else {\n\t\t\t\tpaths.forEach((p, index) => {\n\t\t\t\t\tvar islast = plen === index + 1;\n\t\t\t\t\tif (!islast) {\n\t\t\t\t\t\tvar t = get(obj, p);\n\t\t\t\t\t\tvar type = isNaN(paths[index + 1]) ? '{}' : '[]';\n\t\t\t\t\t\tif (t == null)\n\t\t\t\t\t\t\tnew Function('target', 'set', 'target' + (p[0] === '[' ? '' : '.') + p + ' = ' + type + ';')(obj, set);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfn(obj, value);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn ok;\n\t\t}\n\t};\n\n</script>\n\n<readme>\n\tThis component allows you to set/modify/move/remove properties of the incomming data.\n\tFor eaxample, to set the message data to a string `Hello world` select *Message data* in the rule dropdown and leave the text field empty.\n\tThen in the bellow dropdown select `string` and enter the desired string in the text field.\n\tResult:\n\t- before: $.data -> 'Hello world'\n\t- after:  $.data -> 'New string'\n\n\t## Expression\n\tAvailable params are: `data`, `repo`, `variables` ,`variables2`\n\tWhere data is message.data, repo is message.repo --> [Documentation](https://docs.totaljs.com/total4/40844001ni51c)\n\tAnd variables are local variables which can be set in the Variables dialog accessible on the main toolbar(the button between Plus icon and Bug icon)\n\tFor example, we want message data to be the value of (data.value + variables.offset)\n\tResult:\n\t- before: $.data --> `{ value: 100 }` / variables --> `{ offset: 20, ... many other properties }`\n\t- after:  $.data -> `{ value: 120 }`\n\tThe expression: `data.value + variables.offset`\n\n\t### Important\n\t- `Remove` -> `Message data / Message repo` -> `<empty path>` will set `Message data / Message repo` to `null`;\n\t- `Remove` -> `Local variables / Global variables` -> `<empty path>` will be ignored but `Remove` -> `Local variables / Global variables` -> `myVar` will work.\n\t- `Set` -> `Message data` -> `some.path` to: `Message data` -> `some.other.path` will add another property to the incoming data and rest of the data will remain untouched\n\t- `Set` -> `Message data` -> `<empty path>` to: `Message data` -> `some.path` will essentialy overwrite the incomming data, after this there's no longer access to original data(same goes for repo)\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<section class=\"modify-rules m\">\n\t\t\t<label>Rules</label>\n\t\t\t<div data-bind=\"?.rules__template:.modify-rule -> data-index\" data---=\"movable__?.rules__selector:.dragme;exec:FUNC.modify_rule_dragged\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach rule in value }}\n\t\t\t\t\t<div class=\"modify-rule dragme\" data-index=\"{{ $index }}\" draggable=\"true\">\n\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t<div class=\"col-md-3\">\n\t\t\t\t\t\t\t\t<div data---=\"input__?.rules[{{ $index }}].rule__dirsource:REPO.modify_rules\" class=\"m\"></div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-1\">\n\t\t\t\t\t\t\t\t<div class=\"m\">--&gt;</div>\n\t\t\t\t\t\t\t\t<div data-bind=\"?.rules[{{ $index }}].rule__hide:value == 'remove'\">to:</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-7\">\n\t\t\t\t\t\t\t\t<div class=\"modify-input-group m\">\n\t\t\t\t\t\t\t\t\t<div data---=\"input__?.rules[{{ $index }}].target__dirsource:REPO.modify_targets\"></div>\n\t\t\t\t\t\t\t\t\t<div data---=\"input__?.rules[{{ $index }}].targetpath__placeholder:value\"></div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"modify-input-group\" data-bind=\"?.rules[{{ $index }}].rule__hide:value == 'remove'\">\n\t\t\t\t\t\t\t\t\t<div data---=\"input__?.rules[{{ $index }}].source__dirsource:REPO.modify_sources\"></div>\n\t\t\t\t\t\t\t\t\t<div data---=\"input__?.rules[{{ $index }}].sourcepath__placeholder:value\"></div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-1\">\n\t\t\t\t\t\t\t\t<i class=\"fa fa-trash red exec\" data-exec=\"FUNC.modify_remove_rule\"></i>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"help m\">Each rule will be applied in the order from top to bottom.</div>\n\t\t\t<button class=\"button-add exec\" data-exec=\"FUNC.modify_add_rule\">ADD</button>\n\t\t</section>\n\t\t<button class=\"button exec\" style=\"width: 200px;\" data-exec=\"FUNC.modify_readme\"><i class=\"fa fa-info-circle blue\"></i>Show configuration info</button>\n\t</div>\n</settings>\n\n<script>\n\n\tFUNC.modify_readme = function() {\n\t\tEXEC('flow/readme', flow.info.selected.component);\n\t};\n\n\tFUNC.modify_add_rule = function(el) {\n\t\tvar scope = el.scope();\n\t\tPUSH(scope.path + '.rules', { rule: 'set', source: '', sourcetype: '', target: '', targettype: '' });\n\t};\n\n\tFUNC.modify_remove_rule = function(el) {\n\t\tvar path = el.scope().path;\n\t\tvar config = GET(path);\n\t\tvar index = el.closest('.modify_rule').attrd('index');\n\t\tconfig.rules.splice(index, 1);\n\t\tSET(path, config);\n\t};\n\n\tFUNC.modify_rule_dragged = function(list, dragged, target) {\n\t\tdragged = $(dragged);\n\t\tvar dragged_index = dragged.attrd('index');\n\t\tvar target_index = $(target).attrd('index');\n\t\tvar path = dragged.scope().path;\n\t\tvar config = GET(path);\n\t\tvar dragged_item = config.rules.splice(dragged_index, 1)[0];\n\t\tconfig.rules.splice(target_index, 0, dragged_item);\n\t\tSET(path, config);\n\t};\n\n\tFUNC.modify_tooltip = function(el) {\n\t\tvar opt = {};\n\t\topt.element = el;\n\t\tvar id = el.attrd('id');\n\t\topt.html = REPO.switch_tooltips[id];\n\n\t\tSETTER('tooltip', 'show', opt);\n\t};\n\n\tREPO.modify_sources = 'string|String,number|Number,data|Message data,repo|Message repository,variables|Local variables,variables2|Global variables,expression|Expression'.split(',').map(d => { const [ id, name ] = d.split('|'); return { id, name }; });\n\tREPO.modify_targets = 'data|Message data,repo|Message repository,variables|Local variables,variables2|Global variables'.split(',').map(d => { const [ id, name ] = d.split('|'); return { id, name }; });\n\tREPO.modify_rules = 'set|Set,remove|Remove,move|Move'.split(',').map(d => { const [ id, name ] = d.split('|'); return { id, name }; });\n</script>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\n\t.button-add { height: 24px; font-size: 12px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #f0f0f0; margin: 0; padding: 2px 10px; }\n\t.button-add:hover { background-color: #F8F8F8; }\n\t.button-add:active { background-color: #E0E0E0; }\n\n\t.ui-dark .button-add { border-color: #404040; color: #FFF; }\n\t.ui-dark .button-add:hover { background-color: #303030; }\n\t.ui-dark .button-add:active { background-color: #404040; }\n\n\t.modify-input-group { clear: both; height: 36px; }\n\t.modify-input-group > div:first-child .ui-input-control { border-right: none; border-bottom-right-radius: 0; border-top-right-radius: 0; width: 120px; float: left; background-color: #f0f0f0; }\n\t.modify-input-group > div:last-child .ui-input-control { border-bottom-left-radius: 0; border-top-left-radius: 0; float: left; width: calc(100% - 120px); }\n\t.modify-input-group.wide > div:first-child .ui-input-control { width: 200px; }\n\t.modify-input-group.wide > div:last-child .ui-input-control { width: calc(100% - 200px); }\n\t.modify-rules { border: 1px solid #e0e0e0; padding: 8px; border-radius: 3px; }\n\t.modify-rule { border: 1px solid #e0e0e0; border-radius: 3px; padding: 8px; margin-bottom:4px; }\n\t.modify-rule > .row > .col-md-1 { height: 36px; line-height: 36px; }\n\t.modify-help { background-color: #e7e7ff; border-radius: 3px; padding: 4px; }\n\t.modify-thead { padding: 8px; margin-bottom:4px; }\n\t.modify-rules > label { display: block; background-color: #f0f0f0; margin: -8px -8px 8px; padding: 8px; border-bottom: 1px solid #e0e0e0; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"c2jut4816d": "<script total>\n\n\texports.name = 'Redirect';\n\texports.icon = 'fa fa-share';\n\texports.group = 'REST API';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tvar url = data.redirect || config.redirect;\n\t\t\tif (url && $.refs.controller)\n\t\t\t\t$.refs.controller.redirect(url, data.permanent === true || (!data.permanent === false && config.permanent === true) ? true : false);\n\n\t\t\t$.destroy();\n\t\t\t!url && instance.throw('No Redirect URL specified.');\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\n## Input\nIncomming data have higher priority than the values set in the Configuration form.\nBoth the `url` and `permanent` are optional.\n```js\n{\n\tredirect: 'https://example.com',\n\tpermanent: true|false\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.redirect\" class=\"m\">Redirect URL</div>\n\t\t<div data---=\"input__?.permanent\">Permanent redirect</div>\n\t</div>\n</settings>\n\n<style>\n</style>\n\n<script>\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>"
		},
		"design": {
			"il63c5jtc": {
				"id": "il63c5jtc",
				"config": {
					"random": true,
					"type": "string",
					"data": "",
					"restart": false
				},
				"x": 19,
				"y": 12,
				"component": "c5dxc3546a",
				"connections": {
					"output": [
						{
							"id": "il63c5uyg",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "Triggers",
					"name": "Trigger",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il63c5uyg": {
				"id": "il63c5uyg",
				"config": {
					"port": "8729",
					"host": "localhost",
					"database": "typerefinery"
				},
				"x": 205,
				"y": 194,
				"component": "connection",
				"connections": {
					"output": [
						{
							"id": "il63c6hh2",
							"index": "connection"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "TypeRefinery",
					"name": "Connection",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il63c6hh2": {
				"id": "il63c6hh2",
				"config": {
					"query": "match $a isa log, has logName 'L1';\n$b isa event, has eventName $c;\n$d (owner: $a, item: $b) isa trace,\nhas traceId $e, has index $f;\n offset 0; limit 10;"
				},
				"x": 386,
				"y": 61,
				"component": "query",
				"connections": {
					"output": [
						{
							"id": "il63c75uj",
							"index": "query"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "TypeRefinery",
					"name": "Query",
					"inputs": [
						{
							"id": "connection",
							"name": "Connection"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il63c75uj": {
				"id": "il63c75uj",
				"config": {
					"algorithm": "from typedb.client import *\nfrom loguru import logger as Logger\nfrom posixpath import basename\nimport json\nimport copy\nimport os\nimport sys\nimport argparse\nfrom datetime import datetime\ngquery = \"match $a isa log, has logName 'L1'; \"\ngquery += \"$b isa event, has eventName $c;\"\ngquery += \" $d (owner: $a, item: $b) isa trace, \"\ngquery += \" has traceId $t, has index $f; offset 0; limit 100;\"#  get; \"\ngroup_raw = [{\n    \"leaves\": [\n                    0\n                ],\n                \"colour_list\": \"Greys\",\n                \"level\": 7,\n                \"label\": \"hidden\"\n}]\n# function to collect all of the data out of the iterator\n# with read transaction object to use asRemote mode\ndef collect_answers(answer_iterator, r_tx, logger: Logger):\n    logger.info(f'into collect answers, iterator -> {answer_iterator}')\n    res = []\n    layers = []\n    layer = []\n    for answer in answer_iterator:\n        dict_answer = answer.map()\n        #logger.info(f'dict answer is {dict_answer}')\n        for key, thing in dict_answer.items():\n            logger.info(f'key, things is {key}, {thing}')\n            # pull entity data\n            if thing.is_entity():\n                ent = {}\n                ent['type'] = 'entity'\n                ent['symbol'] = key\n                ent['G_id'] = thing.get_iid()\n                ent['G_name'] = thing.get_type().get_label().name()\n                logger.info((f'entity name is {ent[\"G_name\"]}'))\n                logger.info((f'thing value is {thing}'))\n                att_obj = thing.as_remote(r_tx).get_has()\n                att = []\n                for a in att_obj:\n                    att.append(a.get_iid())\n                ent['has'] = att\n                res.append(ent)\n                layer.append(ent)\n                logger.info(f'ent -> {ent}')\n            # pull attribute data\n            elif thing.is_attribute():\n                att = {}\n                att['type'] = 'attribute'\n                att['symbol'] = key\n                att['G_id'] = thing.get_iid()\n                att['G_name'] = thing.get_type().get_label().name()\n                att['value'] = thing.get_value()\n                att['datatype'] = thing.get_type().get_value_type().name\n                att_obj = thing.as_remote(r_tx).get_has()\n                attrib = []\n                for a in att_obj:\n                    attrib.append(a.get_iid())\n                att['has'] = attrib\n                res.append(att)\n                layer.append(att)\n                logger.info(f'att -> {att}')\n            # pull relation data\n            elif thing.is_relation():\n                rel = {}\n                rel['type'] = 'relation'\n                rel['symbol'] = key\n                rel['G_id'] = thing.get_iid()\n                rel['G_name'] = thing.get_type().get_label().name()\n                att_obj = thing.as_remote(r_tx).get_has()\n                att = []\n                for a in att_obj:\n                    att.append(a.get_iid())\n                rel['has'] = att\n                links = thing.as_remote(r_tx).get_players_by_role_type()\n                logger.info(f' links are -> {links}')\n                edges = {}\n                for edge_key, edge_thing in links.items():\n                    logger.info(f' edge key is -> {edge_key}')\n                    logger.info(f' edge_thing is -> {list(edge_thing)}')\n                    edges[edge_key.get_label().name()] = [e.get_iid() for e in list(edge_thing)]\n                rel['edges'] = edges\n                res.append(rel)\n                layer.append(rel)\n                logger.info(f'rel -> {rel}')\n            # else log out error condition\n            else:\n                logger.info(f'Error key is {key}, thing is {thing}')\n        layers.append(layer)\n    return res\n# function to filter the links, so that there are none pointing to data not included\ndef filter_links(reduced_at, reduced_en, re):\n    #first build list of all node id's\n    att_list = [e['G_id'] for e in reduced_at]\n    ent_list = [e['G_id'] for e in reduced_en]\n    rel_list = [e['G_id'] for e in re]\n    node_list = att_list + ent_list + rel_list\n    #check each input list to delete those not in node_list\n    for item in reduced_en:\n        for link in item['has']:\n            if link not in node_list:\n                item['has'].remove(link)\n    for item in re:\n        for link in item['has']:\n            if link not in node_list:\n                item['has'].remove(link)\n    return reduced_at, reduced_en, re\n# function to convert the list of results into nodes and edges\ndef convert_res_to_graph(res, logger: Logger):\n    edges = []\n    nodes = []\n    en = [e for e in res if e['type'] == 'entity']\n    at = [e for e in res if e['type'] == 'attribute']\n    re = [e for e in res if e['type'] == 'relation']\n    # remove duplicates from attributes\n    reduced_at = [v for i,v in enumerate(at) if v not in at[i+1:] ]\n    reduced_en = [v for i,v in enumerate(en) if v not in en[i+1:] ]\n    # find number of types\n    G_types = {}\n    G_types['entity'] = list(set([v['G_name'] for v in reduced_en]))\n    G_types['attribute'] = list(set([v['G_name'] for v in reduced_at]))\n    G_types['relation'] = list(set([v['G_name'] for v in re]))\n    #filter out has links due to variables given thing, or attributes not expressed in the original query\n    reduced_at, reduced_en, re = filter_links(reduced_at, reduced_en, re)\n    # build edges list for attributes\n    for e in reduced_en:\n        own = e['has']\n        source = e['G_id']\n        name = 'has'\n        for o in own:\n            edge = {}\n            edge['G_target'] = o\n            edge['role'] = name\n            edge['G_source'] = source\n            edges.append(edge)\n    for a in reduced_at:\n        own = a['has']\n        source = a['G_id']\n        name = 'has'\n        for o in own:\n            edge = {}\n            edge['G_target'] = o\n            edge['role'] = name\n            edge['G_source'] = source\n            edges.append(edge)\n    for r in re:\n        own = r['has']\n        source = r['G_id']\n        name = 'has'\n        for o in own:\n            edge = {}\n            edge['G_target'] = o\n            edge['role'] = name\n            edge['G_source'] = source\n            edges.append(edge)\n    # add edges from relations\n    for r in re:\n        source = r['G_id']\n        edge_dict = r['edges']\n        for k, e in edge_dict.items():\n            edge = {}\n            edge['G_target'] = e[0]\n            edge['role'] = k\n            edge['G_source'] = source\n            edges.append(edge)\n    # add all nodes together\n    nodes = reduced_en + reduced_at + re\n    for node in nodes:\n        node['dtype'] = 'actual'\n    return nodes, edges, G_types\ndef get_node_id(nodes, G_id):\n    for index, element in enumerate(nodes):\n        if element['G_id'] == G_id:\n            return index;\ndef convert_res_to_cola(nodes, edges, G_types, logger: Logger):\n    # convert edges to id\n    for edge in edges:\n        edge['target'] = get_node_id(nodes, edge['G_target'])\n        edge['source'] = get_node_id(nodes, edge['G_source'])\n    for index, element in enumerate(nodes):\n        element['id'] = index\n    # find actual attributes in edges\n    att_list = []\n    for index, node in enumerate(nodes):\n        if node['type'] == 'attribute':\n            att_list.append(index)\n    for edge in edges:\n        edge['is_act_Attr'] = False\n        for att in att_list:\n            if edge['target'] == att or edge['source'] == att:\n                edge['is_act_Attr'] = True\n                break\n    temp_edges = copy.deepcopy(edges)\n    for t_edge in temp_edges:\n        target_node = nodes[t_edge['target']]\n        t_edge['target_name'] = target_node['G_name']\n        source_node = nodes[t_edge['source']]\n        t_edge['source_name'] = source_node['G_name']\n        if t_edge['role'] == 'has' or source_node['type'] == 'relation':\n            t_edge['direction'] = 'down'\n        else:\n            t_edge['direction'] = 'up'\n        t_edge.pop('target')\n        t_edge.pop('source')\n        t_edge.pop('G_target')\n        t_edge.pop('G_source')\n        t_edge.pop('is_act_Attr')\n    myUniqueSet = [dict(s) for s in set(frozenset(myObject.items()) for myObject in temp_edges)]\n    logger.info(f\"myUniqueSet:, {myUniqueSet}\")\n    G_types['schema'] = myUniqueSet\n    logger.info('==========================================================================================')\n    logger.info('+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')\n    logger.info(f'g-types is -> {G_types}')\n    logger.info('==========================================================================================')\n    logger.info('+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')\n    logger.info(f'nodes is ->  {nodes}')\n    logger.info('==========================================================================================')\n    logger.info('+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')\n    logger.info(f'edges is -> {edges}')\n    logger.info('==========================================================================================')\n    logger.info('+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')\n    colaGraph = {}\n    basic = {}\n    basic['nodes'] = nodes\n    basic['links'] = edges\n    basic['G_types'] = G_types\n    basic['groups'] = []\n    basic['constraints'] = []\n    colaGraph['basic'] = basic\n    colaGraph['grouped'] = {}\n    return colaGraph\n@Logger.catch\ndef get_data(dbhost, dbport, dbdatabase, dbquery, logger: Logger):\n    typeDBConnect = f'{dbhost}:{dbport}'\n    with TypeDB.core_client(typeDBConnect) as client:\n        with client.session(dbdatabase, SessionType.DATA) as session:\n            with session.transaction(TransactionType.READ) as read_transaction:\n                answer_iterator = read_transaction.query().match(dbquery)\n                res = collect_answers(answer_iterator, read_transaction, logger)\n                nodes, edges, G_types = convert_res_to_graph(res, logger)\n                colaGraph = convert_res_to_cola(nodes, edges, G_types, logger)\n    ## save file for reference\n    # with open(\"g_to_webcola.json\", \"w\") as outfile:\n    #     json.dump(colaGraph, outfile)\n    return colaGraph\n@Logger.catch\ndef main(dbhost, dbport, dbdatabase, dbquery, outputfile, logger: Logger):\n  # setup logger for execution\n  colaGraph = get_data(dbhost, dbport, dbdatabase, dbquery, logger)\n  basic = colaGraph['basic']\n  with open(outputfile, \"w\") as outfile:\n      json.dump(colaGraph, outfile)\n  logger.info('================ Schema ==================')\n  logger.info(f\"{basic['G_types']}\")",
					"endpoint": "f"
				},
				"x": 561,
				"y": 56,
				"component": "algorithm",
				"connections": {
					"output": [
						{
							"id": "il63cp96z",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "TypeRefinery",
					"name": "Algorithm",
					"inputs": [
						{
							"id": "query",
							"name": "Query"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il63cp96z": {
				"id": "il63cp96z",
				"config": {
					"code": "const payload = Object.assign($.data, {\n\t\"algorithmrequirements\": \"argparse\\nloguru\",\n\t\"returnoutput\": \"output\"\n});\n\n$.send('output', payload);"
				},
				"x": 747,
				"y": 89,
				"component": "api_payload",
				"connections": {
					"output": [
						{
							"id": "il63gzitb",
							"index": "payload"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "TypeRefinery",
					"name": "API Payload",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il63gzitb": {
				"id": "il63gzitb",
				"config": {
					"url": "http://localhost:8000/algorithm",
					"method": "POST",
					"dnscache": true,
					"insecure": false,
					"nocookies": true,
					"xhr": false,
					"parse": true,
					"timeout": 100000,
					"limit": 512000,
					"responsebody": true,
					"headers": {},
					"cookies": {},
					"serialize": "json",
					"send": "response"
				},
				"x": 974,
				"y": 132,
				"component": "czd1v94ac4",
				"connections": {
					"response": [
						{
							"id": "il63ivszh",
							"index": "input"
						},
						{
							"id": "il63jjlgb",
							"index": "input"
						},
						{
							"id": "il6c52nyx",
							"index": "input"
						}
					],
					"error": [
						{
							"id": "il63jjlgb",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fas fa-cloud-download",
					"group": "Common",
					"name": "Request",
					"inputs": [
						{
							"id": "payload",
							"name": "Payload"
						}
					],
					"outputs": [
						{
							"id": "response",
							"name": "Response"
						},
						{
							"id": "error",
							"name": "Error"
						}
					]
				}
			},
			"il63ivszh": {
				"id": "il63ivszh",
				"config": {
					"code": "$.send('output', data);"
				},
				"x": 1244,
				"y": 256,
				"component": "transformer",
				"connections": {
					"output": [
						{
							"id": "il63ixmoq",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"group": "TypeRefinery",
					"name": "Transformer",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il63ixmoq": {
				"id": "il63ixmoq",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1783,
				"y": 40,
				"component": "cag5c630de",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il63jjlgb": {
				"id": "il63jjlgb",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1498,
				"y": 40,
				"component": "cjgine9255",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "TypeRefinery",
					"name": "Response",
					"inputs": [
						{
							"id": "input",
							"name": "API_Response"
						}
					]
				}
			},
			"il6aqzmhk": {
				"id": "il6aqzmhk",
				"config": {
					"outputs": 1,
					"code": "var d3 = require(\"d3\"),\n  jsdom = require(\"jsdom\"),\n  cola = require(\"webcola\");\n\nconst { JSDOM } = jsdom;\nconst { document } = new JSDOM(\"\").window;\nglobal.document = document;\nvar colors = [\n  {\n    name: \"Greys\",\n    colors: [\n      \"#f0f0f0\",\n      \"#d9d9d9\",\n      \"#bdbdbd\",\n      \"#969696\",\n      \"#737373\",\n      \"#525252\",\n      \"#252525\",\n      \"#000000\",\n    ],\n  },\n  {\n    name: \"Reds\",\n    colors: [\n      \"#fee0d2\",\n      \"#fcbba1\",\n      \"#fc9272\",\n      \"#fb6a4a\",\n      \"#ef3b2c\",\n      \"#cb181d\",\n      \"#a50f15\",\n      \"#67000d\",\n    ],\n  },\n  {\n    name: \"Oranges\",\n    colors: [\n      \"#fee6ce\",\n      \"#fdd0a2\",\n      \"#fdae6b\",\n      \"#fd8d3c\",\n      \"#f16913\",\n      \"#d94801\",\n      \"#a63603\",\n      \"#7f2704\",\n    ],\n  },\n  {\n    name: \"Greens\",\n    colors: [\n      \"#e5f5e0\",\n      \"#c7e9c0\",\n      \"#a1d99b\",\n      \"#74c476\",\n      \"#41ab5d\",\n      \"#238b45\",\n      \"#006d2c\",\n      \"#00441b\",\n    ],\n  },\n  {\n    name: \"Blues\",\n    colors: [\n      \"#deebf7\",\n      \"#c6dbef\",\n      \"#9ecae1\",\n      \"#6baed6\",\n      \"#4292c6\",\n      \"#2171b5\",\n      \"#08519c\",\n      \"#08306b\",\n    ],\n  },\n  {\n    name: \"Purples\",\n    colors: [\n      \"#efedf5\",\n      \"#dadaeb\",\n      \"#bcbddc\",\n      \"#9e9ac8\",\n      \"#807dba\",\n      \"#6a51a3\",\n      \"#54278f\",\n      \"#3f007d\",\n    ],\n  },\n  {\n    name: \"Orange-Red\",\n    colors: [\n      \"#fee8c8\",\n      \"#fdd49e\",\n      \"#fdbb84\",\n      \"#fc8d59\",\n      \"#ef6548\",\n      \"#d7301f\",\n      \"#b30000\",\n      \"#7f0000\",\n    ],\n  },\n  {\n    name: \"Red-Purples\",\n    colors: [\n      \"#fde0dd\",\n      \"#fcc5c0\",\n      \"#fa9fb5\",\n      \"#f768a1\",\n      \"#dd3497\",\n      \"#ae017e\",\n      \"#7a0177\",\n      \"#49006a\",\n    ],\n  },\n  {\n    name: \"Blue-Green\",\n    colors: [\n      \"#e5f5f9\",\n      \"#ccece6\",\n      \"#99d8c9\",\n      \"#66c2a4\",\n      \"#41ae76\",\n      \"#238b45\",\n      \"#006d2c\",\n      \"#00441b\",\n    ],\n  },\n  {\n    name: \"Yellows\",\n    colors: [\n      \"#fffee5\",\n      \"#fffcbd\",\n      \"#fff98b\",\n      \"#fff533\",\n      \"#eedf00\",\n      \"#dad000\",\n      \"#c0b700\",\n      \"#b0a800\",\n    ],\n  },\n];\n\nvar theme = {\n  attribute: {\n    colorlist: \"Oranges\",\n    cindex: 7,\n    tcolorlist: \"Greys\",\n    tindex: 0,\n  },\n  entity: {\n    colorlist: \"Blues\",\n    cindex: 7,\n    tcolorlist: \"Greys\",\n    tindex: 0,\n  },\n  relation: {\n    colorlist: \"Blue-Green\",\n    cindex: 6,\n    tcolorlist: \"Greys\",\n    tindex: 7,\n  },\n  shadow: {\n    colorlist: \"Oranges\",\n    cindex: 2,\n    tcolorlist: \"Greys\",\n    tindex: 7,\n  },\n};\n\nvar body = d3.select(\"body\");\nconsole.log(body.node().innerHTML)\nvar svg = body\n  .append(\"svg\")\n  .attr(\"width\", 900)\n  .attr(\"height\", 500)\n  .call(\n    d3.zoom().on(\"zoom\", function () {\n      svg.attr(\"transform\", d3.event.transform);\n    })\n  )\n  .append(\"g\");\n\nconst height = 500;\nconst width = 600;\n\n// setup the theme color\n\nconst textPadding = 8;\nconst corner = 5;\nconst grp_corner = 8;\nconst pad = 5;\nvar ent_colour = \"#03396c\";\nvar ent_t_colour = \"white\";\nvar att_colour = \"#ff4d00\";\nvar att_t_colour = \"white\";\nvar shad_colour = \"#ff4d00\";\nvar shad_t_colour = \"white\";\nvar rel_colour = \"#007777\";\nvar rel_t_colour = \"black\";\n\nlet colours = colors;\n// load the colours from the theme\nent_colour = colors.find((colour) => colour.name == theme.entity.colorlist)[\n  \"colors\"\n][theme.entity.cindex];\nent_t_colour = colors.find((colour) => colour.name == theme.entity.tcolorlist)[\n  \"colors\"\n][theme.entity.tindex];\natt_colour = colors.find((colour) => colour.name == theme.attribute.colorlist)[\n  \"colors\"\n][theme.attribute.cindex];\natt_t_colour = colors.find(\n  (colour) => colour.name == theme.attribute.tcolorlist\n)[\"colors\"][theme.attribute.tindex];\nshad_colour = colors.find((colour) => colour.name == theme.shadow.colorlist)[\n  \"colors\"\n][theme.shadow.cindex];\nshad_t_colour = colors.find((colour) => colour.name == theme.shadow.tcolorlist)[\n  \"colors\"\n][theme.shadow.tindex];\nrel_colour = colors.find((colour) => colour.name == theme.relation.colorlist)[\n  \"colors\"\n][theme.relation.cindex];\nrel_t_colour = colors.find(\n  (colour) => colour.name == theme.relation.tcolorlist\n)[\"colors\"][theme.relation.tindex];\n\nvar cola = cola.d3adaptor(d3).size([width, height]);\n\n// graph.json\nvar Graph_Data = {\n  basic: {\n    nodes: [\n      {\n        type: \"entity\",\n        symbol: \"b\",\n        G_id: \"0x826e80028000000000000015\",\n        G_name: \"event\",\n        has: [\"0x836f800428000161\"],\n        dtype: \"actual\",\n        id: 0,\n      },\n      {\n        type: \"entity\",\n        symbol: \"b\",\n        G_id: \"0x826e8002800000000000000d\",\n        G_name: \"event\",\n        has: [\"0x836f800428000161\"],\n        dtype: \"actual\",\n        id: 1,\n      },\n      {\n        type: \"entity\",\n        symbol: \"a\",\n        G_id: \"0x826e80018000000000000000\",\n        G_name: \"log\",\n        has: [],\n        dtype: \"actual\",\n        id: 2,\n      },\n      {\n        type: \"attribute\",\n        symbol: \"e\",\n        G_id: \"0x836f80012800034c3135\",\n        G_name: \"traceId\",\n        value: \"L15\",\n        datatype: \"STRING\",\n        has: [],\n        dtype: \"actual\",\n        id: 3,\n      },\n      {\n        type: \"attribute\",\n        symbol: \"c\",\n        G_id: \"0x836f800428000161\",\n        G_name: \"eventName\",\n        value: \"a\",\n        datatype: \"STRING\",\n        has: [],\n        dtype: \"actual\",\n        id: 4,\n      },\n      {\n        type: \"attribute\",\n        symbol: \"f\",\n        G_id: \"0x836f8003148000000000000000\",\n        G_name: \"index\",\n        value: 0,\n        datatype: \"LONG\",\n        has: [],\n        dtype: \"actual\",\n        id: 5,\n      },\n      {\n        type: \"attribute\",\n        symbol: \"e\",\n        G_id: \"0x836f80012800034c3133\",\n        G_name: \"traceId\",\n        value: \"L13\",\n        datatype: \"STRING\",\n        has: [],\n        dtype: \"actual\",\n        id: 6,\n      },\n      {\n        type: \"relation\",\n        symbol: \"d\",\n        G_id: \"0x847080028000000000000014\",\n        G_name: \"trace\",\n        has: [\"0x836f80012800034c3135\", \"0x836f8003148000000000000000\"],\n        edges: {\n          item: [\"0x826e80028000000000000015\"],\n          owner: [\"0x826e80018000000000000000\"],\n        },\n        dtype: \"actual\",\n        id: 7,\n      },\n      {\n        type: \"relation\",\n        symbol: \"d\",\n        G_id: \"0x84708002800000000000000c\",\n        G_name: \"trace\",\n        has: [\"0x836f80012800034c3133\", \"0x836f8003148000000000000000\"],\n        edges: {\n          item: [\"0x826e8002800000000000000d\"],\n          owner: [\"0x826e80018000000000000000\"],\n        },\n        dtype: \"actual\",\n        id: 8,\n      },\n    ],\n    links: [\n      {\n        G_target: \"0x836f800428000161\",\n        role: \"has\",\n        G_source: \"0x826e80028000000000000015\",\n        target: 4,\n        source: 0,\n        is_act_Attr: true,\n      },\n      {\n        G_target: \"0x836f800428000161\",\n        role: \"has\",\n        G_source: \"0x826e8002800000000000000d\",\n        target: 4,\n        source: 1,\n        is_act_Attr: true,\n      },\n      {\n        G_target: \"0x836f80012800034c3135\",\n        role: \"has\",\n        G_source: \"0x847080028000000000000014\",\n        target: 3,\n        source: 7,\n        is_act_Attr: true,\n      },\n      {\n        G_target: \"0x836f8003148000000000000000\",\n        role: \"has\",\n        G_source: \"0x847080028000000000000014\",\n        target: 5,\n        source: 7,\n        is_act_Attr: true,\n      },\n      {\n        G_target: \"0x836f80012800034c3133\",\n        role: \"has\",\n        G_source: \"0x84708002800000000000000c\",\n        target: 6,\n        source: 8,\n        is_act_Attr: true,\n      },\n      {\n        G_target: \"0x836f8003148000000000000000\",\n        role: \"has\",\n        G_source: \"0x84708002800000000000000c\",\n        target: 5,\n        source: 8,\n        is_act_Attr: true,\n      },\n      {\n        G_target: \"0x826e80028000000000000015\",\n        role: \"item\",\n        G_source: \"0x847080028000000000000014\",\n        target: 0,\n        source: 7,\n        is_act_Attr: false,\n      },\n      {\n        G_target: \"0x826e80018000000000000000\",\n        role: \"owner\",\n        G_source: \"0x847080028000000000000014\",\n        target: 2,\n        source: 7,\n        is_act_Attr: false,\n      },\n      {\n        G_target: \"0x826e8002800000000000000d\",\n        role: \"item\",\n        G_source: \"0x84708002800000000000000c\",\n        target: 1,\n        source: 8,\n        is_act_Attr: false,\n      },\n      {\n        G_target: \"0x826e80018000000000000000\",\n        role: \"owner\",\n        G_source: \"0x84708002800000000000000c\",\n        target: 2,\n        source: 8,\n        is_act_Attr: false,\n      },\n    ],\n    G_types: {\n      entity: [\"event\", \"log\"],\n      attribute: [\"eventName\", \"traceId\", \"index\"],\n      relation: [\"trace\"],\n      schema: [\n        {\n          source_name: \"trace\",\n          target_name: \"event\",\n          direction: \"down\",\n          role: \"item\",\n        },\n        {\n          role: \"owner\",\n          direction: \"down\",\n          target_name: \"log\",\n          source_name: \"trace\",\n        },\n        {\n          target_name: \"index\",\n          direction: \"down\",\n          role: \"has\",\n          source_name: \"trace\",\n        },\n        {\n          target_name: \"eventName\",\n          source_name: \"event\",\n          direction: \"down\",\n          role: \"has\",\n        },\n        {\n          direction: \"down\",\n          target_name: \"traceId\",\n          role: \"has\",\n          source_name: \"trace\",\n        },\n      ],\n    },\n    groups: [],\n    constraints: [],\n  },\n  grouped: {},\n};\n\ndata = Graph_Data.basic;\nconsole.log(data);\ncola\n  .nodes(data.nodes)\n  .links(data.links)\n  .groups(data.groups)\n  .linkDistance(100)\n  .avoidOverlaps(true)\n  .handleDisconnected(false)\n  .start(30);\n\nvar group = svg\n  .selectAll(\".group\")\n  .data(data.groups)\n  .enter()\n  .append(\"rect\")\n  .attr(\"rx\", grp_corner)\n  .attr(\"ry\", grp_corner)\n  .attr(\"class\", \"group\")\n  .style(\"fill\", function (d, i) {\n    return colours.find(\n      (colour) => colour.name == d.colour_list\n    )[\"colors\"][d.level];\n  })\n  .attr(\"stroke-width\", 1)\n  .attr(\"stroke\", function (d, i) {\n    return colours.find((colour) => colour.name == d.colour_list)[\"colors\"][7];\n  })\n  .call(cola.drag);\n\ngroup.append(\"title\").text(function (d) {\n  return d.label;\n});\n\nvar link = svg\n  .selectAll(\".link\")\n  .data(data.links)\n  .enter()\n  .append(\"line\")\n  .attr(\"class\", \"link\")\n  .style(\"stroke-width\", \"1px\")\n  .attr(\"stroke\", \"black\");\n\nvar node = svg\n  .selectAll(\".node\")\n  .data(data.nodes)\n  .enter()\n  .append(\"rect\")\n  .attr(\"class\", \"node\")\n  .attr(\"class\", (d) => d.type)\n  .attr(\"class\", (d) => d.G_name)\n  .attr(\"id\", (d) => d.G_id);\n\nvar label = svg\n  .selectAll(\".label\")\n  .data(data.nodes)\n  .enter()\n  .append(\"text\")\n  .attr(\"class\", \"label\")\n  .text((d) =>\n    d.type == \"attribute\" ? d.G_name + \": \" + d.value : d.G_name + \": \" + d.G_id\n  )\n  .attr(\"id\", (d) => \"heading-\" + d.G_id)\n  .style(\"font-size\", 10)\n  .style(\"text-anchor\", \"middle\")\n  .style(\"color\", (d) => text_colour(d))\n  .style(\"fill\", (d) => text_colour(d))\n  .style(\"pointer-events\", \"none\")\n  .call(cola.drag);\n\n// setup heading colours for attribute, entity and relation\nfunction text_colour(d) {\n  let colour = \"black\";\n  switch (d.type) {\n    case \"attribute\":\n      if (d.dtype == \"actual\") {\n        colour = att_t_colour;\n      } else {\n        colour = shad_t_colour;\n      }\n      break;\n    case \"entity\":\n      colour = ent_t_colour;\n      break;\n    case \"relation\":\n      colour = rel_t_colour;\n      break;\n    default:\n      colour = \"black\";\n      break;\n  }\n  return colour;\n}\n\nnode\n  .attr(\"width\", (d) => 100)\n  .attr(\"height\", (d) => d.height)\n  .attr(\"rx\", (d) => d.corner)\n  .attr(\"ry\", (d) => d.corner)\n  .attr(\"x\", (d) => d.x)\n  .attr(\"y\", (d) => d.y)\n  .attr(\"class\", (d) => d.G_name)\n  .style(\"fill\", (d) => d.colour)\n  .on(\"click\", function (d) {\n    d.fixed = true;\n  })\n  .call(cola.drag);\n\n// function to set dimensions and colours for shapes\nfunction nodeWidth(d) {\n  let headingid = \"#heading-\" + d.G_id;\n  let headingbbox = d3.select(headingid).node().getBBox();\n\n  d.width = d3.max([5, headingbbox.width]) + textPadding * 2;\n  d.height = headingbbox.height + textPadding * 2;\n\n  // attributes and entities rounded rectangle, relation is circle\n  switch (d.type) {\n    case \"attribute\":\n      d.corner = corner;\n      d.colour = att_colour;\n      d.x = headingbbox.x - textPadding;\n      d.y = headingbbox.y - textPadding;\n      if (d.dtype === \"shadow\") {\n        d.colour = shad_colour;\n      } else {\n        d.colour = att_colour;\n      }\n      break;\n\n    case \"entity\":\n      d.corner = corner;\n      d.colour = ent_colour;\n      d.x = headingbbox.x - textPadding;\n      d.y = headingbbox.y - textPadding;\n      break;\n\n    case \"relation\":\n      d.width = 16;\n      d.height = 16;\n      d.corner = 8;\n      d.colour = rel_colour;\n      d.x = headingbbox.x + headingbbox.width / 2 - d.width / 2;\n      d.y = headingbbox.y + d.height / 2;\n      break;\n\n    default:\n      break;\n  }\n  return d.width;\n}\n\ncola.on(\"tick\", function () {\n  link\n    .attr(\"x1\", function (d) {\n      return d.source.x;\n    })\n    .attr(\"y1\", function (d) {\n      return d.source.y;\n    })\n    .attr(\"x2\", function (d) {\n      return d.target.x;\n    })\n    .attr(\"y2\", function (d) {\n      return d.target.y;\n    });\n\n  node\n    .attr(\"x\", function (d) {\n      return d.x - d.width / 2;\n    })\n    .attr(\"y\", function (d) {\n      return d.y - d.height / 2;\n    });\n\n  group\n    .attr(\"x\", function (d) {\n      return d.bounds.x - pad;\n    })\n    .attr(\"y\", function (d) {\n      return d.bounds.y - pad;\n    })\n    .attr(\"width\", function (d) {\n      return d.bounds.width() + 2 * pad;\n    })\n    .attr(\"height\", function (d) {\n      return d.bounds.height() + 2 * pad;\n    });\n\n  label\n    .attr(\"x\", function (d) {\n      return d.x;\n    })\n    .attr(\"y\", function (d) {\n      var h = this.getBBox().height;\n      return d.y + h / 4;\n    });\n});\n$.send(\"output\", body.node().innerHTML);"
				},
				"x": 811,
				"y": 567,
				"component": "code1",
				"connections": {
					"output": [
						{
							"id": "il6ar3bkx",
							"index": "input"
						}
					]
				},
				"outputs": [
					{
						"id": "output",
						"name": "Output #1"
					}
				],
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code1",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il6ar2xgg": {
				"id": "il6ar2xgg",
				"config": {
					"random": true,
					"type": "string",
					"data": "",
					"restart": false
				},
				"x": 561,
				"y": 541,
				"component": "c5dxc3546a",
				"connections": {
					"output": [
						{
							"id": "il6aqzmhk",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "Triggers",
					"name": "Trigger",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il6ar3bkx": {
				"id": "il6ar3bkx",
				"config": {
					"path": "data.svg",
					"serializer": "text",
					"rewrite": true,
					"divider": "\\n"
				},
				"x": 1030,
				"y": 585,
				"component": "c37x8a2ca5",
				"connections": {},
				"template": {
					"icon": "fa fa-pencil",
					"group": "Files",
					"name": "File Writer",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il6c52nyx": {
				"id": "il6c52nyx",
				"config": {
					"permanent": "true",
					"redirect": "https://www.google.co.in/"
				},
				"x": 1280,
				"y": 404,
				"component": "c2jut4816d",
				"connections": {},
				"template": {
					"icon": "fa fa-share",
					"group": "REST API",
					"name": "Redirect",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			}
		},
		"variables": {},
		"sources": {},
		"origin": "http://localhost:8111",
		"dtcreated": "2022-07-27T08:15:26.472Z",
		"size": 110927,
		"variables2": {},
		"directory": "./database",
		"sandbox": false
	},
	"ft0tj001bu41d": {
		"paused": false,
		"id": "ft0tj001bu41d",
		"reference": "",
		"author": "",
		"group": "",
		"icon": "fas fa-microchip",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "TMS SVG",
		"components": {
			"cmbr250a48": "<script total>\n\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '2';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', restart: false };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n</body>",
			"cmfjj64e18": "<script total>\n\n\texports.name = 'Print';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'fa fa-print';\n\texports.author = 'Total.js';\n\texports.config = { repo: false, data: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\toutput && instance.status(output, 200);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.status('');\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer > div { margin: 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS .noscrollbar { max-height: 250px; }\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n</style>\n\n<readme>\nThe component prints incoming data in a JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Clear</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__html pre:Thelpers.jsonformat(JSON.stringify(value, null, '\\t'))__show\" class=\"hidden selectable\">\n\t\t\t<div class=\"noscrollbar\">\n\t\t\t\t<pre class=\"json\"></pre>\n\t\t\t</div>\n\t\t</div>\n\t</footer>\n</body>",
			"cmh84a7822": "<script total>\n\n\texports.name = 'Print JSON';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-print';\n\texports.author = 'Martin Smola';\n\texports.config = { repo: false, data: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\toutput && instance.status(output);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.status('');\n\t\t}\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer > div { margin: 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\n\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<readme>\nThe component prints incoming data in a JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\n\t</div>\n</settings>\n\n<script>\n\tFUNC.printjson_click = function(type, data) { // type = path/data\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\n\t};\n\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\n\t\tvar el = $(this);\n\t\tvar iscopy = el.hclass('fa-copy');\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\n\t\tsetTimeout(function(){\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\n\t\t}, 2000);\n\t});\n</script>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\n\t</footer>\n</body>",
			"coi2uf35a9": "<script total>\n\n\texports.id = 'code';\n\texports.name = 'Code';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total.js';\n\texports.config = { outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send(\\'output\\', data); // or simply send(data); which uses the first output\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.throw(e);\n\t\t\t\t\t$.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = [];\n\t\t\tfor (let i = 1; i <= config.outputs; i++)\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i === 1 ? '' : i), name: 'Output #' + i });\n\t\t\tinstance.save();\n\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n\n\tTo send data to the default output use `send(somedata);`\n\tTo send data to specific output when number of outputs > 1 use `$.send('outputX', somedata)` where `X` is output index, see example bellow:\n\t- first output--> `send(somedata)` or `$.send('output', somedata)`\n\t- second output --> `$.send('output2', somedata)`\n\t- ...\n\t- 5th output --> `$.send('output5', somedata)`\n\t- etc.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.outputs__type:number\" class=\"m\">Number of outputs</div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cqs6001fd7": "<script total>\n\n\texports.id = 'cheerio';\n\texports.name = 'Cheerio';\n\texports.group = 'HTML';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { fn: '// $: cheerio instance\\n// html: html string\\nvar body = $(\\'body\\').html();\\nreturn body;', path: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.npm = ['cheerio'];\n\t// exports.meta = { readonly: false, singleton: false, hidden: false };\n\n\texports.make = function(instance, config) {\n\n\t\t// instance.main.variables {Object}\n\t\t// instance.main.variables2 {Object}\n\t\t// instance.save();\n\t\t// instance.replace(str); // replaces {variable_name} for values from \"variables\" and \"variables2\"\n\t\t// instance.status(obj, [refresh_delay_in_ms]);\n\n\t\tconst cheerio = require('cheerio');\n\t\tvar get, fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\n\t\t\tvar input = CLONE(data);\n\t\t\tvar html;\n\t\t\tif (config.path) {\n\t\t\t\thtml = get(data);\n\t\t\t} else {\n\t\t\t\thtml = data;\n\t\t\t}\n\n\t\t\tif (typeof(html) !== 'string') {\n\t\t\t\t$.send('output', { error: 'invalid data, expected \"data{0}{1}\" to be a string'.format(config.path ? '.' : '', config.path) });\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst $$ = cheerio.load(html);\n\t\t\tvar result = fn($$, html);\n\n\t\t\t$.data = { result, input };\n\t\t\t$.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (config.path)\n\t\t\t\tget = new Function('data', 'return data?.{0};'.format(config.path.replace(/\\./g, '?.')));\n\n\t\t\tif (config.fn) {\n\t\t\t\ttry {\n\t\t\t\t\tfn = new Function('$', 'html', config.fn);\n\t\t\t\t\tinstance.status('');\n\t\t\t\t} catch(e){\n\t\t\t\t\tinstance.throw(e.stack);\n\t\t\t\t\tinstance.status('Invalid code');\n\t\t\t\t}\n\t\t\t} else\n\t\t\t\tinstance.status('Not configured');\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tUses [Cheerio](https://cheerio.js.org/index.html)\n\tPlease refer to the [documentation](https://cheerio.js.org/classes/Cheerio.html) for available functions.\n## Input\n```js\n\t<any>\n```\n\n## Output\n```js\n\t{\n\t\tresult: <the data returned from the code>,\n\t\tinput: <incomming data>\n\t}\n```\n\n## Example code\n```js\n\t// $: cheerio instance\n\t// html: html string\n\n\tvar txt = [];\n\t$('ul > li').each(function (i, elem) {\n\t\ttxt.push($(this).text());\n\t});\n\treturn txt;\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path\">Path to html</div>\n\t\t<div class=\"help m\">Leave empty if the 'data' itself is the html string, otherwise use dot notation. E.g.: { request: { body: '&lt;html&gt;...&lt;/html&gt;' }} -> `request.body` </div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.fn__type:javascript;minheight:300;parent:.ui-largeform-body;margin:60;tabs:true;trim:true\"></div>\n\t\t<div class=\"help\">Available variables: '&dollar;' -> cheerio instance, 'html' -> html string. Use 'return somedata;' to return whatever you want. Output data -> { result: somedata, input: inputdata }</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"!STATUS__text__show\"></footer>\n</body>",
			"cr19i7cad4": "<script total>\n\texports.id = 'comment';\n\texports.name = 'Comment';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { text: 'Comment' };\n\texports.meta = { settingswidth: 1100 };\n\n\texports.make = function(instance, config) {\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"codemirror__?.text__type:markdown;parent:auto;minheight:300;margin:65\"></div>\n\t\t<div class=\"help\">Supports Markdown</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS { max-width: 500px !important; }\n\t.CLASS .content { display: none; min-height: 0; }\n\t.CLASS footer { padding: 10px; font-size: 12px; border-top: 0 !important; }\n</style>\n\n<body>\n\t<footer data-bind=\"!CONFIG.text__html:value.markdown(el)\" class=\"markdown-small\"></footer>\n</body>",
			"cr2q3d353c": "<script total>\n\n\texports.name = 'Test';\n\texports.icon = 'fa fa-info';\n\texports.author = 'Total Avengers';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\t$.send('output', 'Hello world output');\n\t\t\t$.send('dynamic', 'Hello world dynamic');\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = config.outputs;\n\t\t\tinstance.save();\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\n\tTest\n</readme>\n\n<settings>\n</settings>\n\n<style>\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer></footer>\n</body>",
			"ctzb541236": "<script total>\n\n\texports.name = 'Model';\n\texports.group = 'Transformations';\n\texports.icon = 'fab fa-wpforms';\n\texports.author = 'Total.js';\n\texports.version = '2';\n\texports.config = { name: 'Model', path: '', schema: [], rewrite: true };\n\texports.inputs = [{ id: 'input', name: 'Data' }, { id: 'partial', name: 'Partial data' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar deferr = 'Invalid value';\n\t\tvar defvalues = {};\n\t\tvar path;\n\n\t\tvar preparenumber = function(val, err, max, min, float) {\n\t\t\tif (val != null && val != '') {\n\t\t\t\tval = typeof(val) === 'string' ? (float ? val.parseFloat() : val.parseInt()) : val;\n\t\t\t\tval = max ? (val > max || val < min ? null : val) : val;\n\t\t\t} else\n\t\t\t\tval = null;\n\t\t\treturn val;\n\t\t};\n\n\t\tinstance.preparedata = function(item, val, err, parent, partial) {\n\n\t\t\tvar path = (parent ? (parent + '.') : '') + item.name;\n\n\t\t\tswitch (item.type) {\n\t\t\t\tcase 'string':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'upper':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val ? val.toUpperCase() : '';\n\n\t\t\t\tcase 'lower':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val ? val.toLowerCase() : '';\n\n\t\t\t\tcase 'capitalize':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val ? val.capitalize() : '';\n\n\t\t\t\tcase 'email':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tval = val.replace(/\\s/g, '');\n\t\t\t\t\tval = val && val.isEmail() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'phone':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tval = val.trim().replace(/\\s|\\.|-|\\(|\\)/g, '');\n\t\t\t\t\tval = val && val.isPhone() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'boolean':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\treturn defvalues[item.name] || false;\n\n\t\t\t\t\treturn val == true || val === 'on' || val === 'true' || val == 1;\n\n\t\t\t\tcase 'zip':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tval = val.replace(/\\s/g, '');\n\t\t\t\t\tval = val && val.isZIP() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'date':\n\t\t\t\t\tif (val) {\n\t\t\t\t\t\tif (val instanceof Date)\n\t\t\t\t\t\t\treturn val;\n\t\t\t\t\t\tswitch (typeof(val)) {\n\t\t\t\t\t\t\tcase 'string':\n\t\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\t\t\treturn val.parseDate();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else\n\t\t\t\t\t\tval = defvalues[item.name] ? (defvalues[item.name] == NOOP ? new Date() : defvalues[item.name]) : null;\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn null;\n\n\t\t\t\tcase 'object':\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'number':\n\t\t\t\tcase 'float':\n\t\t\t\t\tval = preparenumber(val, err, null, true);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'integer':\n\t\t\t\t\tvar max = 2147483647;\n\t\t\t\t\tval = preparenumber(val, err, max, -max);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'smallint':\n\t\t\t\t\tvar max = 32768;\n\t\t\t\t\tval = preparenumber(val, err, max, -max);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'tinyint':\n\t\t\t\t\tval = preparenumber(val, err, 255, 0);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'base64':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.isBase64() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'json':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.isJSON() ? val : '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'url':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.isURL() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'uid':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.trim();\n\t\t\t\t\tval = val.isUID() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'guid':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.trim();\n\t\t\t\t\tval = val.isGUID() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tdefault:\n\t\t\t\t\tvar model = instance.main.meta.flow[item.type];\n\t\t\t\t\treturn model ? model.validatedata(val || {}, err, partial, path).data : null;\n\t\t\t}\n\t\t};\n\n\t\tinstance.validatedata = function(data, err, partial, parent) {\n\n\t\t\tvar obj = {};\n\t\t\tvar plus = parent ? (parent + '.') : '';\n\n\t\t\tif (!err)\n\t\t\t\terr = [];\n\n\t\t\tif (typeof(data) !== 'object') {\n\t\t\t\tdata = data + '';\n\t\t\t\tif (data.isJSON()) {\n\t\t\t\t\tdata = data.parseJSON(true);\n\t\t\t\t} else {\n\t\t\t\t\terr.push({ name: parent, error: 'Invalid data' });\n\t\t\t\t\treturn { error: err };\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!data) {\n\t\t\t\terr.push({ name: parent, error: 'Invalid data' });\n\t\t\t\treturn { error: err };\n\t\t\t}\n\n\t\t\tfor (var item of config.schema) {\n\t\t\t\tvar val = data[item.name];\n\n\t\t\t\tif (partial && val === undefined)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tif (item.array) {\n\n\t\t\t\t\tobj[item.name] = [];\n\n\t\t\t\t\tif (val) {\n\n\t\t\t\t\t\tif (!(val instanceof Array))\n\t\t\t\t\t\t\tval = [val];\n\n\t\t\t\t\t\tfor (var i = 0; i < val.length; i++) {\n\t\t\t\t\t\t\tvar m = val[i];\n\t\t\t\t\t\t\tvar r = instance.preparedata(item, m, err, plus, partial);\n\t\t\t\t\t\t\tobj[item.name].push(r);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif (item.required && !obj[item.name].length)\n\t\t\t\t\t\terr.push({ name: item.name, path: plus + item.name, error: deferr });\n\n\t\t\t\t} else\n\t\t\t\t\tobj[item.name] = instance.preparedata(item, val, err, parent, partial);\n\t\t\t}\n\n\t\t\treturn { data: obj, error: err.length ? err : null };\n\t\t};\n\n\t\tvar findvalue = function(data) {\n\t\t\tvar obj = data;\n\t\t\tfor (var m of path) {\n\t\t\t\tobj = obj[m];\n\t\t\t\tif (!obj)\n\t\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn obj;\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (path)\n\t\t\t\tdata = findvalue(data);\n\n\t\t\tvar err = [];\n\t\t\tvar output = instance.validatedata(data, err, $.input === 'partial');\n\n\t\t\tif (output.error) {\n\t\t\t\t$.send('error', output.error);\n\t\t\t} else {\n\t\t\t\tif (path && config.rewrite)\n\t\t\t\t\tdata = output.data;\n\t\t\t\t$.send('output', path && config.rewrite ? $.data : output.data);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tpath = config.path ? config.path.split('.') : null;\n\t\t\tdefvalues = {};\n\t\t\tfor (var item of config.schema) {\n\t\t\t\tif (item.default) {\n\t\t\t\t\tswitch (item.type) {\n\t\t\t\t\t\tcase 'tinyint':\n\t\t\t\t\t\tcase 'smallint':\n\t\t\t\t\t\tcase 'integer':\n\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\tcase 'float':\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default.parseFloat();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'object':\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tdefvalues[item.name] = new Function('return ' + item.default)();\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'date':\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default === 'now' ? NOOP : item.default.parseDate('yyyy-MM-dd HH:mm:ss');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'boolean':\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default === 'true' || item.default === 'on' || item.default === '1';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis component prepares incoming data according to the defined schema. Output is prepared model or Error.\n</readme>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding bg-smoke\">\n\t\t\t<div data---=\"input__?.name__required:1\" class=\"m\">Model name</div>\n\t\t\t<div data---=\"input__?.path__placeholder:path.to.property;monospace:1\">Load data from the specific property/field</div>\n\t\t\t<div class=\"help\">Optional. The data for the model will be loaded from the specific property/field.</div>\n\t\t\t<div data-bind=\"?.path__show\" class=\"hidden\">\n\t\t\t\t<hr />\n\t\t\t\t<div data---=\"input__?.rewrite__type:checkbox\"><b>Rewrite value only</b> (otherwise, it will replace entire message data)</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"padding\">\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmprestmodel.add\"><i class=\"fa fa-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Fields</label>\n\t\t\t</div>\n\t\t\t<div data-bind=\"?.schema__template:figure --> data-id__show:value && value.length\" class=\"fields m\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\"{{ if m.required }} class=\"isrequired\"{{ fi }}>\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmprestmodel.move\" data-type=\"up\" title=\"Move up\"><i class=\"far fa fa-arrow-up\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmprestmodel.move\" data-type=\"down\" title=\"Move down\"><i class=\"far fa fa-arrow-down\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmprestmodel.rem\" title=\"Remove\"><i class=\"far fa-trash-alt red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"required exec{{ if m.required }} is{{ fi }}\" data-exec=\"tmprestmodel.required\">required</div>\n\t\t\t\t\t\t<div class=\"array exec{{ if m.array }} is{{ fi }}\" data-exec=\"tmprestmodel.array\">Array</div>\n\t\t\t\t\t\t<div class=\"type hellip exec monospace\" data-exec=\"tmprestmodel.type\">{{ m.type | restmodeltype | raw }}</div>\n\t\t\t\t\t\t<div class=\"default\">\n\t\t\t\t\t\t\t<div class=\"edit monospace b\" data-edit=\"exec:tmprestmodel.default;selectall:1\">{{ m.default | empty }}</div>\n\t\t\t\t\t\t\t<div class=\"help nmt\">Default value</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"name\">\n\t\t\t\t\t\t\t<div class=\"monospace edit hellip\" data-edit=\"exec:tmprestmodel.name;required:1\">{{ m.name }}</div>\n\t\t\t\t\t\t\t<div class=\"error\">Error message: <span class=\"edit hellip\" data-edit=\"exec:tmprestmodel.error;required:1\">{{ m.error | empty('Invalid value') }}</span></div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"message message-alert\">If you want to declare a nested object, then you can create another model and link it with this model.</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS { min-width: 220px; }\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 40px; border-top: 1px solid #E0E0E0; line-height: 39px; font-size: 12px; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 40px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .name { margin-right: 350px; padding: 6px 8px 0; line-height: 14px; }\n\t.CLASS-settings figure .name > div:first-child { font-weight: bold; outline: 0; }\n\t.CLASS-settings figure .error { font-size: 11px; color: #888; }\n\t.CLASS-settings figure .error span { color: #B9261A; outline: 0; min-width: 150px; }\n\t.CLASS-settings figure .default { float: right; width: 180px; border-left: 1px solid #E0E0E0; padding: 0 8px; cursor: pointer; line-height: 16px; padding-top: 4px; height: 40px; }\n\t.CLASS-settings figure .type { float: right; width: 180px; border-left: 1px solid #E0E0E0; padding: 0 8px; cursor: pointer; background-color: rgba(0,0,0,0.03); }\n\t.CLASS-settings figure .required { float: right; width: 70px; padding: 0 8px; border-left: 1px solid #E0E0E0; text-align: center; font-size: 11px; cursor: pointer; text-decoration: line-through; }\n\t.CLASS-settings figure .required.is { font-weight: bold; text-decoration: none; color: #EC8632; }\n\t.CLASS-settings figure .array { float: right; width: 70px; padding: 0 8px; border-left: 1px solid #E0E0E0; text-align: center; font-size: 11px; cursor: pointer; text-decoration: line-through;}\n\t.CLASS-settings figure .array.is { font-weight: bold; text-decoration: none; color: #EC8632; }\n\t.CLASS-settings figure .controls { float: right; width: 70px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure.isrequired { background-color: rgba(255,254,209,0.3); }\n\t.CLASS-settings figure.ismoved { background-color: rgba(92,29,196,0.3) !important; }\n\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure.isrequired { background-color: rgba(255,254,209,0.1); }\n\t.ui-dark .CLASS-settings figure .edit-open { background-color: #363636; }\n\t.ui-dark .CLASS-settings figure .default { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .type { border-left-color: #404040; background-color: rgba(100,100,100,0.1); }\n\t.ui-dark .CLASS-settings figure .required { border-left-color: #404040; }\n\t.ui-dark .CLASS-settings figure .array { border-left-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b>Model:</b> <span data-bind=\"CONFIG.name__text\"></span>\n\t</header>\n\t<footer>\n\t\t<span class=\"exec link\" data-exec=\"/copy\"><i class=\"far fa-copy mr5\"></i>Copy fields as Markdown</span>\n\t</footer>\n</body>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tvar tmp = W.tmprestmodel;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tscope.push('schema', { id: Math.random().toString(36).substring(4), name: 'name', type: 'string', required: true, array: false });\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.type = function(el) {\n\t\t\t\t\tvar opt = {};\n\t\t\t\t\topt.element = el;\n\t\t\t\t\topt.align = 'left';\n\t\t\t\t\topt.raw = true;\n\t\t\t\t\topt.items = tmp.types;\n\t\t\t\t\topt.callback = function(selected) {\n\t\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\tif (item)\n\t\t\t\t\t\t\titem.type = selected.id;\n\t\t\t\t\t\tel.html(selected.name);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t};\n\t\t\t\t\tSETTER('directory/show', opt);\n\t\t\t\t};\n\n\t\t\t\ttmp.name = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tif (opt.value) {\n\t\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\titem.name = opt.value;\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tnext(true);\n\t\t\t\t\t} else\n\t\t\t\t\t\tnext(opt.html);\n\t\t\t\t};\n\n\t\t\t\ttmp.move = function(el) {\n\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar container = el.closest('figure');\n\t\t\t\t\tvar schema = scope.get().schema;\n\t\t\t\t\tvar index = schema.findIndex('id', id);\n\t\t\t\t\tvar is = false;\n\t\t\t\t\tvar isup = el.attrd('type') === 'up';\n\n\t\t\t\t\tif (isup) {\n\t\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index - 1];\n\t\t\t\t\t\t\tschema[index - 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (index <= schema.length - 1) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index + 1];\n\t\t\t\t\t\t\tschema[index + 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is) {\n\t\t\t\t\t\tNODEMOVE(container, isup);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tcontainer.aclass('ismoved').rclass('ismoved', 500);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttmp.default = function(opt, next) {\n\t\t\t\t\tif (opt.value) {\n\t\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\n\t\t\t\t\t\tif (opt.value === '---')\n\t\t\t\t\t\t\tdelete opt.value;\n\n\t\t\t\t\t\titem.default = opt.value || undefined;\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tnext(true);\n\t\t\t\t\t} else\n\t\t\t\t\t\tnext(opt.html);\n\t\t\t\t};\n\n\t\t\t\ttmp.error = function(opt, next) {\n\t\t\t\t\tif (opt.value) {\n\t\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\titem.error = opt.value || undefined;\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tnext(true);\n\t\t\t\t\t} else\n\t\t\t\t\t\tnext(opt.html);\n\t\t\t\t};\n\n\t\t\t\ttmp.required = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.required = !item.required;\n\t\t\t\t\tel.tclass('is', item.required);\n\t\t\t\t\tel.closest('figure').tclass('isrequired', item.required);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.array = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.array = !item.array;\n\t\t\t\t\tel.tclass('is', item.array);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\tThelpers.restmodeltype = function(val) {\n\t\t\t\t\treturn tmp.types.findValue('id', val, 'name', DEF.empty);\n\t\t\t\t};\n\n\t\t\t\tW.tmprestmodel = tmp;\n\t\t\t}\n\n\t\t\ttmp.types = [];\n\t\t\ttmp.types.push({ id: 'string', name: 'String' });\n\t\t\ttmp.types.push({ id: 'number', name: 'Number' });\n\t\t\ttmp.types.push({ id: 'email', name: 'Email address' });\n\t\t\ttmp.types.push({ id: 'phone', name: 'Phone number' });\n\t\t\ttmp.types.push({ id: 'boolean', name: 'Boolean' });\n\t\t\ttmp.types.push({ id: 'zip', name: 'ZIP' });\n\t\t\ttmp.types.push({ id: 'date', name: 'Date' });\n\t\t\ttmp.types.push({ id: 'float', name: 'Float' });\n\t\t\ttmp.types.push({ id: 'integer', name: 'Integer' });\n\t\t\ttmp.types.push({ id: 'tinyint', name: 'Tinyint' });\n\t\t\ttmp.types.push({ id: 'smallint', name: 'Smallint' });\n\t\t\ttmp.types.push({ id: 'upper', name: 'String - Upper case' });\n\t\t\ttmp.types.push({ id: 'lower', name: 'String - Lower case' });\n\t\t\ttmp.types.push({ id: 'slug', name: 'String - Slug' });\n\t\t\ttmp.types.push({ id: 'capitalize', name: 'String - Capitalize' });\n\t\t\ttmp.types.push({ id: 'uid', name: 'UI' + 'D' });\n\t\t\ttmp.types.push({ id: 'guid', name: 'GUI' + 'D' });\n\t\t\ttmp.types.push({ id: 'object', name: 'Object' });\n\t\t\ttmp.types.push({ id: 'json', name: 'JSON' });\n\t\t\ttmp.types.push({ id: 'base64', name: 'Base64' });\n\n\t\t\tfor (var key in flow.data) {\n\t\t\t\tvar m = flow.data[key];\n\t\t\t\tif (m.Component && m.Component.name === 'Model')\n\t\t\t\t\ttmp.types.push({ id: m.id, name: 'Model: <b>' + m.config.name.encode() + '</b>' });\n\t\t\t}\n\n\t\t};\n\n\t\texports.copy = function(el) {\n\n\t\t\tvar config = exports.config;\n\t\t\tvar builder = [];\n\n\t\t\tbuilder.push('__Model: ' + config.name + '__:');\n\t\t\tbuilder.push('');\n\n\t\t\tfor (var m of config.schema) {\n\n\t\t\t\tvar type = m.type;\n\t\t\t\tif (type.charAt(0) === 'i' && type !== 'integer') {\n\t\t\t\t\tvar tmp = flow.data[type];\n\t\t\t\t\tif (tmp)\n\t\t\t\t\t\ttype = tmp.config.name;\n\t\t\t\t\telse\n\t\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tbuilder.push('- `{0} {{1}}`'.format(m.name, type) + (m.array ? ' array' : '') + (m.required ? ' __required__' : ''));\n\t\t\t}\n\n\t\t\tSETTER('clipboard/copy', builder.join('\\n'));\n\t\t\tSETTER('notify/success', 'The schema has been copied into the clipboard');\n\t\t};\n\n\t});\n\n</script>",
			"csl8z67b6d": "<script total>\n\n\texports.name = 'Counter';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-calculator';\n\texports.author = 'Total.js';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance) {\n\n\t\tvar count = 0;\n\n\t\tinstance.message = function($) {\n\t\t\tcount++;\n\t\t\tinstance.status(count);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function(data) {\n\t\t\tcount = 0;\n\t\t\tinstance.status(count);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 35px; margin: 0; padding: 0 10px 10px; font-weight: bold; text-align: center; }\n</style>\n\n<readme>\nThe component counts incoming messages.\n</readme>\n\n<body>\n\t<header>\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Reset</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"STATUS__text:(value || 0).format(0)\" class=\"status\"></footer>\n</body>",
			"cij905b3d1": "<script total>\n\n\texports.name = 'Query';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total Avengers';\n\texports.version = '1';\n\texports.config = { query: '', dependencies: '', database: ''};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\t// exports.npm = ['npm_module_1', 'npm_module_2@version'];\n\n\texports.make = function(instance, config) {\n\n\t\t// instance.main.variables {Object}\n\t\t// instance.main.variables2 {Object}\n\t\t// instance.save();\n\t\t// instance.replace(str); // replaces {variable_name} for values from \"variables\" and \"variables2\"\n\n\t\tinstance.message = function($) {\n\t\t\t//var data = $.data;\n\t\t\tvar data = {\n\t\t\t\t\"query\": config.query,\n\t\t\t\t\"dependencies\": config.dependencies,\n\t\t\t\t\"database\": config.database\n\t\t\t}\n\t\t\t$.send('output', data);\n\t\t\t// or $.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\t// this instance is closed\n\t\t};\n\n\t\tinstance.variables = function(variables) {\n\t\t\t// FlowStream variables are changed\n\t\t};\n\n\t\tinstance.variables2 = function(variables) {\n\t\t\t// Global variables are changed\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nMarkdown readme\n\n```js\nvar total = 'Hello world!';\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\tSETTINGS for this component (optional)\n\n\t\t<div data---=\"input__?.database__required:1\">Database</div>\n\t\t<div data---=\"input__?.dependencies__required:1\">Dependencies</div>\n\t\t<div data---=\"codemirror__?.query__type:sql;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\">Query</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n\t// Client-side script\n\t// Optional, you can remove it\n\n\t// A custom helper for the component instances\n\t// The method below captures each instance of this component\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar name = exports.name + ' --> ' + exports.id;\n\n\t\tconsole.log(name, 'initialized' + (reinit ? ' : UPDATE' : ''));\n\n\t\texports.settings = function(meta) {\n\t\t\t// Triggered when the user opens settings\n\t\t\tconsole.log(name, 'settings', meta);\n\t\t};\n\n\t\texports.configure = function(config, isinit) {\n\t\t\t// Triggered when the config is changed\n\t\t\tconsole.log(name, 'configure', config);\n\t\t};\n\n\t\texports.status = function(status, isinit) {\n\t\t\t// Triggered when the status is changed\n\t\t\tconsole.log(name, 'status', status);\n\t\t};\n\n\t\texports.note = function(note, isinit) {\n\t\t\t// Triggered when the note is changed\n\t\t\tconsole.log(name, 'note', note);\n\t\t};\n\n\t\texports.variables = function(variables) {\n\t\t\t// Triggered when the variables are changed\n\t\t\tconsole.log(name, 'variables', variables);\n\t\t};\n\n\t\texports.variables2 = function(variables) {\n\t\t\t// Triggered when the variables2 are changed\n\t\t\tconsole.log(name, 'variables2', variables);\n\t\t};\n\n\t\texports.close = function() {\n\t\t\t// Triggered when the instance is closing due to some reasons\n\t\t\tconsole.log(name, 'close');\n\t\t};\n\n\t});\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>Learn from existing components</footer>\n</body>",
			"c1nkj9d202": "<script total>\n\n\texports.name = 'File Writer';\n\texports.group = 'Files';\n\texports.version = '1';\n\texports.icon = 'fa fa-pencil';\n\texports.author = 'Total.js';\n\texports.config = { path: '', serializer: 'json', rewrite: true, divider: '\\\\n' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar path;\n\t\tvar divider;\n\t\tvar timeout;\n\n\t\tvar replacewhitechar = function(text) {\n\t\t\tswitch (text[1]) {\n\t\t\t\tcase 'n':\n\t\t\t\t\treturn '\\n';\n\t\t\t\tcase 'r':\n\t\t\t\t\treturn '\\r';\n\t\t\t\tcase 't':\n\t\t\t\t\treturn '\\t';\n\t\t\t}\n\t\t\treturn text;\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.path)\n\t\t\t\treturn;\n\n\t\t\tvar data = $.data;\n\n\t\t\tswitch (config.serializer) {\n\t\t\t\tcase 'json':\n\t\t\t\t\tdata = JSON.stringify($.data);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'text':\n\t\t\t\t\tdata = data + '';\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (!(data instanceof Buffer)) {\n\t\t\t\tif (typeof(data) !== 'string')\n\t\t\t\t\tdata = data + '';\n\t\t\t\tdata = Buffer.from(data, 'utf8');\n\t\t\t}\n\n\t\t\tNOW = new Date();\n\t\t\tinstance.status({ used: NOW, size: data.length });\n\n\t\t\tif (config.rewrite) {\n\t\t\t\tF.Fs.writeFile(path, data, NOOP);\n\t\t\t} else {\n\t\t\t\tif (divider)\n\t\t\t\t\tdata = Buffer.concat([data, divider]);\n\t\t\t\tF.Fs.appendFile(path, data, NOOP);\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tpath = config.path[0] === '~' ? PATH.root(config.path.substring(1)) : config.path;\n\t\t\tdivider = config.divider ? Buffer.from(config.divider.replace(/\\\\[a-z]/g, replacewhitechar), 'utf8') : null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path__required:1;placeholder:/www/flowstream/data.json\"><b>Path</b></div>\n\t\t<div class=\"help m\">Absolute path to the file. The path starts with the <code>~</code> char will use a filename in the project's root directory.</div>\n\t\t<div data---=\"input__?.serializer__dirsource:json|JSON,text|Text,buffer|Buffer;required:1__'json'\" class=\"m\">Serializer</div>\n\t\t<div data---=\"input__?.rewrite__type:checkbox__true\">Rewrite content</div>\n\t\t<div data-bind=\"?.rewrite__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t\t<div data---=\"input__?.divider\">Divider</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component writes incoming data into the file.\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\t.CLASS hr { margin: 5px 0; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><i class=\"far fa-calendar mr5\"></i><span data-bind=\"STATUS.used__text__format:yyyy-MM-dd HH:mm:ss__empty\"></span></div>\n\t\t<div><i class=\"fa fa-calculator mr5\"></i><span data-bind=\"STATUS.size__text__helper:filesize__empty\"></span></div>\n\t\t<hr />\n\t\t<div data-bind=\"CONFIG.path__text__empty\"></div>\n\t</footer>\n</body>",
			"cy4pw82f66": "<script total>\n\n\texports.name = 'Request';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'fas fa-cloud-download';\n\texports.author = 'Total.js';\n\texports.config = { url: '', method: 'GET', dnscache: true, insecure: false, nocookies: true, xhr: false, parse: true, timeout: 10000, limit: 1024 * 500, responsebody: true, headers: {}, cookies: {}, serialize: null, send: 'all' };\n\texports.inputs = [{ id: 'payload', name: 'Payload' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar opt = {};\n\n\t\t\tfor (var key in config.headers) {\n\t\t\t\tif (!opt.headers)\n\t\t\t\t\topt.headers = {};\n\t\t\t\topt.headers[$.variables(key, true)] = $.variables(config.headers[key], true);\n\t\t\t}\n\n\t\t\tfor (var key in config.cookies) {\n\t\t\t\tif (!opt.cookies)\n\t\t\t\t\topt.cookies = {};\n\t\t\t\topt.cookies[$.variables(key, true)] = $.variables(config.cookies[key], true);\n\t\t\t}\n\n\t\t\topt.method = config.method;\n\t\t\topt.url = $.variables(config.url, true);\n\t\t\topt.cook = true;\n\n\t\t\tif (config.serialize) {\n\t\t\t\tswitch (config.serialize) {\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\topt.type = 'json';\n\t\t\t\t\t\tif (opt.method !== 'GET')\n\t\t\t\t\t\t\topt.body = JSON.stringify($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\t\topt.type = 'urlencoded';\n\t\t\t\t\t\tif (opt.method === 'GET')\n\t\t\t\t\t\t\topt.query = U.toURLEncode($.data);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\topt.body = U.toURLEncode($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\topt.type = 'raw';\n\t\t\t\t\t\topt.body = $.data;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.dnscache)\n\t\t\t\topt.dnscache = true;\n\n\t\t\tif (config.insecure)\n\t\t\t\topt.insecure = true;\n\n\t\t\tif (config.nocookies)\n\t\t\t\topt.nocookies = true;\n\n\t\t\tif (config.xhr)\n\t\t\t\topt.xhr = true;\n\n\t\t\tif (config.timeout)\n\t\t\t\topt.timeout = config.timeout;\n\n\t\t\tif (config.limit)\n\t\t\t\topt.limit = config.limit;\n\n\t\t\tif (config.send === 'chunks')\n\t\t\t\topt.custom = true;\n\n\t\t\topt.callback = function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\t$.data = err + '';\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (opt.custom) {\n\t\t\t\t\tresponse.stream.on('data', data => $.send('response', data));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'headers') {\n\t\t\t\t\t$.send('response', response.headers);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'status') {\n\t\t\t\t\t$.send('response', response.status);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbody = response.body;\n\n\t\t\t\tif (config.parse) {\n\t\t\t\t\tvar type = response.headers['content-type'] || '';\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tvar index = type.lastIndexOf(';');\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\ttype = type.substring(0, index).trim();\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type.toLowerCase()) {\n\t\t\t\t\t\tcase 'text/xml':\n\t\t\t\t\t\tcase 'application/xml':\n\t\t\t\t\t\t\tbody = body ? body.parseXML(true) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = body ? DEF.parsers.urlencoded(body) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tcase 'text/json':\n\t\t\t\t\t\t\tbody = body ? body.parseJSON(true) : null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbody = body && body.isJSON() ? body.parseJSON(true) : body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tswitch (config.send) {\n\t\t\t\t\tcase 'all':\n\t\t\t\t\t\t$.data = { headers: response.headers, cookies: response.cookies, status: response.status, host: response.host, body: body };\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'response':\n\t\t\t\t\t\t$.data = body;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$.send('response');\n\t\t\t};\n\n\t\t\tREQUEST(opt);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; overflow-wrap: break-word; }\n\t.CLASS .status span { padding: 2px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component makes a HTTP request. The response data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer class=\"hidden\" data-bind=\"CONFIG.url__show\">\n\t\t<div class=\"status\" data-bind=\"CONFIG__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"monospace\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding bg-smoke npb\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__dirsource:GET|GET,POST|POST,PUT|PUT,DELETE|DELETE,PATCH|PATCH,API|API;required:1\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\"><b>URL address</b></div>\n\t\t\t\t<div class=\"help\">URL address supports dynamic variables in the form <code>{key}</code></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__type:number\">Timeout</div>\n\t\t\t\t<div class=\"help\"><i class=\"far fa-clock-o\"></i><span data-bind=\"?.timeout__text:((value||0)/1000).floor(2)+' sec.'\"></span><br />Timeout <b>in milliseconds</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__type:number\">Max. size</div>\n\t\t\t\t<div class=\"help\"><i class=\"fas fa-calculator\"></i><span data-bind=\"?.limit__text:(value||0).filesize()\"></span><br />Response max. size <b>in bytes</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,response|Response body,chunks|Chunks of buffer,headers|Headers only,status|Status code\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.serialize__dirsource:json|JSON,urlencoded|URL encode,buffer|Buffer;dirraw:1;placeholder:Choose serialization;dirempty:None\" class=\"m\">Data serialization</div>\n\t\t<div data---=\"keyvalue__?.headers__placeholderkey:Header name;placeholdervalue:Header value and press enter\">Headers</div>\n\t\t<div class=\"help m\">Headers support dynamic variables in the form <code>{key}</code></div>\n\t\t<div data---=\"keyvalue__?.cookies__placeholderkey:Cookie name;placeholdervalue:Cookie value and press enter\">Cookies</div>\n\t\t<div class=\"help m\">Cookies support dynamic variables in the form <code>{key}</code></div>\n\t\t<hr />\n\t\t<div data---=\"input__?.parse__type:checkbox\">Parse Response to Object</div>\n\t\t<div data---=\"input__?.dnscache__type:checkbox\">Enable DNS cache</div>\n\t\t<div data---=\"input__?.insecure__type:checkbox\">Allow insecure connection</div>\n\t\t<div data---=\"input__?.xhr__type:checkbox\">Add XHR header</div>\n\t</div>\n</settings>",
			"pubsrcvjer4415aXsvg_insert": "<script total>\n\n\texports.name = 'TMS Example';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcvjer4415a', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcvjer4415aXsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <http://localhost:8112>\n- Channel: __publish__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Example / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcvjer4415aXsvg_insert": "<script total>\n\n\texports.name = 'TMS Example';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcvjer4415a', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcvjer4415a'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['svg_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'svg_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcvjer4415aXsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <http://localhost:8112>\n- Channel: __subscribe__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"svg_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"stepId\": {\n        \"type\": \"string\"\n      },\n      \"flowId\": {\n        \"type\": \"string\"\n      },\n      \"stepName\": {\n        \"type\": \"string\"\n      },\n      \"path\": {\n        \"type\": \"string\"\n      },\n      \"projectId\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Example / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrcvjer4415aXsvg_query": "<script total>\n\n\texports.name = 'TMS Example';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcvjer4415a', 'svg_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcvjer4415a'];\n\t\t\tif (socket && socket.calls && socket.calls['svg_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'svg_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcvjer4415aXsvg_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_query\n- URL address: <http://localhost:8112>\n- Channel: __call__\n- JSON schema `svg_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Example / <b>svg_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcvjer4415aXpayload_insert": "<script total>\n\n\texports.name = 'TMS Example';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcvjer4415a', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcvjer4415a'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcvjer4415aXpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <http://localhost:8112>\n- Channel: __subscribe__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Example / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcvjer4415aXpayload_remove": "<script total>\n\n\texports.name = 'TMS Example';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcvjer4415a', 'payload_remove'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcvjer4415a'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_remove']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_remove', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcvjer4415aXpayload_remove .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_remove\n- URL address: <http://localhost:8112>\n- Channel: __subscribe__\n- JSON schema `payload_remove.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_remove\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Example / <b>payload_remove</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrcvjer4415aXpayload_query": "<script total>\n\n\texports.name = 'TMS Example';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcvjer4415a', 'payload_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcvjer4415a'];\n\t\t\tif (socket && socket.calls && socket.calls['payload_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'payload_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcvjer4415aXpayload_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_query\n- URL address: <http://localhost:8112>\n- Channel: __call__\n- JSON schema `payload_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Example / <b>payload_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcvjer4415aXpayload_update": "<script total>\n\n\texports.name = 'TMS Example';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcvjer4415a', 'payload_update'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcvjer4415a'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_update']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_update', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcvjer4415aXpayload_update .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_update\n- URL address: <http://localhost:8112>\n- Channel: __subscribe__\n- JSON schema `payload_update.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_update\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Example / <b>payload_update</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"pubsrcvjer4415aXpayload_insert": "<script total>\n\n\texports.name = 'TMS Example';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcvjer4415a', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcvjer4415aXpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <http://localhost:8112>\n- Channel: __publish__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Example / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>"
		},
		"design": {
			"il5tummbw": {
				"id": "il5tummbw",
				"config": {
					"random": true,
					"type": "string",
					"data": "",
					"restart": false
				},
				"x": 42,
				"y": 632,
				"component": "cmbr250a48",
				"connections": {
					"output": [
						{
							"id": "il5tuwtah",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "Triggers",
					"name": "Trigger",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il5tup8m9": {
				"id": "il5tup8m9",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 767,
				"y": 88,
				"component": "cmfjj64e18",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il5tuwtah": {
				"id": "il5tuwtah",
				"config": {
					"outputs": 1,
					"code": "// instance {FlowStreamInstance};\n// $ {FlowStreamMessage};\n// vars {Object};\n// repo {Object};\n// data {String/Number/Boolean/Date/Buffer/Object};\n// $.send('output', data); // or simply send(data); which uses the first output\n// $.destroy();\n// $.throw(err);\n\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\n\n$.send('output',\n\t   {\n\t\t\"name\": \"connection1\",\n\t\t\"description\": \"connection1\",\n\t\t\"host\": \"localhost\",\n\t\t\"icon\": \"gear\",\n\t\t\"id\": \"connection1\",\n\t\t\"type\": \"connection\",\n\t\t\"scope\": \"local\",\n\t\t\"port\": 8729\n\t   }\n\t  );\n$.destroy();"
				},
				"x": 337,
				"y": 667,
				"component": "coi2uf35a9",
				"connections": {
					"output": [
						{
							"id": "il5tvst90",
							"index": "input"
						}
					]
				},
				"outputs": [
					{
						"id": "output",
						"name": "Output #1"
					}
				],
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il5tvst90": {
				"id": "il5tvst90",
				"config": {},
				"x": 672,
				"y": 639,
				"component": "csl8z67b6d",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "Common",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il5uoin1t": {
				"id": "il5uoin1t",
				"config": {
					"query": "var d3 = require(\"d3\"),\n    jsdom = require(\"jsdom\");\n\nconst { JSDOM } = jsdom;\n\nconst { document } = (new JSDOM('')).window;\nglobal.document = document;\n\n\nvar theme = {\n        \tattribute: {colorlist: \"Oranges\", cindex: 7, tcolorlist: \"Greys\", tindex: 0 },\n          entity: {colorlist: \"Blues\", cindex: 7, tcolorlist: \"Greys\", tindex: 0 },\n          relation: {colorlist: \"Blue-Green\", cindex: 6, tcolorlist: \"Greys\", tindex: 7 },\n          shadow: {colorlist: \"Oranges\", cindex: 2, tcolorlist: \"Greys\", tindex: 7 }\n        }\n\n\n    \t\tvar svg = d3.select(document).select(\"body\")\n               .append(\"svg\")\n               .attr(\"width\", \"calc(100vw)\")\n               .attr(\"height\", \"calc(100vh)\")\n               .call(d3.zoom().on(\"zoom\", function () {\n                  svg.attr(\"transform\", d3.event.transform)\n               }))\n               .append(\"g\")\n\n\t\t\t\tconst height = 500;\n\t\t\t\tconst width = +d3.select(\"body\").attr('width');\n\n      \t// setup the theme colour\n\n\t\t\t\tconst textPadding = 8;\n\t\t\t\tconst corner = 5;\n      \tconst grp_corner = 8;\n      \tconst pad = 5;\n        var ent_colour = '#03396c';\n        var ent_t_colour = 'white';\n        var att_colour = '#ff4d00';\n        var att_t_colour = 'white';\n      \tvar shad_colour = \"#ff4d00\";\n      \tvar shad_t_colour = 'white';\n        var rel_colour = '#007777';\n        var rel_t_colour = 'black';\n      \tvar colours;\n\n      \td3.json(\"data\\\\color.json\", function (error, colors) {\n          colours = colors\n          // load the colours from the theme\n          ent_colour = colors.find(colour => colour.name == theme.entity.colorlist)['colors'][theme.entity.cindex];\n          ent_t_colour = colors.find(colour => colour.name == theme.entity.tcolorlist)['colors'][theme.entity.tindex];\n          att_colour = colors.find(colour => colour.name == theme.attribute.colorlist)['colors'][theme.attribute.cindex];\n          att_t_colour = colors.find(colour => colour.name == theme.attribute.tcolorlist)['colors'][theme.attribute.tindex];\n          shad_colour = colors.find(colour => colour.name == theme.shadow.colorlist)['colors'][theme.shadow.cindex];\n          shad_t_colour = colors.find(colour => colour.name == theme.shadow.tcolorlist)['colors'][theme.shadow.tindex];\n        \trel_colour = colors.find(colour => colour.name == theme.relation.colorlist)['colors'][theme.relation.cindex];\n          rel_t_colour = colors.find(colour => colour.name == theme.relation.tcolorlist)['colors'][theme.relation.tindex];\n        });\n\n        var cola = cola.d3adaptor(d3)\n            .size([width, height]);\n\n        // graph.json\n      \td3.json(\"data\\\\basic.json\", function (error, graph) {\n          data = graph.basic;\n            cola\n                .nodes(data.nodes)\n                .links(data.links)\n          \t\t\t.groups(data.groups)\n                .linkDistance(100)\n                .avoidOverlaps(true)\n                .handleDisconnected(false)\n                .start(30);\n\n          \tvar group = svg.selectAll(\".group\")\n                .data(data.groups)\n              .enter().append(\"rect\")\n                .attr(\"rx\", grp_corner).attr(\"ry\", grp_corner)\n                .attr(\"class\", \"group\")\n                .style(\"fill\", function (d, i) {\n                  \treturn colours.find(colour => colour.name == d.colour_list)['colors'][d.level];\n                })\n            \t\t.attr(\"stroke-width\", 1)\n\t\t             .attr(\"stroke\", function (d, i) {\n                  \treturn colours.find(colour => colour.name == d.colour_list)['colors'][7];\n                })\n                .call(cola.drag);\n\n          group.append(\"title\")\n            .text(function (d) { return d.label; });\n\n\n            var link = svg.selectAll(\".link\")\n                .data(data.links)\n              .enter().append(\"line\")\n                .attr(\"class\", \"link\")\n                .style(\"stroke-width\", '1px')\n            \t\t.attr('stroke', 'black');\n\n            var node = svg.selectAll(\".node\")\n                .data(data.nodes)\n              .enter().append(\"rect\")\n            \t\t.attr('class', \"node\")\n                .attr('class', d => d.type)\n                .attr('class', d => d.G_name)\n    \t\t\t\t\t\t.attr('id', d => d.G_id);\n\n          \tvar label = svg.selectAll(\".label\")\n                  .data(data.nodes)\n               .enter().append(\"text\")\n                  .attr(\"class\", \"label\")\n                  .text(d => d.type == 'attribute'\n                            ? (d.G_name + ': ' + d.value)\n                            : (d.G_name + ': ' + d.G_id))\n                  .attr('id', d => 'heading-' + d.G_id)\n                  .style('font-size', 10)\n                  .style('text-anchor', 'middle')\n                  .style('color', d => text_colour(d))\n                  .style('fill', d => text_colour(d))\n                  .style(\"pointer-events\", \"none\")\n            \t\t\t.call(cola.drag);\n\n            // setup heading colours for attribute, entity and relation\n            function text_colour(d) {\n                let colour = 'black'\n                switch (d.type) {\n                    case 'attribute':\n                    \t\tif (d.dtype == 'actual'){\n                        \t\tcolour = att_t_colour\n                        } else {\n                        \t\tcolour = shad_t_colour\n                        }\n                        break;\n                    case 'entity':\n                        colour = ent_t_colour\n                        break;\n                    case 'relation':\n                        colour = rel_t_colour\n                        break;\n                    default:\n                        colour = 'black'\n                        break;\n                }\n                return colour;\n            }\n\n\n          \tnode\n            \t\t.attr('width', d => nodeWidth(d))\n                .attr('height', d => d.height)\n                .attr('rx', d => d.corner)\n                .attr('ry', d=> d.corner)\n                .attr('x', d => d.x)\n                .attr('y', d => d.y)\n                .attr(\"class\", d => d.G_name)\n          \t\t\t.style(\"fill\", d => d.colour)\n                .on(\"click\", function (d) {\n                    d.fixed = true;\n                })\n                .call(cola.drag);\n\n          \t// function to set dimensions and colours for shapes\n            function nodeWidth(d) {\n                let headingid = '#heading-' + d.G_id;\n                let headingbbox = d3.select(headingid).node().getBBox();\n\n                d.width = d3.max([5, headingbbox.width]) + (textPadding * 2)\n                d.height = headingbbox.height  + textPadding * 2\n\n                // attributes and entities rounded rectangle, relation is circle\n                switch (d.type) {\n                    case 'attribute':\n                        d.corner = corner\n                        d.colour = att_colour\n                        d.x = headingbbox.x - textPadding\n                        d.y = headingbbox.y - textPadding\n                    \t\tif (d.dtype === 'shadow'){\n                          \td.colour =  shad_colour;\n                        } else {\n                          \td.colour =  att_colour;\n                        }\n                        break;\n\n                    case 'entity':\n                        d.corner = corner\n                        d.colour = ent_colour\n                        d.x = headingbbox.x - textPadding\n                        d.y = headingbbox.y - textPadding\n                    \t\tbreak;\n\n                    case 'relation':\n                        d.width = 16\n                        d.height = 16\n                        d.corner = 8\n                        d.colour = rel_colour\n                        d.x = headingbbox.x + (headingbbox.width)/2 - d.width/2\n                        d.y = headingbbox.y + d.height/2\n                    \t\tbreak;\n\n                    default:\n                        break;\n                }\n                return d.width;\n            };\n\n\n            cola.on(\"tick\", function () {\n                link.attr(\"x1\", function (d) { return d.source.x; })\n                    .attr(\"y1\", function (d) { return d.source.y; })\n                    .attr(\"x2\", function (d) { return d.target.x; })\n                    .attr(\"y2\", function (d) { return d.target.y; });\n\n                node.attr(\"x\", function (d) { return d.x - d.width/2; })\n                    .attr(\"y\", function (d) { return d.y - d.height/2; });\n\n              \t group.attr(\"x\", function (d) { return d.bounds.x -pad; })\n                      .attr(\"y\", function (d) { return d.bounds.y - pad; })\n                      .attr(\"width\", function (d) { return d.bounds.width() + 2 * pad; })\n                      .attr(\"height\", function (d) { return d.bounds.height() + 2 * pad; });\n\n              \tlabel.attr(\"x\", function (d) { return d.x; })\n                     .attr(\"y\", function (d) {\n                         var h = this.getBBox().height;\n                         return d.y + h/4;\n                     });\n            });\n        });\n\nconst fs = require('fs');\nfs.writeFileSync(\"test.svg\", body.node().innerHTML)",
					"dependencies": "asf",
					"database": "datbase"
				},
				"x": 356,
				"y": 870,
				"component": "cij905b3d1",
				"connections": {
					"output": [
						{
							"id": "il5uojvxe",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"name": "Query",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il5uojr5r": {
				"id": "il5uojr5r",
				"config": {
					"random": true,
					"type": "string",
					"data": "",
					"restart": false
				},
				"x": 30,
				"y": 819,
				"component": "cmbr250a48",
				"connections": {
					"output": [
						{
							"id": "il5uoin1t",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "Triggers",
					"name": "Trigger",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il5uojvxe": {
				"id": "il5uojvxe",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 714,
				"y": 888,
				"component": "cmfjj64e18",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il5wlc0zb": {
				"id": "il5wlc0zb",
				"config": {
					"random": false,
					"type": "object",
					"data": "{\"name\":\"svg1\",\"description\":\"connection1\",\"host\":\"localhost\",\"icon\":\"gear\",\"id\":\"connection1\",\"type\":\"connection\",\"scope\":\"local\",\"port\":8729}",
					"restart": false
				},
				"x": 278,
				"y": 191,
				"component": "cmbr250a48",
				"connections": {
					"output": [
						{
							"id": "il7ef5end",
							"index": "subscribe"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "Triggers",
					"name": "Trigger",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il5xexjss": {
				"id": "il5xexjss",
				"config": {
					"random": true,
					"type": "string",
					"data": "",
					"restart": false
				},
				"x": 129,
				"y": 459,
				"component": "cmbr250a48",
				"connections": {
					"output": [
						{
							"id": "il7ef67lx",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "Triggers",
					"name": "Trigger",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il5xexq77": {
				"id": "il5xexq77",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 999,
				"y": 84,
				"component": "cmfjj64e18",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il7ef51fd": {
				"id": "il7ef51fd",
				"config": {},
				"x": 399,
				"y": 30,
				"component": "pubsrcvjer4415aXsvg_insert",
				"connections": {
					"publish": [
						{
							"id": "il5tup8m9",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "pub",
					"icon": "fas fa-broadcast-tower",
					"group": "Publishers",
					"name": "TMS Example",
					"outputs": [
						{
							"id": "publish",
							"name": "Output"
						}
					]
				}
			},
			"il7ef5end": {
				"id": "il7ef5end",
				"config": {},
				"x": 517,
				"y": 200,
				"component": "subsrcvjer4415aXsvg_insert",
				"connections": {},
				"template": {
					"type": "sub",
					"icon": "fas fa-satellite-dish",
					"group": "Subscribers",
					"name": "TMS Example",
					"inputs": [
						{
							"id": "subscribe",
							"name": "Input"
						}
					]
				}
			},
			"il7ef5rlu": {
				"id": "il7ef5rlu",
				"config": {},
				"x": 130,
				"y": 342,
				"component": "pubsrcvjer4415aXsvg_insert",
				"connections": {
					"publish": [
						{
							"id": "il7ef67lx",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "pub",
					"icon": "fas fa-broadcast-tower",
					"group": "Publishers",
					"name": "TMS Example",
					"outputs": [
						{
							"id": "publish",
							"name": "Output"
						}
					]
				}
			},
			"il7ef67lx": {
				"id": "il7ef67lx",
				"config": {
					"timeout": 60000
				},
				"x": 502,
				"y": 302,
				"component": "calsrcvjer4415aXsvg_query",
				"connections": {
					"output": [
						{
							"id": "il5xexq77",
							"index": "input"
						}
					],
					"error": [
						{
							"id": "il5xexq77",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "call",
					"icon": "fa fa-plug",
					"group": "Calls",
					"name": "TMS Example",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						},
						{
							"id": "error",
							"name": "Error"
						}
					]
				}
			}
		},
		"variables": {},
		"sources": {
			"srcvjer4415a": {
				"token": "",
				"url": "http://localhost:8112/$tms/",
				"id": "srcvjer4415a",
				"meta": {
					"type": "meta",
					"name": "TMS Example",
					"subscribe": [
						{
							"id": "svg_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_update",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_remove",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					],
					"publish": [
						{
							"id": "svg_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					],
					"subscribers": [
						"svg_insert",
						"payload_insert",
						"payload_update",
						"payload_remove"
					],
					"call": [
						{
							"id": "svg_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					]
				},
				"checksum": "32913527541",
				"restart": false,
				"init": true,
				"online": true,
				"dtupdated": "2022-08-26T06:36:33.725Z",
				"error": 0
			}
		},
		"origin": "http://localhost:8111",
		"dtcreated": "2022-08-29T07:06:40.762Z",
		"size": 88798,
		"variables2": {},
		"directory": "./database",
		"sandbox": false
	},
	"fx0wu001jc41d": {
		"paused": false,
		"id": "fx0wu001jc41d",
		"reference": "",
		"author": "",
		"group": "",
		"icon": "fas fa-microchip",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "TMS Payload",
		"components": {
			"pubsrc2c6qbf0d7Xsvg_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['src2c6qbf0d7', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrc2c6qbf0d7Xsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <http://127.0.0.1:8112>\n- Channel: __publish__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Message ... / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrc2c6qbf0d7Xsvg_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['src2c6qbf0d7', 'svg_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['src2c6qbf0d7'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['svg_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'svg_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrc2c6qbf0d7Xsvg_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_insert\n- URL address: <http://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `svg_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"svg_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"stepId\": {\n        \"type\": \"string\"\n      },\n      \"flowId\": {\n        \"type\": \"string\"\n      },\n      \"stepName\": {\n        \"type\": \"string\"\n      },\n      \"path\": {\n        \"type\": \"string\"\n      },\n      \"projectId\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>svg_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrc2c6qbf0d7Xsvg_query": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['src2c6qbf0d7', 'svg_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['src2c6qbf0d7'];\n\t\t\tif (socket && socket.calls && socket.calls['svg_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'svg_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrc2c6qbf0d7Xsvg_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# svg_query\n- URL address: <http://127.0.0.1:8112>\n- Channel: __call__\n- JSON schema `svg_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Svg.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"stepId\": {\n      \"type\": \"string\"\n    },\n    \"flowId\": {\n      \"type\": \"string\"\n    },\n    \"stepName\": {\n      \"type\": \"string\"\n    },\n    \"path\": {\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Message ... / <b>svg_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrc2c6qbf0d7Xpayload_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['src2c6qbf0d7', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['src2c6qbf0d7'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrc2c6qbf0d7Xpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <http://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrc2c6qbf0d7Xpayload_remove": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['src2c6qbf0d7', 'payload_remove'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['src2c6qbf0d7'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_remove']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_remove', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrc2c6qbf0d7Xpayload_remove .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_remove\n- URL address: <http://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_remove.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_remove\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_remove</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrc2c6qbf0d7Xpayload_query": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['src2c6qbf0d7', 'payload_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['src2c6qbf0d7'];\n\t\t\tif (socket && socket.calls && socket.calls['payload_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'payload_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrc2c6qbf0d7Xpayload_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_query\n- URL address: <http://127.0.0.1:8112>\n- Channel: __call__\n- JSON schema `payload_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Message ... / <b>payload_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrc2c6qbf0d7Xpayload_update": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['src2c6qbf0d7', 'payload_update'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['src2c6qbf0d7'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['payload_update']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'payload_update', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrc2c6qbf0d7Xpayload_update .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_update\n- URL address: <http://127.0.0.1:8112>\n- Channel: __subscribe__\n- JSON schema `payload_update.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"payload_update\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"payload\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Message ... / <b>payload_update</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"c562lb212d": "<script total>\r\n\r\n\texports.name = 'Trigger';\r\n\texports.group = 'Triggers';\r\n\texports.version = '1';\r\n\texports.icon = 'fa fa-bullhorn';\r\n\texports.author = 'Team_Typerefinery';\r\n\texports.config = { random: true, type: 'string', data: '', restart: false };\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tinstance.trigger = function() {\r\n\r\n\t\t\tvar val;\r\n\r\n\t\t\tswitch (config.type) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'buffer':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'date':\r\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'boolean':\r\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tinstance.send('output', val);\r\n\t\t};\r\n\r\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\r\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\r\n\t\t\t<hr />\r\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<readme>\r\nThe component triggers data into the Flow.\r\n</readme>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i>NAME\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\r\n\t</div>\r\n</body>",
			"c59bx6eba8": "<script total>\r\n\r\n\texports.name = 'Print';\r\n\texports.group = 'TypeRefinery';\r\n\texports.version = '1';\r\n\texports.icon = 'fa fa-print';\r\n\texports.author = 'Team_typerefinery';\r\n\texports.config = { repo: false, data: true };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar data = $.data;\r\n\r\n\t\t\tif (config.data !== false) {\r\n\t\t\t\tif (data instanceof Buffer)\r\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\r\n\t\t\t}\r\n\r\n\t\t\tvar count = 0;\r\n\r\n\t\t\tfor (var key in config) {\r\n\t\t\t\tif (config[key])\r\n\t\t\t\t\tcount++;\r\n\t\t\t}\r\n\r\n\t\t\tvar output = count > 1 ? {} : null;\r\n\r\n\t\t\tif (config.repo) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.repo = $.repo;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.repository;\r\n\t\t\t}\r\n\r\n\t\t\tif (config.data) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.data = $.data;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.data;\r\n\t\t\t}\r\n\r\n\t\t\toutput && instance.status(output, 200);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.status('');\r\n\t\t};\r\n\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS .noscrollbar { max-height: 250px; }\r\n\t.CLASS .readme { position: absolute; position: absolute; font-size: 11px; right: 5px; margin-top: -5px; cursor: pointer; }\r\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\r\n</style>\r\n\r\n<readme>\r\nThe component prints incoming data in a JSON format.\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\r\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Clear</button>\r\n\t\t<i class=\"ICON\"></i>NAME\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data-bind=\"!STATUS__html pre:Thelpers.jsonformat(JSON.stringify(value, null, '\\t'))__show\" class=\"hidden selectable\">\r\n\t\t\t<span class=\"readme\" title=\"Open in new window\"><i class=\"far fa-window-restore\"></i></span>\r\n\t\t\t<div class=\"noscrollbar mt5\">\r\n\t\t\t\t<pre class=\"json\"></pre>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</footer>\r\n</body>\r\n\r\n<script>\r\n\tTOUCH(function(exports, reinit) {\r\n\r\n\t\tif (reinit)\r\n\t\t\treturn;\r\n\r\n\t\tvar laststatus;\r\n\r\n\t\texports.status = function(status, isinit) {\r\n\t\t\tlaststatus = status;\r\n\t\t};\r\n\r\n\t\texports.element.on('click', '.readme', function() {\r\n\t\t\tFUNC.readme('Debug', '```json\\n' + JSON.stringify(laststatus, null, '  ') + '\\n```');\r\n\t\t});\r\n\r\n\t});\r\n</script>",
			"c8619e934a": "<script total>\r\n\r\n\texports.name = 'Print JSON';\r\n\texports.group = 'TypeRefinery';\r\n\texports.version = '1';\r\n\texports.icon = 'fa fa-print';\r\n\texports.author = 'Team_Typerefinery';\r\n\texports.config = { repo: false, data: true };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar data = $.data;\r\n\r\n\t\t\tif (config.data !== false) {\r\n\t\t\t\tif (data instanceof Buffer)\r\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\r\n\t\t\t}\r\n\r\n\t\t\tvar count = 0;\r\n\r\n\t\t\tfor (var key in config) {\r\n\t\t\t\tif (config[key])\r\n\t\t\t\t\tcount++;\r\n\t\t\t}\r\n\r\n\t\t\tvar output = count > 1 ? {} : null;\r\n\r\n\t\t\tif (config.repo) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.repo = $.repo;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.repository;\r\n\t\t\t}\r\n\r\n\t\t\tif (config.data) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.data = $.data;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.data;\r\n\t\t\t}\r\n\r\n\t\t\toutput && instance.status(output);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.status('');\r\n\t\t}\r\n\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\r\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<readme>\r\nThe component prints incoming data in a JSON format.\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\r\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<script>\r\n\tFUNC.printjson_click = function(type, data) { // type = path/data\r\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\r\n\t};\r\n\r\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\r\n\t\tvar el = $(this);\r\n\t\tvar iscopy = el.hclass('fa-copy');\r\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\r\n\t\tsetTimeout(function(){\r\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\r\n\t\t}, 2000);\r\n\t});\r\n</script>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\r\n\t\t<i class=\"ICON\"></i>NAME\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\r\n\t</footer>\r\n</body>",
			"c88qh1c707": "<script total>\r\n\r\n\texports.name = 'Subscribe';\r\n\texports.group = 'TypeRefinery';\r\n\texports.version = '1';\r\n\texports.icon = 'fa fa-broadcast-tower';\r\n\texports.author = 'Team_typeRefinery';\r\n\texports.config = { name: '' };\r\n\texports.outputs = [{ id: 'data', name: 'Data' }];\r\n\texports.type = 'input2';\r\n\r\n\texports.call = function(data, answer) {\r\n\t\t// \"this\" means FlowStream instance\r\n\t\tthis.io(function(err, response) {\r\n\t\t\tvar arr = [];\r\n\t\t\tfor (var flow of response) {\r\n\t\t\t\tfor (var com of flow.items) {\r\n\t\t\t\t\tif (com.type === 'output') {\r\n\t\t\t\t\t\tcom.id = flow.id + '_' + com.id;\r\n\t\t\t\t\t\tcom.name = '<b>' + flow.name.encode() + ':</b> ' + com.name.encode();\r\n\t\t\t\t\t\tarr.push(com);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tarr.quicksort('name');\r\n\t\t\tanswer(arr);\r\n\t\t});\r\n\t};\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tvar flowstreamid;\r\n\t\tvar instanceid;\r\n\r\n\t\tinstance.input = function(fromflowstreamid, fromid, data) {\r\n\t\t\tif (flowstreamid === fromflowstreamid && instanceid === fromid)\r\n\t\t\t\tinstance.send('data', data);\r\n\t\t};\r\n\r\n\t\tinstance.flowstream = function(id, type) {\r\n\t\t\tif (!id || (config.id && config.id.split('_')[0] === id))\r\n\t\t\t\trefresh();\r\n\t\t};\r\n\r\n\t\tvar refresh = function() {\r\n\t\t\tif (config.id) {\r\n\t\t\t\tvar arr = config.id.split('_');\r\n\t\t\t\tflowstreamid = arr[0];\r\n\t\t\t\tinstanceid = arr[1];\r\n\t\t\t\tinstance.io(flowstreamid, instanceid, function(err, com) {\r\n\t\t\t\t\tif (com)\r\n\t\t\t\t\t\tinstance.status({ name: com.name + '/' + com.item.name });\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tinstance.status({ name: '' });\r\n\t\t\t\t});\r\n\t\t\t} else\r\n\t\t\t\tinstance.status({ name: '' });\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\trefresh();\r\n\t\t};\r\n\r\n\t\tsetTimeout(refresh, 3000);\r\n\t};\r\n\r\n</script>\r\n\r\n<script>\r\n\tON('configure_subscribe', function(data) {\r\n\t\tdata.call(function(response) {\r\n\t\t\tSET('%outputs', response);\r\n\t\t}, true);\r\n\t});\r\n</script>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.id__dirsource:%outputs;dirraw:1;placeholder:Choose a specific input;dirempty:No output\" class=\"m\"><b>Output</b></div>\r\n\t</div>\r\n</settings>\r\n\r\n<readme>\r\nThe component subscribes to the specific `Output` component.\r\n</readme>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i>NAME: <b class=\"monospace\" data-bind=\"STATUS.name__text__empty\"></b>\r\n\t</header>\r\n</body>",
			"pubsrc2c6qbf0d7Xpayload_insert": "<script total>\n\n\texports.name = 'TMS Message Service';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['src2c6qbf0d7', 'payload_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrc2c6qbf0d7Xpayload_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# payload_insert\n- URL address: <http://127.0.0.1:8112>\n- Channel: __publish__\n- JSON schema `payload_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Payload.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"payload\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Message ... / <b>payload_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>"
		},
		"design": {
			"ilcjr9mgd": {
				"id": "ilcjr9mgd",
				"config": {
					"random": false,
					"type": "object",
					"data": "{\"payload\":\"roger dodger 1\"}",
					"restart": false
				},
				"x": 180,
				"y": 264,
				"component": "c562lb212d",
				"connections": {
					"output": [
						{
							"id": "ilcjr9nqy",
							"index": "input"
						},
						{
							"id": "ilcjrdjog",
							"index": "subscribe"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "Triggers",
					"name": "Trigger",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilcjr9nqy": {
				"id": "ilcjr9nqy",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 803,
				"y": 366,
				"component": "c8619e934a",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "TypeRefinery",
					"name": "Print JSON",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilcjrczag": {
				"id": "ilcjrczag",
				"config": {},
				"x": 218,
				"y": 142,
				"component": "pubsrc2c6qbf0d7Xpayload_insert",
				"connections": {
					"publish": [
						{
							"id": "ilcjrd7ko",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "pub",
					"icon": "fas fa-broadcast-tower",
					"group": "Publishers",
					"name": "TMS Message Service",
					"outputs": [
						{
							"id": "publish",
							"name": "Output"
						}
					]
				}
			},
			"ilcjrd7ko": {
				"id": "ilcjrd7ko",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 802,
				"y": 62,
				"component": "c59bx6eba8",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "TypeRefinery",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilcjrdjog": {
				"id": "ilcjrdjog",
				"config": {},
				"x": 590,
				"y": 265,
				"component": "subsrc2c6qbf0d7Xpayload_insert",
				"connections": {},
				"template": {
					"type": "sub",
					"icon": "fas fa-satellite-dish",
					"group": "Subscribers",
					"name": "TMS Message Service",
					"inputs": [
						{
							"id": "subscribe",
							"name": "Input"
						}
					]
				}
			},
			"ilcjrf1da": {
				"id": "ilcjrf1da",
				"config": {
					"timeout": 60000
				},
				"x": 297,
				"y": 614,
				"component": "calsrc2c6qbf0d7Xpayload_query",
				"connections": {
					"output": [
						{
							"id": "ilcjrf9us",
							"index": "input"
						}
					],
					"error": [
						{
							"id": "ilcjrf9us",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "call",
					"icon": "fa fa-plug",
					"group": "Calls",
					"name": "TMS Message Service",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						},
						{
							"id": "error",
							"name": "Error"
						}
					]
				}
			},
			"ilcjrf4oj": {
				"id": "ilcjrf4oj",
				"config": {
					"random": true,
					"type": "string",
					"data": "",
					"restart": false
				},
				"x": 48,
				"y": 619,
				"component": "c562lb212d",
				"connections": {
					"output": [
						{
							"id": "ilcjrf1da",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "Triggers",
					"name": "Trigger",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ilcjrf9us": {
				"id": "ilcjrf9us",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 920,
				"y": 556,
				"component": "c59bx6eba8",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "TypeRefinery",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"ilck1evc3": {
				"id": "ilck1evc3",
				"config": {},
				"x": 266,
				"y": 43,
				"component": "pubsrc2c6qbf0d7Xpayload_insert",
				"connections": {
					"publish": [
						{
							"id": "ilcjrd7ko",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "pub",
					"icon": "fas fa-broadcast-tower",
					"group": "Publishers",
					"name": "TMS Message Service",
					"outputs": [
						{
							"id": "publish",
							"name": "Output"
						}
					]
				}
			},
			"ild1mmomc": {
				"id": "ild1mmomc",
				"config": {
					"random": false,
					"type": "object",
					"data": "{\"payload\": '{\"data\":{\"value\":\"23.23K\",\"indicatorType\":\"up\",\"indicatorValue\":\"289\",\"title\":\"Data Source 1\",\"icon\":\"pi pi-database\"},\"name\":\"dataSource1\"}'}",
					"restart": false
				},
				"x": 178,
				"y": 384,
				"component": "c562lb212d",
				"connections": {
					"output": [
						{
							"id": "ilcjr9nqy",
							"index": "input"
						},
						{
							"id": "ilcjrdjog",
							"index": "subscribe"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "Triggers",
					"name": "Trigger",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"ild1n15np": {
				"id": "ild1n15np",
				"config": {
					"random": false,
					"type": "object",
					"data": "{\"payload\": '{\"data\":{\"value\":\"23.23K\",\"indicatorType\":\"up\",\"indicatorValue\":\"289\",\"title\":\"Data Source 2\",\"icon\":\"pi pi-database\"},\"name\":\"dataSource2\"}'}",
					"restart": false
				},
				"x": 175,
				"y": 498,
				"component": "c562lb212d",
				"connections": {
					"output": [
						{
							"id": "ilcjr9nqy",
							"index": "input"
						},
						{
							"id": "ilcjrdjog",
							"index": "subscribe"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "Triggers",
					"name": "Trigger",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			}
		},
		"variables": {},
		"sources": {
			"src2c6qbf0d7": {
				"token": "typerefinery",
				"url": "http://127.0.0.1:8112/$tms",
				"id": "src2c6qbf0d7",
				"meta": {
					"type": "meta",
					"name": "TMS Message Service",
					"subscribe": [
						{
							"id": "svg_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_update",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_remove",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					],
					"publish": [
						{
							"id": "svg_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string",
										"$$ID": "payload",
										"$$REQUIRED": false
									},
									"id": {
										"type": "string",
										"$$ID": "id",
										"$$REQUIRED": false
									},
									"dtcreated": {
										"type": "date",
										"$$ID": "dtcreated",
										"$$REQUIRED": false
									},
									"dtupdated": {
										"type": "date",
										"$$ID": "dtupdated",
										"$$REQUIRED": false
									}
								}
							}
						}
					],
					"subscribers": [
						"svg_insert",
						"payload_insert",
						"payload_update",
						"payload_remove"
					],
					"call": [
						{
							"id": "svg_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Svg.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"stepId": {
										"type": "string"
									},
									"flowId": {
										"type": "string"
									},
									"stepName": {
										"type": "string"
									},
									"path": {
										"type": "string"
									},
									"projectId": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "payload_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Payload.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"payload": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					]
				},
				"checksum": "7615986881",
				"restart": false,
				"error": 0,
				"init": true,
				"online": true,
				"dtupdated": "2023-01-18T12:07:25.698Z"
			}
		},
		"proxypath": "",
		"origin": "http://localhost:8111",
		"dtcreated": "2023-01-05T23:29:31.349Z",
		"size": 34906
	}
}
