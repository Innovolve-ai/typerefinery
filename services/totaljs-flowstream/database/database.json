{
	"variables": {},
	"frstv001sr41d": {
		"paused": false,
		"id": "frstv001sr41d",
		"reference": "",
		"author": "",
		"group": "",
		"icon": "fas fa-microchip",
		"color": "",
		"version": "",
		"readme": "",
		"url": "https://",
		"name": "test",
		"components": {
			"cmbr250a48": "<script total>\n\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '2';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', restart: false };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n</body>",
			"cmfjj64e18": "<script total>\n\n\texports.name = 'Print';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'fa fa-print';\n\texports.author = 'Total.js';\n\texports.config = { repo: false, data: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\toutput && instance.status(output, 200);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.status('');\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer > div { margin: 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS .noscrollbar { max-height: 250px; }\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n</style>\n\n<readme>\nThe component prints incoming data in a JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Clear</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"!STATUS__html pre:Thelpers.jsonformat(JSON.stringify(value, null, '\\t'))__show\" class=\"hidden selectable\">\n\t\t\t<div class=\"noscrollbar\">\n\t\t\t\t<pre class=\"json\"></pre>\n\t\t\t</div>\n\t\t</div>\n\t</footer>\n</body>",
			"cmh84a7822": "<script total>\n\n\texports.name = 'Print JSON';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-print';\n\texports.author = 'Martin Smola';\n\texports.config = { repo: false, data: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\toutput && instance.status(output);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.status('');\n\t\t}\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer > div { margin: 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\n\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<readme>\nThe component prints incoming data in a JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\n\t</div>\n</settings>\n\n<script>\n\tFUNC.printjson_click = function(type, data) { // type = path/data\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\n\t};\n\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\n\t\tvar el = $(this);\n\t\tvar iscopy = el.hclass('fa-copy');\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\n\t\tsetTimeout(function(){\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\n\t\t}, 2000);\n\t});\n</script>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\n\t</footer>\n</body>",
			"coi2uf35a9": "<script total>\n\n\texports.id = 'code';\n\texports.name = 'Code';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total.js';\n\texports.config = { outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send(\\'output\\', data); // or simply send(data); which uses the first output\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.throw(e);\n\t\t\t\t\t$.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = [];\n\t\t\tfor (let i = 1; i <= config.outputs; i++)\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i === 1 ? '' : i), name: 'Output #' + i });\n\t\t\tinstance.save();\n\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n\n\tTo send data to the default output use `send(somedata);`\n\tTo send data to specific output when number of outputs > 1 use `$.send('outputX', somedata)` where `X` is output index, see example bellow:\n\t- first output--> `send(somedata)` or `$.send('output', somedata)`\n\t- second output --> `$.send('output2', somedata)`\n\t- ...\n\t- 5th output --> `$.send('output5', somedata)`\n\t- etc.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.outputs__type:number\" class=\"m\">Number of outputs</div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"cqs6001fd7": "<script total>\n\n\texports.id = 'cheerio';\n\texports.name = 'Cheerio';\n\texports.group = 'HTML';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { fn: '// $: cheerio instance\\n// html: html string\\nvar body = $(\\'body\\').html();\\nreturn body;', path: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.npm = ['cheerio'];\n\t// exports.meta = { readonly: false, singleton: false, hidden: false };\n\n\texports.make = function(instance, config) {\n\n\t\t// instance.main.variables {Object}\n\t\t// instance.main.variables2 {Object}\n\t\t// instance.save();\n\t\t// instance.replace(str); // replaces {variable_name} for values from \"variables\" and \"variables2\"\n\t\t// instance.status(obj, [refresh_delay_in_ms]);\n\n\t\tconst cheerio = require('cheerio');\n\t\tvar get, fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\n\t\t\tvar input = CLONE(data);\n\t\t\tvar html;\n\t\t\tif (config.path) {\n\t\t\t\thtml = get(data);\n\t\t\t} else {\n\t\t\t\thtml = data;\n\t\t\t}\n\n\t\t\tif (typeof(html) !== 'string') {\n\t\t\t\t$.send('output', { error: 'invalid data, expected \"data{0}{1}\" to be a string'.format(config.path ? '.' : '', config.path) });\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst $$ = cheerio.load(html);\n\t\t\tvar result = fn($$, html);\n\n\t\t\t$.data = { result, input };\n\t\t\t$.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (config.path)\n\t\t\t\tget = new Function('data', 'return data?.{0};'.format(config.path.replace(/\\./g, '?.')));\n\n\t\t\tif (config.fn) {\n\t\t\t\ttry {\n\t\t\t\t\tfn = new Function('$', 'html', config.fn);\n\t\t\t\t\tinstance.status('');\n\t\t\t\t} catch(e){\n\t\t\t\t\tinstance.throw(e.stack);\n\t\t\t\t\tinstance.status('Invalid code');\n\t\t\t\t}\n\t\t\t} else\n\t\t\t\tinstance.status('Not configured');\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tUses [Cheerio](https://cheerio.js.org/index.html)\n\tPlease refer to the [documentation](https://cheerio.js.org/classes/Cheerio.html) for available functions.\n## Input\n```js\n\t<any>\n```\n\n## Output\n```js\n\t{\n\t\tresult: <the data returned from the code>,\n\t\tinput: <incomming data>\n\t}\n```\n\n## Example code\n```js\n\t// $: cheerio instance\n\t// html: html string\n\n\tvar txt = [];\n\t$('ul > li').each(function (i, elem) {\n\t\ttxt.push($(this).text());\n\t});\n\treturn txt;\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path\">Path to html</div>\n\t\t<div class=\"help m\">Leave empty if the 'data' itself is the html string, otherwise use dot notation. E.g.: { request: { body: '&lt;html&gt;...&lt;/html&gt;' }} -> `request.body` </div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.fn__type:javascript;minheight:300;parent:.ui-largeform-body;margin:60;tabs:true;trim:true\"></div>\n\t\t<div class=\"help\">Available variables: '&dollar;' -> cheerio instance, 'html' -> html string. Use 'return somedata;' to return whatever you want. Output data -> { result: somedata, input: inputdata }</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"!STATUS__text__show\"></footer>\n</body>",
			"cr19i7cad4": "<script total>\n\texports.id = 'comment';\n\texports.name = 'Comment';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { text: 'Comment' };\n\texports.meta = { settingswidth: 1100 };\n\n\texports.make = function(instance, config) {\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"codemirror__?.text__type:markdown;parent:auto;minheight:300;margin:65\"></div>\n\t\t<div class=\"help\">Supports Markdown</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS { max-width: 500px !important; }\n\t.CLASS .content { display: none; min-height: 0; }\n\t.CLASS footer { padding: 10px; font-size: 12px; border-top: 0 !important; }\n</style>\n\n<body>\n\t<footer data-bind=\"!CONFIG.text__html:value.markdown(el)\" class=\"markdown-small\"></footer>\n</body>",
			"cr2q3d353c": "<script total>\n\n\texports.name = 'Test';\n\texports.icon = 'fa fa-info';\n\texports.author = 'Total Avengers';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\t$.send('output', 'Hello world output');\n\t\t\t$.send('dynamic', 'Hello world dynamic');\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = config.outputs;\n\t\t\tinstance.save();\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\n\tTest\n</readme>\n\n<settings>\n</settings>\n\n<style>\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer></footer>\n</body>",
			"ctzb541236": "<script total>\n\n\texports.name = 'Model';\n\texports.group = 'Transformations';\n\texports.icon = 'fab fa-wpforms';\n\texports.author = 'Total.js';\n\texports.version = '2';\n\texports.config = { name: 'Model', path: '', schema: [], rewrite: true };\n\texports.inputs = [{ id: 'input', name: 'Data' }, { id: 'partial', name: 'Partial data' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar deferr = 'Invalid value';\n\t\tvar defvalues = {};\n\t\tvar path;\n\n\t\tvar preparenumber = function(val, err, max, min, float) {\n\t\t\tif (val != null && val != '') {\n\t\t\t\tval = typeof(val) === 'string' ? (float ? val.parseFloat() : val.parseInt()) : val;\n\t\t\t\tval = max ? (val > max || val < min ? null : val) : val;\n\t\t\t} else\n\t\t\t\tval = null;\n\t\t\treturn val;\n\t\t};\n\n\t\tinstance.preparedata = function(item, val, err, parent, partial) {\n\n\t\t\tvar path = (parent ? (parent + '.') : '') + item.name;\n\n\t\t\tswitch (item.type) {\n\t\t\t\tcase 'string':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'upper':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val ? val.toUpperCase() : '';\n\n\t\t\t\tcase 'lower':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val ? val.toLowerCase() : '';\n\n\t\t\t\tcase 'capitalize':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val ? val.capitalize() : '';\n\n\t\t\t\tcase 'email':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tval = val.replace(/\\s/g, '');\n\t\t\t\t\tval = val && val.isEmail() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'phone':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tval = val.trim().replace(/\\s|\\.|-|\\(|\\)/g, '');\n\t\t\t\t\tval = val && val.isPhone() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'boolean':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\treturn defvalues[item.name] || false;\n\n\t\t\t\t\treturn val == true || val === 'on' || val === 'true' || val == 1;\n\n\t\t\t\tcase 'zip':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tval = val.replace(/\\s/g, '');\n\t\t\t\t\tval = val && val.isZIP() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'date':\n\t\t\t\t\tif (val) {\n\t\t\t\t\t\tif (val instanceof Date)\n\t\t\t\t\t\t\treturn val;\n\t\t\t\t\t\tswitch (typeof(val)) {\n\t\t\t\t\t\t\tcase 'string':\n\t\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\t\t\treturn val.parseDate();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else\n\t\t\t\t\t\tval = defvalues[item.name] ? (defvalues[item.name] == NOOP ? new Date() : defvalues[item.name]) : null;\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn null;\n\n\t\t\t\tcase 'object':\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'number':\n\t\t\t\tcase 'float':\n\t\t\t\t\tval = preparenumber(val, err, null, true);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'integer':\n\t\t\t\t\tvar max = 2147483647;\n\t\t\t\t\tval = preparenumber(val, err, max, -max);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'smallint':\n\t\t\t\t\tvar max = 32768;\n\t\t\t\t\tval = preparenumber(val, err, max, -max);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'tinyint':\n\t\t\t\t\tval = preparenumber(val, err, 255, 0);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'base64':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.isBase64() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'json':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.isJSON() ? val : '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'url':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.isURL() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'uid':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.trim();\n\t\t\t\t\tval = val.isUID() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'guid':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.trim();\n\t\t\t\t\tval = val.isGUID() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tdefault:\n\t\t\t\t\tvar model = instance.main.meta.flow[item.type];\n\t\t\t\t\treturn model ? model.validatedata(val || {}, err, partial, path).data : null;\n\t\t\t}\n\t\t};\n\n\t\tinstance.validatedata = function(data, err, partial, parent) {\n\n\t\t\tvar obj = {};\n\t\t\tvar plus = parent ? (parent + '.') : '';\n\n\t\t\tif (!err)\n\t\t\t\terr = [];\n\n\t\t\tif (typeof(data) !== 'object') {\n\t\t\t\tdata = data + '';\n\t\t\t\tif (data.isJSON()) {\n\t\t\t\t\tdata = data.parseJSON(true);\n\t\t\t\t} else {\n\t\t\t\t\terr.push({ name: parent, error: 'Invalid data' });\n\t\t\t\t\treturn { error: err };\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!data) {\n\t\t\t\terr.push({ name: parent, error: 'Invalid data' });\n\t\t\t\treturn { error: err };\n\t\t\t}\n\n\t\t\tfor (var item of config.schema) {\n\t\t\t\tvar val = data[item.name];\n\n\t\t\t\tif (partial && val === undefined)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tif (item.array) {\n\n\t\t\t\t\tobj[item.name] = [];\n\n\t\t\t\t\tif (val) {\n\n\t\t\t\t\t\tif (!(val instanceof Array))\n\t\t\t\t\t\t\tval = [val];\n\n\t\t\t\t\t\tfor (var i = 0; i < val.length; i++) {\n\t\t\t\t\t\t\tvar m = val[i];\n\t\t\t\t\t\t\tvar r = instance.preparedata(item, m, err, plus, partial);\n\t\t\t\t\t\t\tobj[item.name].push(r);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif (item.required && !obj[item.name].length)\n\t\t\t\t\t\terr.push({ name: item.name, path: plus + item.name, error: deferr });\n\n\t\t\t\t} else\n\t\t\t\t\tobj[item.name] = instance.preparedata(item, val, err, parent, partial);\n\t\t\t}\n\n\t\t\treturn { data: obj, error: err.length ? err : null };\n\t\t};\n\n\t\tvar findvalue = function(data) {\n\t\t\tvar obj = data;\n\t\t\tfor (var m of path) {\n\t\t\t\tobj = obj[m];\n\t\t\t\tif (!obj)\n\t\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn obj;\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (path)\n\t\t\t\tdata = findvalue(data);\n\n\t\t\tvar err = [];\n\t\t\tvar output = instance.validatedata(data, err, $.input === 'partial');\n\n\t\t\tif (output.error) {\n\t\t\t\t$.send('error', output.error);\n\t\t\t} else {\n\t\t\t\tif (path && config.rewrite)\n\t\t\t\t\tdata = output.data;\n\t\t\t\t$.send('output', path && config.rewrite ? $.data : output.data);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tpath = config.path ? config.path.split('.') : null;\n\t\t\tdefvalues = {};\n\t\t\tfor (var item of config.schema) {\n\t\t\t\tif (item.default) {\n\t\t\t\t\tswitch (item.type) {\n\t\t\t\t\t\tcase 'tinyint':\n\t\t\t\t\t\tcase 'smallint':\n\t\t\t\t\t\tcase 'integer':\n\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\tcase 'float':\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default.parseFloat();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'object':\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tdefvalues[item.name] = new Function('return ' + item.default)();\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'date':\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default === 'now' ? NOOP : item.default.parseDate('yyyy-MM-dd HH:mm:ss');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'boolean':\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default === 'true' || item.default === 'on' || item.default === '1';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis component prepares incoming data according to the defined schema. Output is prepared model or Error.\n</readme>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding bg-smoke\">\n\t\t\t<div data---=\"input__?.name__required:1\" class=\"m\">Model name</div>\n\t\t\t<div data---=\"input__?.path__placeholder:path.to.property;monospace:1\">Load data from the specific property/field</div>\n\t\t\t<div class=\"help\">Optional. The data for the model will be loaded from the specific property/field.</div>\n\t\t\t<div data-bind=\"?.path__show\" class=\"hidden\">\n\t\t\t\t<hr />\n\t\t\t\t<div data---=\"input__?.rewrite__type:checkbox\"><b>Rewrite value only</b> (otherwise, it will replace entire message data)</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"padding\">\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmprestmodel.add\"><i class=\"fa fa-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Fields</label>\n\t\t\t</div>\n\t\t\t<div data-bind=\"?.schema__template:figure --> data-id__show:value && value.length\" class=\"fields m\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\"{{ if m.required }} class=\"isrequired\"{{ fi }}>\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmprestmodel.move\" data-type=\"up\" title=\"Move up\"><i class=\"far fa fa-arrow-up\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmprestmodel.move\" data-type=\"down\" title=\"Move down\"><i class=\"far fa fa-arrow-down\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmprestmodel.rem\" title=\"Remove\"><i class=\"far fa-trash-alt red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"required exec{{ if m.required }} is{{ fi }}\" data-exec=\"tmprestmodel.required\">required</div>\n\t\t\t\t\t\t<div class=\"array exec{{ if m.array }} is{{ fi }}\" data-exec=\"tmprestmodel.array\">Array</div>\n\t\t\t\t\t\t<div class=\"type hellip exec monospace\" data-exec=\"tmprestmodel.type\">{{ m.type | restmodeltype | raw }}</div>\n\t\t\t\t\t\t<div class=\"default\">\n\t\t\t\t\t\t\t<div class=\"edit monospace b\" data-edit=\"exec:tmprestmodel.default;selectall:1\">{{ m.default | empty }}</div>\n\t\t\t\t\t\t\t<div class=\"help nmt\">Default value</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"name\">\n\t\t\t\t\t\t\t<div class=\"monospace edit hellip\" data-edit=\"exec:tmprestmodel.name;required:1\">{{ m.name }}</div>\n\t\t\t\t\t\t\t<div class=\"error\">Error message: <span class=\"edit hellip\" data-edit=\"exec:tmprestmodel.error;required:1\">{{ m.error | empty('Invalid value') }}</span></div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"message message-alert\">If you want to declare a nested object, then you can create another model and link it with this model.</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS { min-width: 220px; }\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 40px; border-top: 1px solid #E0E0E0; line-height: 39px; font-size: 12px; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 40px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .name { margin-right: 350px; padding: 6px 8px 0; line-height: 14px; }\n\t.CLASS-settings figure .name > div:first-child { font-weight: bold; outline: 0; }\n\t.CLASS-settings figure .error { font-size: 11px; color: #888; }\n\t.CLASS-settings figure .error span { color: #B9261A; outline: 0; min-width: 150px; }\n\t.CLASS-settings figure .default { float: right; width: 180px; border-left: 1px solid #E0E0E0; padding: 0 8px; cursor: pointer; line-height: 16px; padding-top: 4px; height: 40px; }\n\t.CLASS-settings figure .type { float: right; width: 180px; border-left: 1px solid #E0E0E0; padding: 0 8px; cursor: pointer; background-color: rgba(0,0,0,0.03); }\n\t.CLASS-settings figure .required { float: right; width: 70px; padding: 0 8px; border-left: 1px solid #E0E0E0; text-align: center; font-size: 11px; cursor: pointer; text-decoration: line-through; }\n\t.CLASS-settings figure .required.is { font-weight: bold; text-decoration: none; color: #EC8632; }\n\t.CLASS-settings figure .array { float: right; width: 70px; padding: 0 8px; border-left: 1px solid #E0E0E0; text-align: center; font-size: 11px; cursor: pointer; text-decoration: line-through;}\n\t.CLASS-settings figure .array.is { font-weight: bold; text-decoration: none; color: #EC8632; }\n\t.CLASS-settings figure .controls { float: right; width: 70px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure.isrequired { background-color: rgba(255,254,209,0.3); }\n\t.CLASS-settings figure.ismoved { background-color: rgba(92,29,196,0.3) !important; }\n\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure.isrequired { background-color: rgba(255,254,209,0.1); }\n\t.ui-dark .CLASS-settings figure .edit-open { background-color: #363636; }\n\t.ui-dark .CLASS-settings figure .default { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .type { border-left-color: #404040; background-color: rgba(100,100,100,0.1); }\n\t.ui-dark .CLASS-settings figure .required { border-left-color: #404040; }\n\t.ui-dark .CLASS-settings figure .array { border-left-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b>Model:</b> <span data-bind=\"CONFIG.name__text\"></span>\n\t</header>\n\t<footer>\n\t\t<span class=\"exec link\" data-exec=\"/copy\"><i class=\"far fa-copy mr5\"></i>Copy fields as Markdown</span>\n\t</footer>\n</body>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tvar tmp = W.tmprestmodel;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tscope.push('schema', { id: Math.random().toString(36).substring(4), name: 'name', type: 'string', required: true, array: false });\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.type = function(el) {\n\t\t\t\t\tvar opt = {};\n\t\t\t\t\topt.element = el;\n\t\t\t\t\topt.align = 'left';\n\t\t\t\t\topt.raw = true;\n\t\t\t\t\topt.items = tmp.types;\n\t\t\t\t\topt.callback = function(selected) {\n\t\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\tif (item)\n\t\t\t\t\t\t\titem.type = selected.id;\n\t\t\t\t\t\tel.html(selected.name);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t};\n\t\t\t\t\tSETTER('directory/show', opt);\n\t\t\t\t};\n\n\t\t\t\ttmp.name = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tif (opt.value) {\n\t\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\titem.name = opt.value;\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tnext(true);\n\t\t\t\t\t} else\n\t\t\t\t\t\tnext(opt.html);\n\t\t\t\t};\n\n\t\t\t\ttmp.move = function(el) {\n\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar container = el.closest('figure');\n\t\t\t\t\tvar schema = scope.get().schema;\n\t\t\t\t\tvar index = schema.findIndex('id', id);\n\t\t\t\t\tvar is = false;\n\t\t\t\t\tvar isup = el.attrd('type') === 'up';\n\n\t\t\t\t\tif (isup) {\n\t\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index - 1];\n\t\t\t\t\t\t\tschema[index - 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (index <= schema.length - 1) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index + 1];\n\t\t\t\t\t\t\tschema[index + 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is) {\n\t\t\t\t\t\tNODEMOVE(container, isup);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tcontainer.aclass('ismoved').rclass('ismoved', 500);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttmp.default = function(opt, next) {\n\t\t\t\t\tif (opt.value) {\n\t\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\n\t\t\t\t\t\tif (opt.value === '---')\n\t\t\t\t\t\t\tdelete opt.value;\n\n\t\t\t\t\t\titem.default = opt.value || undefined;\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tnext(true);\n\t\t\t\t\t} else\n\t\t\t\t\t\tnext(opt.html);\n\t\t\t\t};\n\n\t\t\t\ttmp.error = function(opt, next) {\n\t\t\t\t\tif (opt.value) {\n\t\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\titem.error = opt.value || undefined;\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tnext(true);\n\t\t\t\t\t} else\n\t\t\t\t\t\tnext(opt.html);\n\t\t\t\t};\n\n\t\t\t\ttmp.required = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.required = !item.required;\n\t\t\t\t\tel.tclass('is', item.required);\n\t\t\t\t\tel.closest('figure').tclass('isrequired', item.required);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.array = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.array = !item.array;\n\t\t\t\t\tel.tclass('is', item.array);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\tThelpers.restmodeltype = function(val) {\n\t\t\t\t\treturn tmp.types.findValue('id', val, 'name', DEF.empty);\n\t\t\t\t};\n\n\t\t\t\tW.tmprestmodel = tmp;\n\t\t\t}\n\n\t\t\ttmp.types = [];\n\t\t\ttmp.types.push({ id: 'string', name: 'String' });\n\t\t\ttmp.types.push({ id: 'number', name: 'Number' });\n\t\t\ttmp.types.push({ id: 'email', name: 'Email address' });\n\t\t\ttmp.types.push({ id: 'phone', name: 'Phone number' });\n\t\t\ttmp.types.push({ id: 'boolean', name: 'Boolean' });\n\t\t\ttmp.types.push({ id: 'zip', name: 'ZIP' });\n\t\t\ttmp.types.push({ id: 'date', name: 'Date' });\n\t\t\ttmp.types.push({ id: 'float', name: 'Float' });\n\t\t\ttmp.types.push({ id: 'integer', name: 'Integer' });\n\t\t\ttmp.types.push({ id: 'tinyint', name: 'Tinyint' });\n\t\t\ttmp.types.push({ id: 'smallint', name: 'Smallint' });\n\t\t\ttmp.types.push({ id: 'upper', name: 'String - Upper case' });\n\t\t\ttmp.types.push({ id: 'lower', name: 'String - Lower case' });\n\t\t\ttmp.types.push({ id: 'slug', name: 'String - Slug' });\n\t\t\ttmp.types.push({ id: 'capitalize', name: 'String - Capitalize' });\n\t\t\ttmp.types.push({ id: 'uid', name: 'UI' + 'D' });\n\t\t\ttmp.types.push({ id: 'guid', name: 'GUI' + 'D' });\n\t\t\ttmp.types.push({ id: 'object', name: 'Object' });\n\t\t\ttmp.types.push({ id: 'json', name: 'JSON' });\n\t\t\ttmp.types.push({ id: 'base64', name: 'Base64' });\n\n\t\t\tfor (var key in flow.data) {\n\t\t\t\tvar m = flow.data[key];\n\t\t\t\tif (m.Component && m.Component.name === 'Model')\n\t\t\t\t\ttmp.types.push({ id: m.id, name: 'Model: <b>' + m.config.name.encode() + '</b>' });\n\t\t\t}\n\n\t\t};\n\n\t\texports.copy = function(el) {\n\n\t\t\tvar config = exports.config;\n\t\t\tvar builder = [];\n\n\t\t\tbuilder.push('__Model: ' + config.name + '__:');\n\t\t\tbuilder.push('');\n\n\t\t\tfor (var m of config.schema) {\n\n\t\t\t\tvar type = m.type;\n\t\t\t\tif (type.charAt(0) === 'i' && type !== 'integer') {\n\t\t\t\t\tvar tmp = flow.data[type];\n\t\t\t\t\tif (tmp)\n\t\t\t\t\t\ttype = tmp.config.name;\n\t\t\t\t\telse\n\t\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tbuilder.push('- `{0} {{1}}`'.format(m.name, type) + (m.array ? ' array' : '') + (m.required ? ' __required__' : ''));\n\t\t\t}\n\n\t\t\tSETTER('clipboard/copy', builder.join('\\n'));\n\t\t\tSETTER('notify/success', 'The schema has been copied into the clipboard');\n\t\t};\n\n\t});\n\n</script>",
			"csl8z67b6d": "<script total>\n\n\texports.name = 'Counter';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'fa fa-calculator';\n\texports.author = 'Total.js';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance) {\n\n\t\tvar count = 0;\n\n\t\tinstance.message = function($) {\n\t\t\tcount++;\n\t\t\tinstance.status(count);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function(data) {\n\t\t\tcount = 0;\n\t\t\tinstance.status(count);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 35px; margin: 0; padding: 0 10px 10px; font-weight: bold; text-align: center; }\n</style>\n\n<readme>\nThe component counts incoming messages.\n</readme>\n\n<body>\n\t<header>\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Reset</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"STATUS__text:(value || 0).format(0)\" class=\"status\"></footer>\n</body>",
			"cij905b3d1": "<script total>\n\n\texports.name = 'Query';\n\texports.icon = 'fa fa-code';\n\texports.author = 'Total Avengers';\n\texports.version = '1';\n\texports.config = { query: '', dependencies: '', database: ''};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\t// exports.npm = ['npm_module_1', 'npm_module_2@version'];\n\n\texports.make = function(instance, config) {\n\n\t\t// instance.main.variables {Object}\n\t\t// instance.main.variables2 {Object}\n\t\t// instance.save();\n\t\t// instance.replace(str); // replaces {variable_name} for values from \"variables\" and \"variables2\"\n\n\t\tinstance.message = function($) {\n\t\t\t//var data = $.data;\n\t\t\tvar data = {\n\t\t\t\t\"query\": config.query,\n\t\t\t\t\"dependencies\": config.dependencies,\n\t\t\t\t\"database\": config.database\n\t\t\t}\n\t\t\t$.send('output', data);\n\t\t\t// or $.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\t// this instance is closed\n\t\t};\n\n\t\tinstance.variables = function(variables) {\n\t\t\t// FlowStream variables are changed\n\t\t};\n\n\t\tinstance.variables2 = function(variables) {\n\t\t\t// Global variables are changed\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nMarkdown readme\n\n```js\nvar total = 'Hello world!';\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\tSETTINGS for this component (optional)\n\n\t\t<div data---=\"input__?.database__required:1\">Database</div>\n\t\t<div data---=\"input__?.dependencies__required:1\">Dependencies</div>\n\t\t<div data---=\"codemirror__?.query__type:sql;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\">Query</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n\t// Client-side script\n\t// Optional, you can remove it\n\n\t// A custom helper for the component instances\n\t// The method below captures each instance of this component\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar name = exports.name + ' --> ' + exports.id;\n\n\t\tconsole.log(name, 'initialized' + (reinit ? ' : UPDATE' : ''));\n\n\t\texports.settings = function(meta) {\n\t\t\t// Triggered when the user opens settings\n\t\t\tconsole.log(name, 'settings', meta);\n\t\t};\n\n\t\texports.configure = function(config, isinit) {\n\t\t\t// Triggered when the config is changed\n\t\t\tconsole.log(name, 'configure', config);\n\t\t};\n\n\t\texports.status = function(status, isinit) {\n\t\t\t// Triggered when the status is changed\n\t\t\tconsole.log(name, 'status', status);\n\t\t};\n\n\t\texports.note = function(note, isinit) {\n\t\t\t// Triggered when the note is changed\n\t\t\tconsole.log(name, 'note', note);\n\t\t};\n\n\t\texports.variables = function(variables) {\n\t\t\t// Triggered when the variables are changed\n\t\t\tconsole.log(name, 'variables', variables);\n\t\t};\n\n\t\texports.variables2 = function(variables) {\n\t\t\t// Triggered when the variables2 are changed\n\t\t\tconsole.log(name, 'variables2', variables);\n\t\t};\n\n\t\texports.close = function() {\n\t\t\t// Triggered when the instance is closing due to some reasons\n\t\t\tconsole.log(name, 'close');\n\t\t};\n\n\t});\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>Learn from existing components</footer>\n</body>",
			"c1nkj9d202": "<script total>\n\n\texports.name = 'File Writer';\n\texports.group = 'Files';\n\texports.version = '1';\n\texports.icon = 'fa fa-pencil';\n\texports.author = 'Total.js';\n\texports.config = { path: '', serializer: 'json', rewrite: true, divider: '\\\\n' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar path;\n\t\tvar divider;\n\t\tvar timeout;\n\n\t\tvar replacewhitechar = function(text) {\n\t\t\tswitch (text[1]) {\n\t\t\t\tcase 'n':\n\t\t\t\t\treturn '\\n';\n\t\t\t\tcase 'r':\n\t\t\t\t\treturn '\\r';\n\t\t\t\tcase 't':\n\t\t\t\t\treturn '\\t';\n\t\t\t}\n\t\t\treturn text;\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.path)\n\t\t\t\treturn;\n\n\t\t\tvar data = $.data;\n\n\t\t\tswitch (config.serializer) {\n\t\t\t\tcase 'json':\n\t\t\t\t\tdata = JSON.stringify($.data);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'text':\n\t\t\t\t\tdata = data + '';\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (!(data instanceof Buffer)) {\n\t\t\t\tif (typeof(data) !== 'string')\n\t\t\t\t\tdata = data + '';\n\t\t\t\tdata = Buffer.from(data, 'utf8');\n\t\t\t}\n\n\t\t\tNOW = new Date();\n\t\t\tinstance.status({ used: NOW, size: data.length });\n\n\t\t\tif (config.rewrite) {\n\t\t\t\tF.Fs.writeFile(path, data, NOOP);\n\t\t\t} else {\n\t\t\t\tif (divider)\n\t\t\t\t\tdata = Buffer.concat([data, divider]);\n\t\t\t\tF.Fs.appendFile(path, data, NOOP);\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tpath = config.path[0] === '~' ? PATH.root(config.path.substring(1)) : config.path;\n\t\t\tdivider = config.divider ? Buffer.from(config.divider.replace(/\\\\[a-z]/g, replacewhitechar), 'utf8') : null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.path__required:1;placeholder:/www/flowstream/data.json\"><b>Path</b></div>\n\t\t<div class=\"help m\">Absolute path to the file. The path starts with the <code>~</code> char will use a filename in the project's root directory.</div>\n\t\t<div data---=\"input__?.serializer__dirsource:json|JSON,text|Text,buffer|Buffer;required:1__'json'\" class=\"m\">Serializer</div>\n\t\t<div data---=\"input__?.rewrite__type:checkbox__true\">Rewrite content</div>\n\t\t<div data-bind=\"?.rewrite__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t\t<div data---=\"input__?.divider\">Divider</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component writes incoming data into the file.\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\t.CLASS hr { margin: 5px 0; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><i class=\"far fa-calendar mr5\"></i><span data-bind=\"STATUS.used__text__format:yyyy-MM-dd HH:mm:ss__empty\"></span></div>\n\t\t<div><i class=\"fa fa-calculator mr5\"></i><span data-bind=\"STATUS.size__text__helper:filesize__empty\"></span></div>\n\t\t<hr />\n\t\t<div data-bind=\"CONFIG.path__text__empty\"></div>\n\t</footer>\n</body>",
			"pubsrcvjer4415aXconnections_insert": "<script total>\n\n\texports.name = 'TMS Example';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcvjer4415a', 'connections_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcvjer4415aXconnections_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# connections_insert\n- URL address: <http://localhost:8112>\n- Channel: __publish__\n- JSON schema `connections_insert.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Connections.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"description\": {\n      \"type\": \"string\"\n    },\n    \"host\": {\n      \"type\": \"string\"\n    },\n    \"icon\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"type\": {\n      \"type\": \"string\"\n    },\n    \"scope\": {\n      \"type\": \"string\"\n    },\n    \"port\": {\n      \"type\": \"number\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Example / <b>connections_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"pubsrcvjer4415aXconnections_update": "<script total>\n\n\texports.name = 'TMS Example';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcvjer4415a', 'connections_update'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcvjer4415aXconnections_update .url { font-size: 11px; }\n</style>\n\n<readme>\n# connections_update\n- URL address: <http://localhost:8112>\n- Channel: __publish__\n- JSON schema `connections_update.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Connections.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"description\": {\n      \"type\": \"string\"\n    },\n    \"host\": {\n      \"type\": \"string\"\n    },\n    \"icon\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"type\": {\n      \"type\": \"string\"\n    },\n    \"scope\": {\n      \"type\": \"string\"\n    },\n    \"port\": {\n      \"type\": \"number\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Example / <b>connections_update</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"pubsrcvjer4415aXconnections_remove": "<script total>\n\n\texports.name = 'TMS Example';\n\texports.icon = 'fas fa-broadcast-tower';\n\texports.config = {};\n\texports.outputs = [{ id: 'publish', name: 'Output' }];\n\texports.group = 'Publishers';\n\texports.type = 'pub';\n\texports.schemaid = ['srcvjer4415a', 'connections_remove'];\n\n\texports.make = function(instance) {\n\t\tinstance.process = function(msg, client) {\n\t\t\tinstance.send('publish', msg, client);\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-pubsrcvjer4415aXconnections_remove .url { font-size: 11px; }\n</style>\n\n<readme>\n# connections_remove\n- URL address: <http://localhost:8112>\n- Channel: __publish__\n- JSON schema `connections_remove.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Connections.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"description\": {\n      \"type\": \"string\"\n    },\n    \"host\": {\n      \"type\": \"string\"\n    },\n    \"icon\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"type\": {\n      \"type\": \"string\"\n    },\n    \"scope\": {\n      \"type\": \"string\"\n    },\n    \"port\": {\n      \"type\": \"number\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-broadcast-tower mr5\"></i><span>TMS Example / <b>connections_remove</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcvjer4415aXconnections_insert": "<script total>\n\n\texports.name = 'TMS Example';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcvjer4415a', 'connections_insert'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcvjer4415a'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['connections_insert']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'connections_insert', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcvjer4415aXconnections_insert .url { font-size: 11px; }\n</style>\n\n<readme>\n# connections_insert\n- URL address: <http://localhost:8112>\n- Channel: __subscribe__\n- JSON schema `connections_insert.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"connections_insert\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Connections.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"name\": {\n        \"type\": \"string\"\n      },\n      \"description\": {\n        \"type\": \"string\"\n      },\n      \"host\": {\n        \"type\": \"string\"\n      },\n      \"icon\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"type\": {\n        \"type\": \"string\"\n      },\n      \"scope\": {\n        \"type\": \"string\"\n      },\n      \"port\": {\n        \"type\": \"number\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Example / <b>connections_insert</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcvjer4415aXconnections_update": "<script total>\n\n\texports.name = 'TMS Example';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcvjer4415a', 'connections_update'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcvjer4415a'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['connections_update']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'connections_update', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcvjer4415aXconnections_update .url { font-size: 11px; }\n</style>\n\n<readme>\n# connections_update\n- URL address: <http://localhost:8112>\n- Channel: __subscribe__\n- JSON schema `connections_update.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"connections_update\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Connections.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"name\": {\n        \"type\": \"string\"\n      },\n      \"description\": {\n        \"type\": \"string\"\n      },\n      \"host\": {\n        \"type\": \"string\"\n      },\n      \"icon\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"type\": {\n        \"type\": \"string\"\n      },\n      \"scope\": {\n        \"type\": \"string\"\n      },\n      \"port\": {\n        \"type\": \"number\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Example / <b>connections_update</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"subsrcvjer4415aXconnections_remove": "<script total>\n\n\texports.name = 'TMS Example';\n\texports.icon = 'fas fa-satellite-dish';\n\texports.group = 'Subscribers';\n\texports.config = {};\n\texports.inputs = [{ id: 'subscribe', name: 'Input' }];\n\texports.type = 'sub';\n\texports.schemaid = ['srcvjer4415a', 'connections_remove'];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tvar socket = instance.main.sockets['srcvjer4415a'];\n\t\t\tif (socket && socket.subscribers && socket.subscribers['connections_remove']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.destroy();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tsocket.send({ type: 'subscribe', id: 'connections_remove', data: data });\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-subsrcvjer4415aXconnections_remove .url { font-size: 11px; }\n</style>\n\n<readme>\n# connections_remove\n- URL address: <http://localhost:8112>\n- Channel: __subscribe__\n- JSON schema `connections_remove.json`\n- Version: 24\n\n```json\n{\n  \"id\": \"connections_remove\",\n  \"schema\": {\n    \"$id\": \"https://schemas.totaljs.com/Connections.json\",\n    \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"name\": {\n        \"type\": \"string\"\n      },\n      \"description\": {\n        \"type\": \"string\"\n      },\n      \"host\": {\n        \"type\": \"string\"\n      },\n      \"icon\": {\n        \"type\": \"string\"\n      },\n      \"id\": {\n        \"type\": \"string\"\n      },\n      \"type\": {\n        \"type\": \"string\"\n      },\n      \"scope\": {\n        \"type\": \"string\"\n      },\n      \"port\": {\n        \"type\": \"number\"\n      },\n      \"dtcreated\": {\n        \"type\": \"date\"\n      },\n      \"dtupdated\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fas fa-satellite-dish mr5\"></i><span>TMS Example / <b>connections_remove</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>",
			"calsrcvjer4415aXconnections_query": "<script total>\n\n\texports.name = 'TMS Example';\n\texports.icon = 'fa fa-plug';\n\texports.config = { timeout: 60000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.group = 'Calls';\n\texports.type = 'call';\n\texports.schemaid = ['srcvjer4415a', 'connections_query'];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($, client) {\n\t\t\tvar socket = instance.main.sockets['srcvjer4415a'];\n\t\t\tif (socket && socket.calls && socket.calls['connections_query']) {\n\n\t\t\t\tvar data = $.data;\n\n\t\t\t\t/*\n\t\t\t\t\tvar err = new ErrorBuilder();\n\t\t\t\t\tdata = framework_jsonschema.transform(schema, err, data, true);\n\n\t\t\t\t\tif (err.is) {\n\t\t\t\t\t\t$.send('error', err.toString());\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t*/\n\n\t\t\t\tvar callback = function(err, response) {\n\t\t\t\t\tif (err)\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\telse\n\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t};\n\n\t\t\t\tvar callbackid = (socket.callbackindexer++) + '';\n\n\t\t\t\tif (socket.callbackindexer > 999999999)\n\t\t\t\t\tsocket.callbackindexer = 0;\n\n\t\t\t\tsocket.callbacks[callbackid] = { callback: callback, id: setTimeout(socket.callbacktimeout, config.timeout, callbackid) };\n\t\t\t\tsocket.send({ type: 'call', id: 'connections_query', data: data, callbackid: callbackid });\n\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.f-calsrcvjer4415aXconnections_query .url { font-size: 11px; }\n</style>\n\n<readme>\n# connections_query\n- URL address: <http://localhost:8112>\n- Channel: __call__\n- JSON schema `connections_query.json`\n- Version: 24\n\n```json\n{\n  \"$id\": \"https://schemas.totaljs.com/Connections.json\",\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"description\": {\n      \"type\": \"string\"\n    },\n    \"host\": {\n      \"type\": \"string\"\n    },\n    \"icon\": {\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"type\": {\n      \"type\": \"string\"\n    },\n    \"scope\": {\n      \"type\": \"string\"\n    },\n    \"port\": {\n      \"type\": \"number\"\n    },\n    \"dtcreated\": {\n      \"type\": \"date\"\n    },\n    \"dtupdated\": {\n      \"type\": \"date\"\n    }\n  }\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<div><i class=\"fa fa-plug mr5\"></i><span>TMS Example / <b>connections_query</b></span></div>\n\t\t<div class=\"url\"></div>\n\t</header>\n</body>"
		},
		"design": {
			"il5tummbw": {
				"id": "il5tummbw",
				"config": {
					"random": true,
					"type": "string",
					"data": "",
					"restart": false
				},
				"x": 30,
				"y": 621,
				"component": "cmbr250a48",
				"connections": {
					"output": [
						{
							"id": "il5tuwtah",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "Triggers",
					"name": "Trigger",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il5tup8m9": {
				"id": "il5tup8m9",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 863,
				"y": 32,
				"component": "cmfjj64e18",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il5tuwtah": {
				"id": "il5tuwtah",
				"config": {
					"outputs": 1,
					"code": "// instance {FlowStreamInstance};\n// $ {FlowStreamMessage};\n// vars {Object};\n// repo {Object};\n// data {String/Number/Boolean/Date/Buffer/Object};\n// $.send('output', data); // or simply send(data); which uses the first output\n// $.destroy();\n// $.throw(err);\n\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\n\n$.send('output',\n\t   {\n\t\t\"name\": \"connection1\",\n\t\t\"description\": \"connection1\",\n\t\t\"host\": \"localhost\",\n\t\t\"icon\": \"gear\",\n\t\t\"id\": \"connection1\",\n\t\t\"type\": \"connection\",\n\t\t\"scope\": \"local\",\n\t\t\"port\": 1729\n\t   }\n\t  );\n$.destroy();"
				},
				"x": 343,
				"y": 724,
				"component": "coi2uf35a9",
				"connections": {
					"output": [
						{
							"id": "il5tvst90",
							"index": "input"
						}
					]
				},
				"outputs": [
					{
						"id": "output",
						"name": "Output #1"
					}
				],
				"template": {
					"icon": "fa fa-code",
					"group": "Common",
					"name": "Code",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il5tvst90": {
				"id": "il5tvst90",
				"config": {},
				"x": 577,
				"y": 754,
				"component": "csl8z67b6d",
				"connections": {},
				"template": {
					"icon": "fa fa-calculator",
					"group": "Common",
					"name": "Counter",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il5uoin1t": {
				"id": "il5uoin1t",
				"config": {
					"query": "var d3 = require(\"d3\"),\n    jsdom = require(\"jsdom\");\n\nconst { JSDOM } = jsdom;\n\nconst { document } = (new JSDOM('')).window;\nglobal.document = document;\n\n\nvar theme = {\n        \tattribute: {colorlist: \"Oranges\", cindex: 7, tcolorlist: \"Greys\", tindex: 0 },\n          entity: {colorlist: \"Blues\", cindex: 7, tcolorlist: \"Greys\", tindex: 0 },\n          relation: {colorlist: \"Blue-Green\", cindex: 6, tcolorlist: \"Greys\", tindex: 7 },\n          shadow: {colorlist: \"Oranges\", cindex: 2, tcolorlist: \"Greys\", tindex: 7 }\n        }\n\n\n    \t\tvar svg = d3.select(document).select(\"body\")\n               .append(\"svg\")\n               .attr(\"width\", \"calc(100vw)\")\n               .attr(\"height\", \"calc(100vh)\")\n               .call(d3.zoom().on(\"zoom\", function () {\n                  svg.attr(\"transform\", d3.event.transform)\n               }))\n               .append(\"g\")\n\n\t\t\t\tconst height = 500;\n\t\t\t\tconst width = +d3.select(\"body\").attr('width');\n\n      \t// setup the theme colour\n\n\t\t\t\tconst textPadding = 8;\n\t\t\t\tconst corner = 5;\n      \tconst grp_corner = 8;\n      \tconst pad = 5;\n        var ent_colour = '#03396c';\n        var ent_t_colour = 'white';\n        var att_colour = '#ff4d00';\n        var att_t_colour = 'white';\n      \tvar shad_colour = \"#ff4d00\";\n      \tvar shad_t_colour = 'white';\n        var rel_colour = '#007777';\n        var rel_t_colour = 'black';\n      \tvar colours;\n\n      \td3.json(\"data\\\\color.json\", function (error, colors) {\n          colours = colors\n          // load the colours from the theme\n          ent_colour = colors.find(colour => colour.name == theme.entity.colorlist)['colors'][theme.entity.cindex];\n          ent_t_colour = colors.find(colour => colour.name == theme.entity.tcolorlist)['colors'][theme.entity.tindex];\n          att_colour = colors.find(colour => colour.name == theme.attribute.colorlist)['colors'][theme.attribute.cindex];\n          att_t_colour = colors.find(colour => colour.name == theme.attribute.tcolorlist)['colors'][theme.attribute.tindex];\n          shad_colour = colors.find(colour => colour.name == theme.shadow.colorlist)['colors'][theme.shadow.cindex];\n          shad_t_colour = colors.find(colour => colour.name == theme.shadow.tcolorlist)['colors'][theme.shadow.tindex];\n        \trel_colour = colors.find(colour => colour.name == theme.relation.colorlist)['colors'][theme.relation.cindex];\n          rel_t_colour = colors.find(colour => colour.name == theme.relation.tcolorlist)['colors'][theme.relation.tindex];\n        });\n\n        var cola = cola.d3adaptor(d3)\n            .size([width, height]);\n\n        // graph.json\n      \td3.json(\"data\\\\basic.json\", function (error, graph) {\n          data = graph.basic;\n            cola\n                .nodes(data.nodes)\n                .links(data.links)\n          \t\t\t.groups(data.groups)\n                .linkDistance(100)\n                .avoidOverlaps(true)\n                .handleDisconnected(false)\n                .start(30);\n\n          \tvar group = svg.selectAll(\".group\")\n                .data(data.groups)\n              .enter().append(\"rect\")\n                .attr(\"rx\", grp_corner).attr(\"ry\", grp_corner)\n                .attr(\"class\", \"group\")\n                .style(\"fill\", function (d, i) {\n                  \treturn colours.find(colour => colour.name == d.colour_list)['colors'][d.level];\n                })\n            \t\t.attr(\"stroke-width\", 1)\n\t\t             .attr(\"stroke\", function (d, i) {\n                  \treturn colours.find(colour => colour.name == d.colour_list)['colors'][7];\n                })\n                .call(cola.drag);\n\n          group.append(\"title\")\n            .text(function (d) { return d.label; });\n\n\n            var link = svg.selectAll(\".link\")\n                .data(data.links)\n              .enter().append(\"line\")\n                .attr(\"class\", \"link\")\n                .style(\"stroke-width\", '1px')\n            \t\t.attr('stroke', 'black');\n\n            var node = svg.selectAll(\".node\")\n                .data(data.nodes)\n              .enter().append(\"rect\")\n            \t\t.attr('class', \"node\")\n                .attr('class', d => d.type)\n                .attr('class', d => d.G_name)\n    \t\t\t\t\t\t.attr('id', d => d.G_id);\n\n          \tvar label = svg.selectAll(\".label\")\n                  .data(data.nodes)\n               .enter().append(\"text\")\n                  .attr(\"class\", \"label\")\n                  .text(d => d.type == 'attribute'\n                            ? (d.G_name + ': ' + d.value)\n                            : (d.G_name + ': ' + d.G_id))\n                  .attr('id', d => 'heading-' + d.G_id)\n                  .style('font-size', 10)\n                  .style('text-anchor', 'middle')\n                  .style('color', d => text_colour(d))\n                  .style('fill', d => text_colour(d))\n                  .style(\"pointer-events\", \"none\")\n            \t\t\t.call(cola.drag);\n\n            // setup heading colours for attribute, entity and relation\n            function text_colour(d) {\n                let colour = 'black'\n                switch (d.type) {\n                    case 'attribute':\n                    \t\tif (d.dtype == 'actual'){\n                        \t\tcolour = att_t_colour\n                        } else {\n                        \t\tcolour = shad_t_colour\n                        }\n                        break;\n                    case 'entity':\n                        colour = ent_t_colour\n                        break;\n                    case 'relation':\n                        colour = rel_t_colour\n                        break;\n                    default:\n                        colour = 'black'\n                        break;\n                }\n                return colour;\n            }\n\n\n          \tnode\n            \t\t.attr('width', d => nodeWidth(d))\n                .attr('height', d => d.height)\n                .attr('rx', d => d.corner)\n                .attr('ry', d=> d.corner)\n                .attr('x', d => d.x)\n                .attr('y', d => d.y)\n                .attr(\"class\", d => d.G_name)\n          \t\t\t.style(\"fill\", d => d.colour)\n                .on(\"click\", function (d) {\n                    d.fixed = true;\n                })\n                .call(cola.drag);\n\n          \t// function to set dimensions and colours for shapes\n            function nodeWidth(d) {\n                let headingid = '#heading-' + d.G_id;\n                let headingbbox = d3.select(headingid).node().getBBox();\n\n                d.width = d3.max([5, headingbbox.width]) + (textPadding * 2)\n                d.height = headingbbox.height  + textPadding * 2\n\n                // attributes and entities rounded rectangle, relation is circle\n                switch (d.type) {\n                    case 'attribute':\n                        d.corner = corner\n                        d.colour = att_colour\n                        d.x = headingbbox.x - textPadding\n                        d.y = headingbbox.y - textPadding\n                    \t\tif (d.dtype === 'shadow'){\n                          \td.colour =  shad_colour;\n                        } else {\n                          \td.colour =  att_colour;\n                        }\n                        break;\n\n                    case 'entity':\n                        d.corner = corner\n                        d.colour = ent_colour\n                        d.x = headingbbox.x - textPadding\n                        d.y = headingbbox.y - textPadding\n                    \t\tbreak;\n\n                    case 'relation':\n                        d.width = 16\n                        d.height = 16\n                        d.corner = 8\n                        d.colour = rel_colour\n                        d.x = headingbbox.x + (headingbbox.width)/2 - d.width/2\n                        d.y = headingbbox.y + d.height/2\n                    \t\tbreak;\n\n                    default:\n                        break;\n                }\n                return d.width;\n            };\n\n\n            cola.on(\"tick\", function () {\n                link.attr(\"x1\", function (d) { return d.source.x; })\n                    .attr(\"y1\", function (d) { return d.source.y; })\n                    .attr(\"x2\", function (d) { return d.target.x; })\n                    .attr(\"y2\", function (d) { return d.target.y; });\n\n                node.attr(\"x\", function (d) { return d.x - d.width/2; })\n                    .attr(\"y\", function (d) { return d.y - d.height/2; });\n\n              \t group.attr(\"x\", function (d) { return d.bounds.x -pad; })\n                      .attr(\"y\", function (d) { return d.bounds.y - pad; })\n                      .attr(\"width\", function (d) { return d.bounds.width() + 2 * pad; })\n                      .attr(\"height\", function (d) { return d.bounds.height() + 2 * pad; });\n\n              \tlabel.attr(\"x\", function (d) { return d.x; })\n                     .attr(\"y\", function (d) {\n                         var h = this.getBBox().height;\n                         return d.y + h/4;\n                     });\n            });\n        });\n\nconst fs = require('fs');\nfs.writeFileSync(\"test.svg\", body.node().innerHTML)",
					"dependencies": "asf",
					"database": "datbase"
				},
				"x": 289,
				"y": 853,
				"component": "cij905b3d1",
				"connections": {
					"output": [
						{
							"id": "il5uojvxe",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-code",
					"name": "Query",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il5uojr5r": {
				"id": "il5uojr5r",
				"config": {
					"random": true,
					"type": "string",
					"data": "",
					"restart": false
				},
				"x": 53,
				"y": 782,
				"component": "cmbr250a48",
				"connections": {
					"output": [
						{
							"id": "il5uoin1t",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "Triggers",
					"name": "Trigger",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il5uojvxe": {
				"id": "il5uojvxe",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 573,
				"y": 878,
				"component": "cmfjj64e18",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il5wlc0zb": {
				"id": "il5wlc0zb",
				"config": {
					"random": false,
					"type": "object",
					"data": "{\"name\":\"connection1\",\"description\":\"connection1\",\"host\":\"localhost\",\"icon\":\"gear\",\"id\":\"connection1\",\"type\":\"connection\",\"scope\":\"local\",\"port\":1729}",
					"restart": false
				},
				"x": 234,
				"y": 186,
				"component": "cmbr250a48",
				"connections": {
					"output": [
						{
							"id": "il5xew47s",
							"index": "subscribe"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "Triggers",
					"name": "Trigger",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il5xevvzm": {
				"id": "il5xevvzm",
				"config": {
					"timeout": 60000
				},
				"x": 498,
				"y": 366,
				"component": "calsrcvjer4415aXconnections_query",
				"connections": {
					"error": [
						{
							"id": "il5xexq77",
							"index": "input"
						}
					],
					"output": [
						{
							"id": "il5xexq77",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "call",
					"icon": "fa fa-plug",
					"group": "Calls",
					"name": "TMS Example",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					],
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						},
						{
							"id": "error",
							"name": "Error"
						}
					]
				}
			},
			"il5xew47s": {
				"id": "il5xew47s",
				"config": {},
				"x": 441,
				"y": 221,
				"component": "subsrcvjer4415aXconnections_insert",
				"connections": {},
				"template": {
					"type": "sub",
					"icon": "fas fa-satellite-dish",
					"group": "Subscribers",
					"name": "TMS Example",
					"inputs": [
						{
							"id": "subscribe",
							"name": "Input"
						}
					]
				}
			},
			"il5xex8ks": {
				"id": "il5xex8ks",
				"config": {},
				"x": 331,
				"y": 53,
				"component": "pubsrcvjer4415aXconnections_insert",
				"connections": {
					"publish": [
						{
							"id": "il5tup8m9",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "pub",
					"icon": "fas fa-broadcast-tower",
					"group": "Publishers",
					"name": "TMS Example",
					"outputs": [
						{
							"id": "publish",
							"name": "Output"
						}
					]
				}
			},
			"il5xexjss": {
				"id": "il5xexjss",
				"config": {
					"random": true,
					"type": "string",
					"data": "",
					"restart": false
				},
				"x": 127,
				"y": 457,
				"component": "cmbr250a48",
				"connections": {
					"output": [
						{
							"id": "il5xevvzm",
							"index": "input"
						}
					]
				},
				"template": {
					"icon": "fa fa-bullhorn",
					"group": "Triggers",
					"name": "Trigger",
					"outputs": [
						{
							"id": "output",
							"name": "Output"
						}
					]
				}
			},
			"il5xexq77": {
				"id": "il5xexq77",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 902,
				"y": 320,
				"component": "cmfjj64e18",
				"connections": {},
				"template": {
					"icon": "fa fa-print",
					"group": "Common",
					"name": "Print",
					"inputs": [
						{
							"id": "input",
							"name": "Input"
						}
					]
				}
			},
			"il5xezj34": {
				"id": "il5xezj34",
				"config": {},
				"x": 130,
				"y": 327,
				"component": "pubsrcvjer4415aXconnections_insert",
				"connections": {
					"publish": [
						{
							"id": "il5xevvzm",
							"index": "input"
						}
					]
				},
				"template": {
					"type": "pub",
					"icon": "fas fa-broadcast-tower",
					"group": "Publishers",
					"name": "TMS Example",
					"outputs": [
						{
							"id": "publish",
							"name": "Output"
						}
					]
				}
			}
		},
		"variables": {},
		"sources": {
			"srcvjer4415a": {
				"token": "typerefinery",
				"url": "http://localhost:8112/$tms/",
				"id": "srcvjer4415a",
				"meta": {
					"type": "meta",
					"name": "TMS Example",
					"subscribe": [
						{
							"id": "connections_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Connections.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									},
									"description": {
										"type": "string"
									},
									"host": {
										"type": "string"
									},
									"icon": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"type": {
										"type": "string"
									},
									"scope": {
										"type": "string"
									},
									"port": {
										"type": "number"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "connections_update",
							"schema": {
								"$id": "https://schemas.totaljs.com/Connections.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									},
									"description": {
										"type": "string"
									},
									"host": {
										"type": "string"
									},
									"icon": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"type": {
										"type": "string"
									},
									"scope": {
										"type": "string"
									},
									"port": {
										"type": "number"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "connections_remove",
							"schema": {
								"$id": "https://schemas.totaljs.com/Connections.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									},
									"description": {
										"type": "string"
									},
									"host": {
										"type": "string"
									},
									"icon": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"type": {
										"type": "string"
									},
									"scope": {
										"type": "string"
									},
									"port": {
										"type": "number"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					],
					"publish": [
						{
							"id": "connections_insert",
							"schema": {
								"$id": "https://schemas.totaljs.com/Connections.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"name": {
										"type": "string",
										"$$ID": "name",
										"$$REQUIRED": false
									},
									"description": {
										"type": "string",
										"$$ID": "description",
										"$$REQUIRED": false
									},
									"host": {
										"type": "string",
										"$$ID": "host",
										"$$REQUIRED": false
									},
									"icon": {
										"type": "string",
										"$$ID": "icon",
										"$$REQUIRED": false
									},
									"id": {
										"type": "string",
										"$$ID": "id",
										"$$REQUIRED": false
									},
									"type": {
										"type": "string",
										"$$ID": "type",
										"$$REQUIRED": false
									},
									"scope": {
										"type": "string",
										"$$ID": "scope",
										"$$REQUIRED": false
									},
									"port": {
										"type": "number",
										"$$ID": "port",
										"$$REQUIRED": false
									},
									"dtcreated": {
										"type": "date",
										"$$ID": "dtcreated",
										"$$REQUIRED": false
									},
									"dtupdated": {
										"type": "date",
										"$$ID": "dtupdated",
										"$$REQUIRED": false
									}
								}
							}
						},
						{
							"id": "connections_update",
							"schema": {
								"$id": "https://schemas.totaljs.com/Connections.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									},
									"description": {
										"type": "string"
									},
									"host": {
										"type": "string"
									},
									"icon": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"type": {
										"type": "string"
									},
									"scope": {
										"type": "string"
									},
									"port": {
										"type": "number"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						},
						{
							"id": "connections_remove",
							"schema": {
								"$id": "https://schemas.totaljs.com/Connections.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									},
									"description": {
										"type": "string"
									},
									"host": {
										"type": "string"
									},
									"icon": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"type": {
										"type": "string"
									},
									"scope": {
										"type": "string"
									},
									"port": {
										"type": "number"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					],
					"subscribers": [
						"connections_insert",
						"connections_update",
						"connections_remove"
					],
					"call": [
						{
							"id": "connections_query",
							"schema": {
								"$id": "https://schemas.totaljs.com/Connections.json",
								"$schema": "https://json-schema.org/draft/2020-12/schema",
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									},
									"description": {
										"type": "string"
									},
									"host": {
										"type": "string"
									},
									"icon": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"type": {
										"type": "string"
									},
									"scope": {
										"type": "string"
									},
									"port": {
										"type": "number"
									},
									"dtcreated": {
										"type": "date"
									},
									"dtupdated": {
										"type": "date"
									}
								}
							}
						}
					]
				},
				"checksum": "2646382901",
				"restart": false,
				"error": 0,
				"init": true,
				"online": true
			}
		},
		"origin": "http://localhost:8111",
		"dtcreated": "2022-07-20T16:54:57.401Z",
		"size": 81023
	}
}